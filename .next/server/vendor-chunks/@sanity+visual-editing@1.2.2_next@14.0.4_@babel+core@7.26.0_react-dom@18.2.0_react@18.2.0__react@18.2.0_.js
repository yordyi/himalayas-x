"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_";
exports.ids = ["vendor-chunks/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/Overlays-bQSRS-P9.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/Overlays-bQSRS-P9.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Overlays: () => (/* binding */ Xb)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-is */ \"(ssr)/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-CCPqf31P.js */ \"(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/index-CCPqf31P.js\");\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/./node_modules/.pnpm/scroll-into-view-if-needed@3.1.0/node_modules/scroll-into-view-if-needed/dist/index.js\");\n\n\n\n\n\n\n\n\nconst z = [\n    \"gray\",\n    \"blue\",\n    \"purple\",\n    \"magenta\",\n    \"red\",\n    \"orange\",\n    \"yellow\",\n    \"green\",\n    \"cyan\"\n], L = [\n    \"50\",\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\",\n    \"950\"\n], V = {\n    black: {\n        title: \"Black\",\n        hex: \"#0d0e12\"\n    },\n    white: {\n        title: \"White\",\n        hex: \"#ffffff\"\n    },\n    ...{\n        gray: {\n            50: {\n                title: \"Gray 50\",\n                hex: \"#f6f6f8\"\n            },\n            100: {\n                title: \"Gray 100\",\n                hex: \"#eeeef1\"\n            },\n            200: {\n                title: \"Gray 200\",\n                hex: \"#e3e4e8\"\n            },\n            300: {\n                title: \"Gray 300\",\n                hex: \"#bbbdc9\"\n            },\n            400: {\n                title: \"Gray 400\",\n                hex: \"#9499ad\"\n            },\n            500: {\n                title: \"Gray 500\",\n                hex: \"#727892\"\n            },\n            600: {\n                title: \"Gray 600\",\n                hex: \"#515870\"\n            },\n            700: {\n                title: \"Gray 700\",\n                hex: \"#383d51\"\n            },\n            800: {\n                title: \"Gray 800\",\n                hex: \"#252837\"\n            },\n            900: {\n                title: \"Gray 900\",\n                hex: \"#1b1d27\"\n            },\n            950: {\n                title: \"Gray 950\",\n                hex: \"#13141b\"\n            }\n        },\n        blue: {\n            50: {\n                title: \"Blue 50\",\n                hex: \"#f5f8ff\"\n            },\n            100: {\n                title: \"Blue 100\",\n                hex: \"#e5edff\"\n            },\n            200: {\n                title: \"Blue 200\",\n                hex: \"#dbe5ff\"\n            },\n            300: {\n                title: \"Blue 300\",\n                hex: \"#a8bfff\"\n            },\n            400: {\n                title: \"Blue 400\",\n                hex: \"#7595ff\"\n            },\n            500: {\n                title: \"Blue 500\",\n                hex: \"#556bfc\"\n            },\n            600: {\n                title: \"Blue 600\",\n                hex: \"#4043e7\"\n            },\n            700: {\n                title: \"Blue 700\",\n                hex: \"#2927aa\"\n            },\n            800: {\n                title: \"Blue 800\",\n                hex: \"#192457\"\n            },\n            900: {\n                title: \"Blue 900\",\n                hex: \"#161a41\"\n            },\n            950: {\n                title: \"Blue 950\",\n                hex: \"#101228\"\n            }\n        },\n        purple: {\n            50: {\n                title: \"Purple 50\",\n                hex: \"#f8f5ff\"\n            },\n            100: {\n                title: \"Purple 100\",\n                hex: \"#f1ebff\"\n            },\n            200: {\n                title: \"Purple 200\",\n                hex: \"#ece1fe\"\n            },\n            300: {\n                title: \"Purple 300\",\n                hex: \"#ccb1fc\"\n            },\n            400: {\n                title: \"Purple 400\",\n                hex: \"#b087f7\"\n            },\n            500: {\n                title: \"Purple 500\",\n                hex: \"#8f57ef\"\n            },\n            600: {\n                title: \"Purple 600\",\n                hex: \"#721fe5\"\n            },\n            700: {\n                title: \"Purple 700\",\n                hex: \"#4c1a9e\"\n            },\n            800: {\n                title: \"Purple 800\",\n                hex: \"#2f1862\"\n            },\n            900: {\n                title: \"Purple 900\",\n                hex: \"#23173f\"\n            },\n            950: {\n                title: \"Purple 950\",\n                hex: \"#181128\"\n            }\n        },\n        magenta: {\n            50: {\n                title: \"Magenta 50\",\n                hex: \"#fef6f9\"\n            },\n            100: {\n                title: \"Magenta 100\",\n                hex: \"#fde8ef\"\n            },\n            200: {\n                title: \"Magenta 200\",\n                hex: \"#fcdee9\"\n            },\n            300: {\n                title: \"Magenta 300\",\n                hex: \"#f7abc5\"\n            },\n            400: {\n                title: \"Magenta 400\",\n                hex: \"#f0709b\"\n            },\n            500: {\n                title: \"Magenta 500\",\n                hex: \"#e72767\"\n            },\n            600: {\n                title: \"Magenta 600\",\n                hex: \"#b11651\"\n            },\n            700: {\n                title: \"Magenta 700\",\n                hex: \"#7c1342\"\n            },\n            800: {\n                title: \"Magenta 800\",\n                hex: \"#4b1130\"\n            },\n            900: {\n                title: \"Magenta 900\",\n                hex: \"#341325\"\n            },\n            950: {\n                title: \"Magenta 950\",\n                hex: \"#1f0f14\"\n            }\n        },\n        red: {\n            50: {\n                title: \"Red 50\",\n                hex: \"#fff6f5\"\n            },\n            100: {\n                title: \"Red 100\",\n                hex: \"#ffe7e5\"\n            },\n            200: {\n                title: \"Red 200\",\n                hex: \"#ffdedc\"\n            },\n            300: {\n                title: \"Red 300\",\n                hex: \"#fdada5\"\n            },\n            400: {\n                title: \"Red 400\",\n                hex: \"#f77769\"\n            },\n            500: {\n                title: \"Red 500\",\n                hex: \"#ef4434\"\n            },\n            600: {\n                title: \"Red 600\",\n                hex: \"#cc2819\"\n            },\n            700: {\n                title: \"Red 700\",\n                hex: \"#8b2018\"\n            },\n            800: {\n                title: \"Red 800\",\n                hex: \"#4d1714\"\n            },\n            900: {\n                title: \"Red 900\",\n                hex: \"#321615\"\n            },\n            950: {\n                title: \"Red 950\",\n                hex: \"#1e1011\"\n            }\n        },\n        orange: {\n            50: {\n                title: \"Orange 50\",\n                hex: \"#fff7f0\"\n            },\n            100: {\n                title: \"Orange 100\",\n                hex: \"#ffeadb\"\n            },\n            200: {\n                title: \"Orange 200\",\n                hex: \"#ffddc7\"\n            },\n            300: {\n                title: \"Orange 300\",\n                hex: \"#ffb685\"\n            },\n            400: {\n                title: \"Orange 400\",\n                hex: \"#ff8e42\"\n            },\n            500: {\n                title: \"Orange 500\",\n                hex: \"#fa6400\"\n            },\n            600: {\n                title: \"Orange 600\",\n                hex: \"#b14802\"\n            },\n            700: {\n                title: \"Orange 700\",\n                hex: \"#7c3404\"\n            },\n            800: {\n                title: \"Orange 800\",\n                hex: \"#461e07\"\n            },\n            900: {\n                title: \"Orange 900\",\n                hex: \"#32160b\"\n            },\n            950: {\n                title: \"Orange 950\",\n                hex: \"#21120d\"\n            }\n        },\n        yellow: {\n            50: {\n                title: \"Yellow 50\",\n                hex: \"#fefae1\"\n            },\n            100: {\n                title: \"Yellow 100\",\n                hex: \"#fcf3bb\"\n            },\n            200: {\n                title: \"Yellow 200\",\n                hex: \"#f9e994\"\n            },\n            300: {\n                title: \"Yellow 300\",\n                hex: \"#f7d455\"\n            },\n            400: {\n                title: \"Yellow 400\",\n                hex: \"#f9bc15\"\n            },\n            500: {\n                title: \"Yellow 500\",\n                hex: \"#d28a04\"\n            },\n            600: {\n                title: \"Yellow 600\",\n                hex: \"#965908\"\n            },\n            700: {\n                title: \"Yellow 700\",\n                hex: \"#653a0b\"\n            },\n            800: {\n                title: \"Yellow 800\",\n                hex: \"#3b220c\"\n            },\n            900: {\n                title: \"Yellow 900\",\n                hex: \"#271a11\"\n            },\n            950: {\n                title: \"Yellow 950\",\n                hex: \"#181410\"\n            }\n        },\n        green: {\n            50: {\n                title: \"Green 50\",\n                hex: \"#e7fef5\"\n            },\n            100: {\n                title: \"Green 100\",\n                hex: \"#c5fce8\"\n            },\n            200: {\n                title: \"Green 200\",\n                hex: \"#a9f9dc\"\n            },\n            300: {\n                title: \"Green 300\",\n                hex: \"#59f3ba\"\n            },\n            400: {\n                title: \"Green 400\",\n                hex: \"#0ff0a1\"\n            },\n            500: {\n                title: \"Green 500\",\n                hex: \"#04b97a\"\n            },\n            600: {\n                title: \"Green 600\",\n                hex: \"#01794f\"\n            },\n            700: {\n                title: \"Green 700\",\n                hex: \"#015133\"\n            },\n            800: {\n                title: \"Green 800\",\n                hex: \"#023120\"\n            },\n            900: {\n                title: \"Green 900\",\n                hex: \"#06231a\"\n            },\n            950: {\n                title: \"Green 950\",\n                hex: \"#071715\"\n            }\n        },\n        cyan: {\n            50: {\n                title: \"Cyan 50\",\n                hex: \"#e7fefe\"\n            },\n            100: {\n                title: \"Cyan 100\",\n                hex: \"#c5fcfc\"\n            },\n            200: {\n                title: \"Cyan 200\",\n                hex: \"#96f8f8\"\n            },\n            300: {\n                title: \"Cyan 300\",\n                hex: \"#62efef\"\n            },\n            400: {\n                title: \"Cyan 400\",\n                hex: \"#18e2e2\"\n            },\n            500: {\n                title: \"Cyan 500\",\n                hex: \"#04b8be\"\n            },\n            600: {\n                title: \"Cyan 600\",\n                hex: \"#037782\"\n            },\n            700: {\n                title: \"Cyan 700\",\n                hex: \"#024950\"\n            },\n            800: {\n                title: \"Cyan 800\",\n                hex: \"#042f34\"\n            },\n            900: {\n                title: \"Cyan 900\",\n                hex: \"#072227\"\n            },\n            950: {\n                title: \"Cyan 950\",\n                hex: \"#0d181c\"\n            }\n        }\n    }\n}, D = {\n    _version: 2,\n    avatar: {\n        sizes: [\n            {\n                distance: -4,\n                size: 19\n            },\n            {\n                distance: -4,\n                size: 25\n            },\n            {\n                distance: -8,\n                size: 33\n            },\n            {\n                distance: -12,\n                size: 49\n            }\n        ],\n        focusRing: {\n            offset: 1,\n            width: 1\n        }\n    },\n    button: {\n        textWeight: \"medium\",\n        border: {\n            width: 1\n        },\n        focusRing: {\n            offset: -1,\n            width: 1\n        }\n    },\n    card: {\n        border: {\n            width: 1\n        },\n        focusRing: {\n            offset: -1,\n            width: 1\n        },\n        shadow: {\n            outline: .5\n        }\n    },\n    container: [\n        320,\n        640,\n        960,\n        1280,\n        1600,\n        1920\n    ],\n    media: [\n        360,\n        600,\n        900,\n        1200,\n        1800,\n        2400\n    ],\n    layer: {\n        dialog: {\n            zOffset: 600\n        },\n        popover: {\n            zOffset: 400\n        },\n        tooltip: {\n            zOffset: 200\n        }\n    },\n    radius: [\n        0,\n        1,\n        3,\n        6,\n        9,\n        12,\n        21\n    ],\n    shadow: [\n        null,\n        {\n            umbra: [\n                0,\n                0,\n                0,\n                0\n            ],\n            penumbra: [\n                0,\n                0,\n                0,\n                0\n            ],\n            ambient: [\n                0,\n                0,\n                0,\n                0\n            ]\n        },\n        {\n            umbra: [\n                0,\n                3,\n                5,\n                -2\n            ],\n            penumbra: [\n                0,\n                6,\n                10,\n                0\n            ],\n            ambient: [\n                0,\n                1,\n                18,\n                1\n            ]\n        },\n        {\n            umbra: [\n                0,\n                7,\n                8,\n                -4\n            ],\n            penumbra: [\n                0,\n                12,\n                17,\n                2\n            ],\n            ambient: [\n                0,\n                5,\n                22,\n                4\n            ]\n        },\n        {\n            umbra: [\n                0,\n                9,\n                11,\n                -5\n            ],\n            penumbra: [\n                0,\n                18,\n                28,\n                2\n            ],\n            ambient: [\n                0,\n                7,\n                34,\n                6\n            ]\n        },\n        {\n            umbra: [\n                0,\n                11,\n                15,\n                -7\n            ],\n            penumbra: [\n                0,\n                24,\n                38,\n                3\n            ],\n            ambient: [\n                0,\n                9,\n                46,\n                8\n            ]\n        }\n    ],\n    space: [\n        0,\n        4,\n        8,\n        12,\n        20,\n        32,\n        52,\n        84,\n        136,\n        220\n    ],\n    input: {\n        border: {\n            width: 1\n        },\n        checkbox: {\n            size: 17,\n            focusRing: {\n                offset: -1,\n                width: 1\n            }\n        },\n        radio: {\n            size: 17,\n            markSize: 9,\n            focusRing: {\n                offset: -1,\n                width: 1\n            }\n        },\n        switch: {\n            width: 25,\n            height: 17,\n            padding: 5,\n            transitionDurationMs: 150,\n            transitionTimingFunction: \"ease-out\",\n            focusRing: {\n                offset: 1,\n                width: 1\n            }\n        },\n        select: {\n            focusRing: {\n                offset: -1,\n                width: 1\n            }\n        },\n        text: {\n            focusRing: {\n                offset: -1,\n                width: 1\n            }\n        }\n    },\n    style: {\n        button: {\n            root: {\n                transition: \"background-color 100ms,border-color 100ms,color 100ms\"\n            }\n        }\n    }\n}, _ = {\n    code: {\n        family: \"ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace\",\n        weights: {\n            regular: 400,\n            medium: 500,\n            semibold: 600,\n            bold: 700\n        },\n        sizes: [\n            {\n                ascenderHeight: 4,\n                descenderHeight: 4,\n                fontSize: 10,\n                iconSize: 17,\n                lineHeight: 15,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 5,\n                descenderHeight: 5,\n                fontSize: 13,\n                iconSize: 21,\n                lineHeight: 19,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 6,\n                descenderHeight: 6,\n                fontSize: 16,\n                iconSize: 25,\n                lineHeight: 23,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 7,\n                descenderHeight: 7,\n                fontSize: 19,\n                iconSize: 29,\n                lineHeight: 27,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 8,\n                descenderHeight: 8,\n                fontSize: 22,\n                iconSize: 33,\n                lineHeight: 31,\n                letterSpacing: 0\n            }\n        ]\n    },\n    heading: {\n        family: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Liberation Sans\", Helvetica, Arial, system-ui, sans-serif',\n        weights: {\n            regular: 700,\n            medium: 800,\n            semibold: 900,\n            bold: 900\n        },\n        sizes: [\n            {\n                ascenderHeight: 5,\n                descenderHeight: 5,\n                fontSize: 13,\n                iconSize: 17,\n                lineHeight: 19,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 6,\n                descenderHeight: 6,\n                fontSize: 16,\n                iconSize: 25,\n                lineHeight: 23,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 7,\n                descenderHeight: 7,\n                fontSize: 21,\n                iconSize: 33,\n                lineHeight: 29,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 8,\n                descenderHeight: 8,\n                fontSize: 27,\n                iconSize: 41,\n                lineHeight: 35,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 9.5,\n                descenderHeight: 8.5,\n                fontSize: 33,\n                iconSize: 49,\n                lineHeight: 41,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 10.5,\n                descenderHeight: 9.5,\n                fontSize: 38,\n                iconSize: 53,\n                lineHeight: 47,\n                letterSpacing: 0\n            }\n        ]\n    },\n    label: {\n        family: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Liberation Sans\", system-ui, sans-serif',\n        weights: {\n            regular: 600,\n            medium: 700,\n            semibold: 800,\n            bold: 900\n        },\n        sizes: [\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 8.1,\n                iconSize: 13,\n                lineHeight: 10,\n                letterSpacing: .5\n            },\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 9.5,\n                iconSize: 15,\n                lineHeight: 11,\n                letterSpacing: .5\n            },\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 10.8,\n                iconSize: 17,\n                lineHeight: 12,\n                letterSpacing: .5\n            },\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 12.25,\n                iconSize: 19,\n                lineHeight: 13,\n                letterSpacing: .5\n            },\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 13.6,\n                iconSize: 21,\n                lineHeight: 14,\n                letterSpacing: .5\n            },\n            {\n                ascenderHeight: 2,\n                descenderHeight: 2,\n                fontSize: 15,\n                iconSize: 23,\n                lineHeight: 15,\n                letterSpacing: .5\n            }\n        ]\n    },\n    text: {\n        family: 'Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Liberation Sans\", Helvetica, Arial, system-ui, sans-serif',\n        weights: {\n            regular: 400,\n            medium: 500,\n            semibold: 600,\n            bold: 700\n        },\n        sizes: [\n            {\n                ascenderHeight: 4,\n                descenderHeight: 4,\n                fontSize: 10,\n                iconSize: 17,\n                lineHeight: 15,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 5,\n                descenderHeight: 5,\n                fontSize: 13,\n                iconSize: 21,\n                lineHeight: 19,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 6,\n                descenderHeight: 6,\n                fontSize: 15,\n                iconSize: 25,\n                lineHeight: 23,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 7,\n                descenderHeight: 7,\n                fontSize: 18,\n                iconSize: 29,\n                lineHeight: 27,\n                letterSpacing: 0\n            },\n            {\n                ascenderHeight: 8,\n                descenderHeight: 8,\n                fontSize: 21,\n                iconSize: 33,\n                lineHeight: 31,\n                letterSpacing: 0\n            }\n        ]\n    }\n}, $ = new WeakMap;\nfunction F(e1) {\n    var t, n, o;\n    const r = $.get(e1);\n    if (r) return r;\n    const i = H(e1, e1.card.enabled), a = {\n        _blend: e1._blend || (e1.dark ? \"screen\" : \"multiply\"),\n        _dark: e1.dark,\n        accent: i.accent,\n        avatar: i.avatar,\n        backdrop: e1.base.shadow.ambient,\n        badge: i.badge,\n        bg: e1.base.bg,\n        border: e1.base.border,\n        button: {\n            default: I(e1, e1.button.default),\n            ghost: I(e1, e1.button.ghost),\n            bleed: I(e1, e1.button.bleed)\n        },\n        code: i.code,\n        fg: e1.base.fg,\n        focusRing: e1.base.focusRing,\n        icon: i.muted.fg,\n        input: {\n            default: N(e1.input.default),\n            invalid: N(e1.input.invalid)\n        },\n        kbd: i.kbd,\n        link: i.link,\n        muted: {\n            ...i.muted,\n            bg: (null == (t = e1.selectable) ? void 0 : t.default.enabled.bg2) || e1.base.bg\n        },\n        selectable: I(e1, e1.selectable || e1.muted),\n        shadow: e1.base.shadow,\n        skeleton: {\n            from: (null == (n = e1.skeleton) ? void 0 : n.from) || e1.base.border,\n            to: (null == (o = e1.skeleton) ? void 0 : o.to) || e1.base.border\n        },\n        syntax: e1.syntax\n    };\n    return $.set(e1, a), a;\n}\nfunction I(e1, t) {\n    return {\n        default: {\n            enabled: H(e1, t.default.enabled),\n            hovered: H(e1, t.default.hovered),\n            pressed: H(e1, t.default.pressed),\n            selected: H(e1, t.default.selected),\n            disabled: H(e1, t.default.disabled)\n        },\n        primary: {\n            enabled: H(e1, t.primary.enabled),\n            hovered: H(e1, t.primary.hovered),\n            pressed: H(e1, t.primary.pressed),\n            selected: H(e1, t.primary.selected),\n            disabled: H(e1, t.primary.disabled)\n        },\n        positive: {\n            enabled: H(e1, t.positive.enabled),\n            hovered: H(e1, t.positive.hovered),\n            pressed: H(e1, t.positive.pressed),\n            selected: H(e1, t.positive.selected),\n            disabled: H(e1, t.positive.disabled)\n        },\n        caution: {\n            enabled: H(e1, t.caution.enabled),\n            hovered: H(e1, t.caution.hovered),\n            pressed: H(e1, t.caution.pressed),\n            selected: H(e1, t.caution.selected),\n            disabled: H(e1, t.caution.disabled)\n        },\n        critical: {\n            enabled: H(e1, t.critical.enabled),\n            hovered: H(e1, t.critical.hovered),\n            pressed: H(e1, t.critical.pressed),\n            selected: H(e1, t.critical.selected),\n            disabled: H(e1, t.critical.disabled)\n        }\n    };\n}\nfunction H(e1, t) {\n    var n, o;\n    return {\n        ...t,\n        avatar: {\n            gray: {\n                bg: e1.spot.gray,\n                fg: e1.base.bg\n            },\n            blue: {\n                bg: e1.spot.blue,\n                fg: e1.base.bg\n            },\n            purple: {\n                bg: e1.spot.purple,\n                fg: e1.base.bg\n            },\n            magenta: {\n                bg: e1.spot.magenta,\n                fg: e1.base.bg\n            },\n            red: {\n                bg: e1.spot.red,\n                fg: e1.base.bg\n            },\n            orange: {\n                bg: e1.spot.orange,\n                fg: e1.base.bg\n            },\n            yellow: {\n                bg: e1.spot.yellow,\n                fg: e1.base.bg\n            },\n            green: {\n                bg: e1.spot.green,\n                fg: e1.base.bg\n            },\n            cyan: {\n                bg: e1.spot.cyan,\n                fg: e1.base.bg\n            }\n        },\n        badge: {\n            default: {\n                bg: e1.muted.default.enabled.bg,\n                fg: e1.muted.default.enabled.fg,\n                dot: e1.muted.default.enabled.muted.fg,\n                icon: e1.muted.default.enabled.muted.fg\n            },\n            primary: {\n                bg: e1.muted.primary.enabled.bg,\n                fg: e1.muted.primary.enabled.fg,\n                dot: e1.muted.primary.enabled.muted.fg,\n                icon: e1.muted.primary.enabled.muted.fg\n            },\n            positive: {\n                bg: e1.muted.positive.enabled.bg,\n                fg: e1.muted.positive.enabled.fg,\n                dot: e1.muted.positive.enabled.muted.fg,\n                icon: e1.muted.positive.enabled.muted.fg\n            },\n            caution: {\n                bg: e1.muted.caution.enabled.bg,\n                fg: e1.muted.caution.enabled.fg,\n                dot: e1.muted.caution.enabled.muted.fg,\n                icon: e1.muted.caution.enabled.muted.fg\n            },\n            critical: {\n                bg: e1.muted.critical.enabled.bg,\n                fg: e1.muted.critical.enabled.fg,\n                dot: e1.muted.critical.enabled.muted.fg,\n                icon: e1.muted.critical.enabled.muted.fg\n            }\n        },\n        kbd: {\n            bg: e1.muted.default.enabled.bg,\n            fg: e1.muted.default.enabled.fg,\n            border: e1.muted.default.enabled.border\n        },\n        muted: {\n            ...e1.muted.default.enabled.muted,\n            bg: t.bg2 || t.bg\n        },\n        skeleton: {\n            from: (null == (n = t.skeleton) ? void 0 : n.from) || t.border,\n            to: (null == (o = t.skeleton) ? void 0 : o.to) || t.border\n        }\n    };\n}\nfunction N(e1) {\n    return {\n        enabled: W(e1.enabled),\n        disabled: W(e1.disabled),\n        readOnly: W(e1.readOnly),\n        hovered: W(e1.hovered)\n    };\n}\nfunction W(e1) {\n    return {\n        bg: e1.bg,\n        border: e1.border,\n        fg: e1.fg,\n        muted: {\n            bg: e1.bg2\n        },\n        placeholder: e1.placeholder\n    };\n}\nconst U = new WeakMap;\nfunction Y(e1) {\n    var t, n;\n    if (null == (t = e1.sanity.v2) ? void 0 : t._resolved) return e1.sanity.v2;\n    const o = U.get(e1);\n    if (o) return o;\n    const r = {\n        _version: 2,\n        _resolved: !0,\n        avatar: {\n            ...D.avatar,\n            ...e1.sanity.avatar\n        },\n        button: {\n            ...D.button,\n            ...e1.sanity.button\n        },\n        card: D.card,\n        color: F(e1.sanity.color),\n        container: e1.sanity.container,\n        font: e1.sanity.fonts,\n        input: {\n            ...D.input,\n            ...e1.sanity.input,\n            checkbox: {\n                ...D.input.checkbox,\n                ...e1.sanity.input.checkbox\n            },\n            radio: {\n                ...D.input.radio,\n                ...e1.sanity.input.radio\n            },\n            switch: {\n                ...D.input.switch,\n                ...e1.sanity.input.switch\n            }\n        },\n        layer: null != (n = e1.sanity.layer) ? n : D.layer,\n        media: e1.sanity.media,\n        radius: e1.sanity.radius,\n        shadow: e1.sanity.shadows,\n        space: e1.sanity.space,\n        style: e1.sanity.styles\n    };\n    return U.set(e1, r), r;\n}\nfunction G(e1) {\n    return 2 === e1._version;\n}\nconst X = new WeakMap;\nconst q = new WeakMap;\nfunction K(e1) {\n    const t = q.get(e1);\n    if (t) return t;\n    const { avatar: n, button: o, color: r, container: i, font: a, input: s, media: l, radius: c, shadow: u, space: d, style: h } = e1;\n    return {\n        _version: 0,\n        avatar: n,\n        button: o,\n        container: i,\n        color: {\n            light: {\n                transparent: Z(r.light.transparent),\n                default: Z(r.light.default),\n                primary: Z(r.light.primary),\n                positive: Z(r.light.positive),\n                caution: Z(r.light.caution),\n                critical: Z(r.light.critical)\n            },\n            dark: {\n                transparent: Z(r.dark.transparent),\n                default: Z(r.dark.default),\n                primary: Z(r.dark.primary),\n                positive: Z(r.dark.positive),\n                caution: Z(r.dark.caution),\n                critical: Z(r.dark.critical)\n            }\n        },\n        focusRing: s.text.focusRing,\n        fonts: a,\n        input: s,\n        media: l,\n        radius: c,\n        shadows: u,\n        space: d,\n        styles: h,\n        v2: e1\n    };\n}\nfunction Z(e1) {\n    return {\n        base: {\n            bg: e1.bg,\n            fg: e1.fg,\n            border: e1.border,\n            focusRing: e1.focusRing,\n            shadow: e1.shadow\n        },\n        button: e1.button,\n        card: e1.selectable.default,\n        dark: e1._dark,\n        input: {\n            default: J(e1.input.default),\n            invalid: J(e1.input.invalid)\n        },\n        muted: {\n            ...e1.button.ghost,\n            transparent: e1.button.ghost.default\n        },\n        solid: {\n            ...e1.button.default,\n            transparent: e1.button.default.default\n        },\n        selectable: e1.selectable,\n        spot: {\n            gray: e1.avatar.gray.bg,\n            blue: e1.avatar.blue.bg,\n            purple: e1.avatar.purple.bg,\n            magenta: e1.avatar.magenta.bg,\n            red: e1.avatar.red.bg,\n            orange: e1.avatar.orange.bg,\n            yellow: e1.avatar.yellow.bg,\n            green: e1.avatar.green.bg,\n            cyan: e1.avatar.cyan.bg\n        },\n        syntax: e1.syntax\n    };\n}\nfunction J(e1) {\n    return {\n        enabled: Q(e1.enabled),\n        disabled: Q(e1.disabled),\n        readOnly: Q(e1.readOnly),\n        hovered: Q(e1.hovered)\n    };\n}\nfunction Q(e1) {\n    return {\n        bg: e1.bg,\n        bg2: e1.muted.bg,\n        border: e1.border,\n        fg: e1.fg,\n        placeholder: e1.placeholder\n    };\n}\nconst ee = [\n    \"multiply\",\n    \"screen\"\n], te = [\n    \"transparent\",\n    \"default\",\n    \"primary\",\n    \"positive\",\n    \"caution\",\n    \"critical\"\n], ne = [\n    \"default\",\n    \"primary\",\n    \"positive\",\n    \"caution\",\n    \"critical\"\n], oe = [\n    \"enabled\",\n    \"hovered\",\n    \"pressed\",\n    \"selected\",\n    \"disabled\"\n], re = [\n    \"default\",\n    \"ghost\",\n    \"bleed\"\n], ie = [\n    \"default\",\n    \"invalid\"\n], ae = [\n    \"enabled\",\n    \"hovered\",\n    \"readOnly\",\n    \"disabled\"\n];\nfunction se(e1) {\n    return L.includes(e1);\n}\nfunction le(e1) {\n    return /^\\d+%$/.test(e1);\n}\nfunction ce(e1) {\n    const t = e1.split(\"/\");\n    let n = t.shift() || \"\";\n    const [o, r] = n.split(\" \");\n    if (se(o)) {\n        const e1 = o, n = t.shift() || \"\";\n        if (le(r)) {\n            return {\n                type: \"color\",\n                tint: e1,\n                mix: Number(r.slice(0, -1)) / 100\n            };\n        }\n        if (ue(n)) {\n            return {\n                type: \"color\",\n                tint: e1,\n                opacity: Number(n)\n            };\n        }\n        return {\n            type: \"color\",\n            tint: e1\n        };\n    }\n    if (function(e1) {\n        return \"black\" === e1 || \"white\" === e1;\n    }(o)) {\n        const e1 = o, n = t.shift() || \"\";\n        if (le(r)) {\n            return {\n                type: \"color\",\n                key: e1,\n                mix: Number(r.slice(0, -1)) / 100\n            };\n        }\n        if (ue(n)) {\n            return {\n                type: \"color\",\n                key: e1,\n                opacity: Number(n)\n            };\n        }\n        return {\n            type: \"color\",\n            key: e1\n        };\n    }\n    if (function(e1) {\n        return z.includes(e1);\n    }(o)) {\n        const e1 = o;\n        n = t.shift() || \"\";\n        const [r, i] = n.split(\" \");\n        if (se(r)) {\n            const n = r, o = t.shift() || \"\";\n            if (le(i)) {\n                return {\n                    type: \"color\",\n                    hue: e1,\n                    tint: n,\n                    mix: Number(i.slice(0, -1)) / 100\n                };\n            }\n            if (ue(o)) {\n                return {\n                    type: \"color\",\n                    hue: e1,\n                    tint: n,\n                    opacity: Number(o)\n                };\n            }\n            return {\n                type: \"color\",\n                hue: e1,\n                tint: n\n            };\n        }\n        return {\n            type: \"hue\",\n            value: e1\n        };\n    }\n    if (function(e1) {\n        return ee.includes(e1);\n    }(o)) {\n        return {\n            type: \"blendMode\",\n            value: o\n        };\n    }\n}\nfunction ue(e1) {\n    return \"0\" === e1 || /^0\\.[0-9]+$/.test(e1) || \"1\" === e1;\n}\nconst de = [\n    \"500\",\n    \"500\"\n];\nfunction he(e1) {\n    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : de;\n    const { hue: n, scheme: o } = e1, r = ce(t[\"light\" === o ? 0 : 1]);\n    if (!r || \"color\" !== r.type) throw new Error(\"Invalid color token: \".concat(t[0]));\n    return function(e1) {\n        let t = \"\";\n        return t = \"black\" === e1.key || \"white\" === e1.key ? e1.key : \"\".concat(e1.hue, \"/\").concat(e1.tint), void 0 !== e1.mix ? \"\".concat(t, \" \").concat(100 * e1.mix, \"%\") : (void 0 !== e1.opacity && (t += \"/\".concat(e1.opacity)), t);\n    }({\n        ...r,\n        hue: r.hue || n\n    });\n}\nconst fe = {\n    base: {\n        \"*\": {\n            _blend: [\n                \"multiply\",\n                \"screen\"\n            ],\n            accent: {\n                fg: [\n                    \"purple/600\",\n                    \"purple/400\"\n                ]\n            },\n            avatar: {\n                \"*\": {\n                    _blend: [\n                        \"screen\",\n                        \"multiply\"\n                    ],\n                    bg: [\n                        \"500\",\n                        \"400\"\n                    ],\n                    fg: [\n                        \"white\",\n                        \"black\"\n                    ]\n                }\n            },\n            backdrop: [\n                \"gray/200/0.5\",\n                \"black/0.5\"\n            ],\n            badge: {\n                \"*\": {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"600\",\n                        \"400\"\n                    ],\n                    icon: [\n                        \"500\",\n                        \"500\"\n                    ],\n                    dot: [\n                        \"500\",\n                        \"500\"\n                    ]\n                },\n                positive: {\n                    bg: [\n                        \"200 50%\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"600\",\n                        \"500\"\n                    ]\n                },\n                caution: {\n                    bg: [\n                        \"200 50%\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"600\",\n                        \"500\"\n                    ]\n                }\n            },\n            bg: [\n                \"50\",\n                \"950\"\n            ],\n            border: [\n                \"200\",\n                \"800\"\n            ],\n            code: {\n                bg: [\n                    \"50\",\n                    \"950\"\n                ],\n                fg: [\n                    \"600\",\n                    \"400\"\n                ]\n            },\n            fg: [\n                \"800\",\n                \"200\"\n            ],\n            focusRing: [\n                \"blue/500\",\n                \"blue/500\"\n            ],\n            icon: [\n                \"600\",\n                \"400\"\n            ],\n            kbd: {\n                bg: [\n                    \"white\",\n                    \"black\"\n                ],\n                fg: [\n                    \"600\",\n                    \"400\"\n                ],\n                border: [\n                    \"200\",\n                    \"800\"\n                ]\n            },\n            link: {\n                fg: [\n                    \"blue/600\",\n                    \"blue/300\"\n                ]\n            },\n            muted: {\n                bg: [\n                    \"50\",\n                    \"950\"\n                ],\n                fg: [\n                    \"700 75%\",\n                    \"300 75%\"\n                ]\n            },\n            shadow: {\n                outline: [\n                    \"500/0.3\",\n                    \"500/0.4\"\n                ],\n                umbra: [\n                    \"gray/500/0.1\",\n                    \"black/0.2\"\n                ],\n                penumbra: [\n                    \"gray/500/0.07\",\n                    \"black/0.14\"\n                ],\n                ambient: [\n                    \"gray/500/0.06\",\n                    \"black/0.12\"\n                ]\n            },\n            skeleton: {\n                from: [\n                    \"100\",\n                    \"900\"\n                ],\n                to: [\n                    \"100 50%\",\n                    \"900 50%\"\n                ]\n            }\n        },\n        transparent: {\n            bg: [\n                \"50\",\n                \"black\"\n            ]\n        },\n        default: {\n            bg: [\n                \"white\",\n                \"950\"\n            ],\n            fg: [\n                \"800\",\n                \"200\"\n            ],\n            muted: {\n                fg: [\n                    \"600\",\n                    \"400\"\n                ]\n            }\n        },\n        primary: {\n            _hue: \"blue\"\n        },\n        positive: {\n            _hue: \"green\",\n            shadow: {\n                outline: [\n                    \"500/0.4\",\n                    \"500/0.4\"\n                ]\n            }\n        },\n        caution: {\n            _hue: \"yellow\",\n            shadow: {\n                outline: [\n                    \"600/0.3\",\n                    \"500/0.4\"\n                ]\n            }\n        },\n        critical: {\n            _hue: \"red\"\n        }\n    },\n    button: {\n        default: {\n            \"*\": {\n                \"*\": {\n                    _blend: [\n                        \"screen\",\n                        \"multiply\"\n                    ],\n                    accent: {\n                        fg: [\n                            \"purple/300\",\n                            \"purple/700\"\n                        ]\n                    },\n                    avatar: {\n                        \"*\": {\n                            _blend: [\n                                \"multiply\",\n                                \"screen\"\n                            ],\n                            bg: [\n                                \"white\",\n                                \"black\"\n                            ],\n                            fg: [\n                                \"black\",\n                                \"white\"\n                            ]\n                        }\n                    },\n                    badge: {\n                        \"*\": {\n                            bg: [\n                                \"900\",\n                                \"100\"\n                            ],\n                            fg: [\n                                \"400\",\n                                \"600\"\n                            ],\n                            dot: [\n                                \"500\",\n                                \"500\"\n                            ],\n                            icon: [\n                                \"500\",\n                                \"500\"\n                            ]\n                        }\n                    },\n                    bg: [\n                        \"500\",\n                        \"400\"\n                    ],\n                    border: [\n                        \"500/0\",\n                        \"400/0\"\n                    ],\n                    code: {\n                        bg: [\n                            \"500 20%\",\n                            \"400 20%\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"600\"\n                        ]\n                    },\n                    fg: [\n                        \"white\",\n                        \"black\"\n                    ],\n                    icon: [\n                        \"100 70%\",\n                        \"900 70%\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"black\",\n                            \"white\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"600\"\n                        ],\n                        border: [\n                            \"800\",\n                            \"200\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"blue/200\",\n                            \"blue/600\"\n                        ]\n                    },\n                    muted: {\n                        bg: [\n                            \"950\",\n                            \"50\"\n                        ],\n                        fg: [\n                            \"100 70%\",\n                            \"900 70%\"\n                        ]\n                    },\n                    skeleton: {\n                        from: [\n                            \"900\",\n                            \"100\"\n                        ],\n                        to: [\n                            \"900 50%\",\n                            \"100 50%\"\n                        ]\n                    }\n                },\n                hovered: {\n                    bg: [\n                        \"700\",\n                        \"300\"\n                    ],\n                    border: [\n                        \"700/0\",\n                        \"300/0\"\n                    ]\n                },\n                pressed: {\n                    bg: [\n                        \"700\",\n                        \"300\"\n                    ]\n                },\n                selected: {\n                    bg: [\n                        \"700\",\n                        \"300\"\n                    ]\n                },\n                disabled: {\n                    _hue: \"gray\",\n                    accent: {\n                        fg: [\n                            \"100 70%\",\n                            \"900 70%\"\n                        ]\n                    },\n                    badge: {\n                        \"*\": {\n                            bg: [\n                                \"gray/700\",\n                                \"gray/300\"\n                            ],\n                            fg: [\n                                \"white\",\n                                \"black\"\n                            ],\n                            dot: [\n                                \"white\",\n                                \"black\"\n                            ],\n                            icon: [\n                                \"white\",\n                                \"black\"\n                            ]\n                        }\n                    },\n                    bg: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"black\",\n                            \"white\"\n                        ],\n                        fg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        border: [\n                            \"700\",\n                            \"300\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"100 70%\",\n                            \"900 70%\"\n                        ]\n                    }\n                }\n            },\n            default: {\n                \"*\": {\n                    bg: [\n                        \"800\",\n                        \"200\"\n                    ],\n                    muted: {\n                        bg: [\n                            \"950\",\n                            \"50\"\n                        ],\n                        fg: [\n                            \"400\",\n                            \"600\"\n                        ]\n                    }\n                },\n                hovered: {\n                    bg: [\n                        \"900\",\n                        \"100\"\n                    ]\n                },\n                pressed: {\n                    bg: [\n                        \"black\",\n                        \"white\"\n                    ]\n                },\n                selected: {\n                    bg: [\n                        \"black\",\n                        \"white\"\n                    ]\n                }\n            }\n        },\n        ghost: {\n            \"*\": {\n                \"*\": {\n                    _blend: [\n                        \"multiply\",\n                        \"screen\"\n                    ],\n                    accent: {\n                        fg: [\n                            \"purple/700 60%\",\n                            \"purple/300 70%\"\n                        ]\n                    },\n                    badge: {\n                        \"*\": {\n                            bg: [\n                                \"100\",\n                                \"900\"\n                            ],\n                            fg: [\n                                \"600\",\n                                \"400\"\n                            ],\n                            dot: [\n                                \"500\",\n                                \"500\"\n                            ],\n                            icon: [\n                                \"500\",\n                                \"500\"\n                            ]\n                        }\n                    },\n                    bg: [\n                        \"50\",\n                        \"950\"\n                    ],\n                    border: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    code: {\n                        bg: [\n                            \"500 10%\",\n                            \"400 10%\"\n                        ],\n                        fg: [\n                            \"700 60%\",\n                            \"400 60%\"\n                        ]\n                    },\n                    fg: [\n                        \"600\",\n                        \"400\"\n                    ],\n                    icon: [\n                        \"700 60%\",\n                        \"300 60%\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        fg: [\n                            \"600\",\n                            \"400\"\n                        ],\n                        border: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"blue/700 60%\",\n                            \"blue/300 60%\"\n                        ]\n                    },\n                    muted: {\n                        bg: [\n                            \"100\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"700 60%\",\n                            \"300 60%\"\n                        ]\n                    },\n                    skeleton: {\n                        from: [\n                            \"100\",\n                            \"900\"\n                        ],\n                        to: [\n                            \"100 50%\",\n                            \"900 50%\"\n                        ]\n                    }\n                },\n                hovered: {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"700\",\n                        \"300\"\n                    ]\n                },\n                pressed: {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"800\",\n                        \"200\"\n                    ]\n                },\n                selected: {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"800\",\n                        \"200\"\n                    ]\n                },\n                disabled: {\n                    _hue: \"gray\",\n                    accent: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    badge: {\n                        \"*\": {\n                            _hue: \"gray\",\n                            bg: [\n                                \"50\",\n                                \"950\"\n                            ],\n                            fg: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ],\n                            dot: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ],\n                            icon: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ]\n                        }\n                    },\n                    border: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    code: {\n                        bg: [\n                            \"50\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    icon: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ],\n                        border: [\n                            \"100\",\n                            \"900\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    muted: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    }\n                }\n            },\n            positive: {\n                \"*\": {\n                    border: [\n                        \"600 20%\",\n                        \"800\"\n                    ]\n                }\n            },\n            caution: {\n                \"*\": {\n                    border: [\n                        \"600 20%\",\n                        \"800\"\n                    ]\n                }\n            }\n        },\n        bleed: {\n            \"*\": {\n                \"*\": {\n                    _blend: [\n                        \"multiply\",\n                        \"screen\"\n                    ],\n                    accent: {\n                        fg: [\n                            \"purple/700 70%\",\n                            \"purple/300 70%\"\n                        ]\n                    },\n                    badge: {\n                        \"*\": {\n                            bg: [\n                                \"100\",\n                                \"900\"\n                            ],\n                            fg: [\n                                \"600\",\n                                \"400\"\n                            ],\n                            dot: [\n                                \"500\",\n                                \"500\"\n                            ],\n                            icon: [\n                                \"500\",\n                                \"500\"\n                            ]\n                        }\n                    },\n                    bg: [\n                        \"white\",\n                        \"black\"\n                    ],\n                    border: [\n                        \"white/0\",\n                        \"black/0\"\n                    ],\n                    code: {\n                        bg: [\n                            \"50\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"700 75%\",\n                            \"300 75%\"\n                        ]\n                    },\n                    fg: [\n                        \"700\",\n                        \"300\"\n                    ],\n                    icon: [\n                        \"700 75%\",\n                        \"300 75%\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        fg: [\n                            \"700\",\n                            \"300\"\n                        ],\n                        border: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"blue/700 70%\",\n                            \"blue/300 70%\"\n                        ]\n                    },\n                    muted: {\n                        bg: [\n                            \"100\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"700 75%\",\n                            \"300 75%\"\n                        ]\n                    },\n                    skeleton: {\n                        from: [\n                            \"100\",\n                            \"900\"\n                        ],\n                        to: [\n                            \"100 50%\",\n                            \"900 50%\"\n                        ]\n                    }\n                },\n                hovered: {\n                    bg: [\n                        \"50\",\n                        \"950\"\n                    ],\n                    icon: [\n                        \"700 70%\",\n                        \"400 70%\"\n                    ]\n                },\n                pressed: {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"800\",\n                        \"200\"\n                    ],\n                    icon: [\n                        \"800 70%\",\n                        \"200 70%\"\n                    ]\n                },\n                selected: {\n                    bg: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    fg: [\n                        \"800\",\n                        \"200\"\n                    ],\n                    icon: [\n                        \"800 60%\",\n                        \"200 60%\"\n                    ]\n                },\n                disabled: {\n                    _hue: \"gray\",\n                    accent: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    badge: {\n                        \"*\": {\n                            _hue: \"gray\",\n                            bg: [\n                                \"50\",\n                                \"950\"\n                            ],\n                            fg: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ],\n                            dot: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ],\n                            icon: [\n                                \"gray/200\",\n                                \"gray/800\"\n                            ]\n                        }\n                    },\n                    code: {\n                        bg: [\n                            \"50\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    icon: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    kbd: {\n                        bg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ],\n                        border: [\n                            \"100\",\n                            \"900\"\n                        ]\n                    },\n                    link: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    },\n                    muted: {\n                        fg: [\n                            \"200\",\n                            \"800\"\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    input: {\n        \"*\": {\n            \"*\": {\n                _blend: [\n                    \"multiply\",\n                    \"screen\"\n                ],\n                bg: [\n                    \"white\",\n                    \"black\"\n                ],\n                border: [\n                    \"200\",\n                    \"800\"\n                ],\n                fg: [\n                    \"black\",\n                    \"200\"\n                ],\n                muted: {\n                    bg: [\n                        \"50\",\n                        \"950\"\n                    ]\n                },\n                placeholder: [\n                    \"400\",\n                    \"600 50%\"\n                ]\n            },\n            hovered: {\n                border: [\n                    \"300\",\n                    \"700\"\n                ]\n            },\n            readOnly: {\n                bg: [\n                    \"50\",\n                    \"950\"\n                ],\n                border: [\n                    \"200\",\n                    \"800\"\n                ],\n                fg: [\n                    \"800\",\n                    \"200\"\n                ]\n            },\n            disabled: {\n                fg: [\n                    \"200\",\n                    \"800\"\n                ],\n                border: [\n                    \"100\",\n                    \"900\"\n                ]\n            }\n        },\n        invalid: {\n            \"*\": {\n                _hue: \"red\",\n                bg: [\n                    \"100\",\n                    \"950\"\n                ]\n            }\n        }\n    },\n    selectable: {\n        \"*\": {\n            \"*\": {\n                _blend: [\n                    \"multiply\",\n                    \"screen\"\n                ],\n                accent: {\n                    fg: [\n                        \"purple/700 70%\",\n                        \"purple/300 70%\"\n                    ]\n                },\n                badge: {\n                    \"*\": {\n                        bg: [\n                            \"100\",\n                            \"900\"\n                        ],\n                        fg: [\n                            \"600\",\n                            \"400\"\n                        ],\n                        dot: [\n                            \"500\",\n                            \"500\"\n                        ],\n                        icon: [\n                            \"500\",\n                            \"500\"\n                        ]\n                    }\n                },\n                bg: [\n                    \"white\",\n                    \"black\"\n                ],\n                border: [\n                    \"200\",\n                    \"800\"\n                ],\n                code: {\n                    bg: [\n                        \"50\",\n                        \"950\"\n                    ],\n                    fg: [\n                        \"600\",\n                        \"400\"\n                    ]\n                },\n                fg: [\n                    \"700\",\n                    \"300\"\n                ],\n                icon: [\n                    \"700 75%\",\n                    \"300 75%\"\n                ],\n                kbd: {\n                    bg: [\n                        \"white\",\n                        \"black\"\n                    ],\n                    fg: [\n                        \"600\",\n                        \"400\"\n                    ],\n                    border: [\n                        \"200\",\n                        \"800\"\n                    ]\n                },\n                link: {\n                    fg: [\n                        \"blue/700 70%\",\n                        \"blue/300 70%\"\n                    ]\n                },\n                muted: {\n                    bg: [\n                        \"100\",\n                        \"950\"\n                    ],\n                    fg: [\n                        \"700 75%\",\n                        \"300 75%\"\n                    ]\n                },\n                skeleton: {\n                    from: [\n                        \"100\",\n                        \"900\"\n                    ],\n                    to: [\n                        \"100 50%\",\n                        \"900 50%\"\n                    ]\n                }\n            },\n            hovered: {\n                bg: [\n                    \"50\",\n                    \"950\"\n                ]\n            },\n            pressed: {\n                bg: [\n                    \"100\",\n                    \"900\"\n                ]\n            },\n            selected: {\n                _blend: [\n                    \"screen\",\n                    \"multiply\"\n                ],\n                accent: {\n                    fg: [\n                        \"purple/300\",\n                        \"purple/700\"\n                    ]\n                },\n                avatar: {\n                    \"*\": {\n                        _blend: [\n                            \"multiply\",\n                            \"screen\"\n                        ],\n                        bg: [\n                            \"white\",\n                            \"black\"\n                        ],\n                        fg: [\n                            \"black\",\n                            \"white\"\n                        ]\n                    }\n                },\n                badge: {\n                    \"*\": {\n                        bg: [\n                            \"900\",\n                            \"100\"\n                        ],\n                        fg: [\n                            \"400\",\n                            \"600\"\n                        ],\n                        dot: [\n                            \"500\",\n                            \"500\"\n                        ],\n                        icon: [\n                            \"500\",\n                            \"500\"\n                        ]\n                    }\n                },\n                bg: [\n                    \"500\",\n                    \"400\"\n                ],\n                border: [\n                    \"500 20%\",\n                    \"400 20%\"\n                ],\n                code: {\n                    bg: [\n                        \"500 20%\",\n                        \"400 20%\"\n                    ],\n                    fg: [\n                        \"200\",\n                        \"600\"\n                    ]\n                },\n                fg: [\n                    \"white\",\n                    \"black\"\n                ],\n                icon: [\n                    \"100 70%\",\n                    \"900 70%\"\n                ],\n                kbd: {\n                    bg: [\n                        \"black\",\n                        \"white\"\n                    ],\n                    fg: [\n                        \"200\",\n                        \"600\"\n                    ],\n                    border: [\n                        \"800\",\n                        \"200\"\n                    ]\n                },\n                link: {\n                    fg: [\n                        \"blue/200\",\n                        \"blue/600\"\n                    ]\n                },\n                muted: {\n                    bg: [\n                        \"950\",\n                        \"50\"\n                    ],\n                    fg: [\n                        \"100 70%\",\n                        \"900 70%\"\n                    ]\n                },\n                skeleton: {\n                    from: [\n                        \"900\",\n                        \"100\"\n                    ],\n                    to: [\n                        \"900 50%\",\n                        \"100 50%\"\n                    ]\n                }\n            },\n            disabled: {\n                _hue: \"gray\",\n                accent: {\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ]\n                },\n                badge: {\n                    \"*\": {\n                        _hue: \"gray\",\n                        bg: [\n                            \"50\",\n                            \"950\"\n                        ],\n                        fg: [\n                            \"gray/200\",\n                            \"gray/800\"\n                        ],\n                        dot: [\n                            \"gray/200\",\n                            \"gray/800\"\n                        ],\n                        icon: [\n                            \"gray/200\",\n                            \"gray/800\"\n                        ]\n                    }\n                },\n                border: [\n                    \"100\",\n                    \"900\"\n                ],\n                code: {\n                    bg: [\n                        \"50\",\n                        \"950\"\n                    ],\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ]\n                },\n                fg: [\n                    \"200\",\n                    \"800\"\n                ],\n                icon: [\n                    \"200\",\n                    \"800\"\n                ],\n                kbd: {\n                    bg: [\n                        \"white\",\n                        \"black\"\n                    ],\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ],\n                    border: [\n                        \"100\",\n                        \"900\"\n                    ]\n                },\n                link: {\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ]\n                },\n                muted: {\n                    fg: [\n                        \"200\",\n                        \"800\"\n                    ]\n                }\n            }\n        },\n        default: {\n            selected: {\n                _hue: \"blue\"\n            }\n        },\n        critical: {\n            disabled: {\n                bg: [\n                    \"50 50%\",\n                    \"950 50%\"\n                ]\n            }\n        }\n    },\n    syntax: {\n        atrule: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        attrName: [\n            \"green/600\",\n            \"green/400\"\n        ],\n        attrValue: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        attribute: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        boolean: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        builtin: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        cdata: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        char: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        class: [\n            \"orange/600\",\n            \"orange/400\"\n        ],\n        className: [\n            \"cyan/600\",\n            \"cyan/400\"\n        ],\n        comment: [\n            \"gray/400\",\n            \"gray/600\"\n        ],\n        constant: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        deleted: [\n            \"red/600\",\n            \"red/400\"\n        ],\n        entity: [\n            \"red/600\",\n            \"red/400\"\n        ],\n        function: [\n            \"green/600\",\n            \"green/400\"\n        ],\n        hexcode: [\n            \"blue/600\",\n            \"blue/400\"\n        ],\n        id: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        important: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        inserted: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        keyword: [\n            \"magenta/600\",\n            \"magenta/400\"\n        ],\n        number: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        operator: [\n            \"magenta/600\",\n            \"magenta/400\"\n        ],\n        property: [\n            \"blue/600\",\n            \"blue/400\"\n        ],\n        pseudoClass: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        pseudoElement: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        punctuation: [\n            \"gray/600\",\n            \"gray/400\"\n        ],\n        regex: [\n            \"blue/600\",\n            \"blue/400\"\n        ],\n        selector: [\n            \"red/600\",\n            \"red/400\"\n        ],\n        string: [\n            \"yellow/600\",\n            \"yellow/400\"\n        ],\n        symbol: [\n            \"purple/600\",\n            \"purple/400\"\n        ],\n        tag: [\n            \"red/600\",\n            \"red/400\"\n        ],\n        unit: [\n            \"orange/600\",\n            \"orange/400\"\n        ],\n        url: [\n            \"red/600\",\n            \"red/400\"\n        ],\n        variable: [\n            \"red/600\",\n            \"red/400\"\n        ]\n    }\n};\nfunction pe(e1) {\n    return Boolean(e1 && \"object\" == typeof e1 && !Array.isArray(e1));\n}\nfunction ge() {\n    for(var e1 = arguments.length, t = new Array(e1), n = 0; n < e1; n++)t[n] = arguments[n];\n    const o = t.filter(Boolean);\n    return 0 === o.length ? {} : o.reduce(me, {});\n}\nfunction me(e1, t) {\n    for (const n of Object.keys(t)){\n        const o = e1[n], r = t[n];\n        pe(o) && pe(r) ? e1[n] = ge(o, r) : e1[n] = r;\n    }\n    return e1;\n}\nfunction ve(e1) {\n    const t = ge(fe, e1);\n    return {\n        base: be(t),\n        button: we(t),\n        input: Pe(t),\n        selectable: Ae(t),\n        syntax: t.syntax\n    };\n}\nfunction be(e1) {\n    const t = {};\n    for (const n of te)t[n] = ye(e1, n);\n    return t;\n}\nfunction ye(e1, t) {\n    var n, o, r, i, a, s, l, c, u, d, h, f, p, g, m, v, b, y, w, x, k, S, P, E, T, A, R, C, M, O, B, j, z, L, V, D, _, $, F, I, H, N;\n    const W = ge(null == (n = null == e1 ? void 0 : e1.base) ? void 0 : n[\"*\"], null == (o = null == e1 ? void 0 : e1.base) ? void 0 : o[t]), U = W._hue || (null == (i = null == (r = null == e1 ? void 0 : e1.base) ? void 0 : r[t]) ? void 0 : i._hue) || \"gray\";\n    return {\n        ...W,\n        _hue: U,\n        avatar: {\n            gray: ge({\n                _hue: \"gray\"\n            }, null == (a = W.avatar) ? void 0 : a[\"*\"], null == (s = W.avatar) ? void 0 : s.gray),\n            blue: ge({\n                _hue: \"blue\"\n            }, null == (l = W.avatar) ? void 0 : l[\"*\"], null == (c = W.avatar) ? void 0 : c.blue),\n            purple: ge({\n                _hue: \"purple\"\n            }, null == (u = W.avatar) ? void 0 : u[\"*\"], null == (d = W.avatar) ? void 0 : d.purple),\n            magenta: ge({\n                _hue: \"magenta\"\n            }, null == (h = W.avatar) ? void 0 : h[\"*\"], null == (f = W.avatar) ? void 0 : f.magenta),\n            red: ge({\n                _hue: \"red\"\n            }, null == (p = W.avatar) ? void 0 : p[\"*\"], null == (g = W.avatar) ? void 0 : g.red),\n            orange: ge({\n                _hue: \"orange\"\n            }, null == (m = W.avatar) ? void 0 : m[\"*\"], null == (v = W.avatar) ? void 0 : v.orange),\n            yellow: ge({\n                _hue: \"yellow\"\n            }, null == (b = W.avatar) ? void 0 : b[\"*\"], null == (y = W.avatar) ? void 0 : y.yellow),\n            green: ge({\n                _hue: \"green\"\n            }, null == (w = W.avatar) ? void 0 : w[\"*\"], null == (x = W.avatar) ? void 0 : x.green),\n            cyan: ge({\n                _hue: \"cyan\"\n            }, null == (k = W.avatar) ? void 0 : k[\"*\"], null == (S = W.avatar) ? void 0 : S.cyan)\n        },\n        badge: {\n            default: {\n                _hue: (null == (E = null == (P = null == e1 ? void 0 : e1.base) ? void 0 : P.default) ? void 0 : E._hue) || U,\n                ...null == (T = W.badge) ? void 0 : T[\"*\"],\n                ...null == (A = W.badge) ? void 0 : A.default\n            },\n            primary: {\n                _hue: (null == (C = null == (R = null == e1 ? void 0 : e1.base) ? void 0 : R.primary) ? void 0 : C._hue) || U,\n                ...null == (M = W.badge) ? void 0 : M[\"*\"],\n                ...null == (O = W.badge) ? void 0 : O.primary\n            },\n            positive: {\n                _hue: (null == (j = null == (B = null == e1 ? void 0 : e1.base) ? void 0 : B.positive) ? void 0 : j._hue) || U,\n                ...null == (z = W.badge) ? void 0 : z[\"*\"],\n                ...null == (L = W.badge) ? void 0 : L.positive\n            },\n            caution: {\n                _hue: (null == (D = null == (V = null == e1 ? void 0 : e1.base) ? void 0 : V.caution) ? void 0 : D._hue) || U,\n                ...null == (_ = W.badge) ? void 0 : _[\"*\"],\n                ...null == ($ = W.badge) ? void 0 : $.caution\n            },\n            critical: {\n                _hue: (null == (I = null == (F = null == e1 ? void 0 : e1.base) ? void 0 : F.critical) ? void 0 : I._hue) || U,\n                ...null == (H = W.badge) ? void 0 : H[\"*\"],\n                ...null == (N = W.badge) ? void 0 : N.critical\n            }\n        }\n    };\n}\nfunction we(e1) {\n    const t = {};\n    for (const n of re)t[n] = xe(e1, n);\n    return t;\n}\nfunction xe(e1, t) {\n    const n = {};\n    for (const o of ne)n[o] = ke(e1, t, o);\n    return n;\n}\nfunction ke(e1, t, n) {\n    const o = {};\n    for (const r of oe)o[r] = Se(e1, n, t, r);\n    return o;\n}\nfunction Se(e1, t, n, o) {\n    var r, i, a, s, l, c, u, d, h, f, p, g, m, v, b, y, w, x, k, S, P, E, T, A, R, C, M, O, B, j, z, L, V, D, _, $, F, I, H, N, W, U, Y, G, X, q, K, Z, J, Q, ee, te;\n    const ne = ge(null == (a = null == (i = null == (r = null == e1 ? void 0 : e1.button) ? void 0 : r[n]) ? void 0 : i[\"*\"]) ? void 0 : a[\"*\"], null == (c = null == (l = null == (s = null == e1 ? void 0 : e1.button) ? void 0 : s[n]) ? void 0 : l[t]) ? void 0 : c[\"*\"], null == (h = null == (d = null == (u = null == e1 ? void 0 : e1.button) ? void 0 : u[n]) ? void 0 : d[\"*\"]) ? void 0 : h[o], null == (g = null == (p = null == (f = null == e1 ? void 0 : e1.button) ? void 0 : f[n]) ? void 0 : p[t]) ? void 0 : g[o]), oe = ne._hue || (null == (v = null == (m = null == e1 ? void 0 : e1.base) ? void 0 : m[t]) ? void 0 : v._hue);\n    return {\n        ...ne,\n        _hue: oe,\n        avatar: {\n            gray: ge({\n                _hue: \"gray\"\n            }, null == (b = ne.avatar) ? void 0 : b[\"*\"], null == (y = ne.avatar) ? void 0 : y.gray),\n            blue: ge({\n                _hue: \"blue\"\n            }, null == (w = ne.avatar) ? void 0 : w[\"*\"], null == (x = ne.avatar) ? void 0 : x.blue),\n            purple: ge({\n                _hue: \"purple\"\n            }, null == (k = ne.avatar) ? void 0 : k[\"*\"], null == (S = ne.avatar) ? void 0 : S.purple),\n            magenta: ge({\n                _hue: \"magenta\"\n            }, null == (P = ne.avatar) ? void 0 : P[\"*\"], null == (E = ne.avatar) ? void 0 : E.magenta),\n            red: ge({\n                _hue: \"red\"\n            }, null == (T = ne.avatar) ? void 0 : T[\"*\"], null == (A = ne.avatar) ? void 0 : A.red),\n            orange: ge({\n                _hue: \"orange\"\n            }, null == (R = ne.avatar) ? void 0 : R[\"*\"], null == (C = ne.avatar) ? void 0 : C.orange),\n            yellow: ge({\n                _hue: \"yellow\"\n            }, null == (M = ne.avatar) ? void 0 : M[\"*\"], null == (O = ne.avatar) ? void 0 : O.yellow),\n            green: ge({\n                _hue: \"green\"\n            }, null == (B = ne.avatar) ? void 0 : B[\"*\"], null == (j = ne.avatar) ? void 0 : j.green),\n            cyan: ge({\n                _hue: \"cyan\"\n            }, null == (z = ne.avatar) ? void 0 : z[\"*\"], null == (L = ne.avatar) ? void 0 : L.cyan)\n        },\n        badge: {\n            default: {\n                _hue: null == (D = null == (V = null == e1 ? void 0 : e1.base) ? void 0 : V.default) ? void 0 : D._hue,\n                ...null == (_ = ne.badge) ? void 0 : _[\"*\"],\n                ...null == ($ = ne.badge) ? void 0 : $.default\n            },\n            primary: {\n                _hue: null == (I = null == (F = null == e1 ? void 0 : e1.base) ? void 0 : F.primary) ? void 0 : I._hue,\n                ...null == (H = ne.badge) ? void 0 : H[\"*\"],\n                ...null == (N = ne.badge) ? void 0 : N.primary\n            },\n            positive: {\n                _hue: null == (U = null == (W = null == e1 ? void 0 : e1.base) ? void 0 : W.positive) ? void 0 : U._hue,\n                ...null == (Y = ne.badge) ? void 0 : Y[\"*\"],\n                ...null == (G = ne.badge) ? void 0 : G.positive\n            },\n            caution: {\n                _hue: null == (q = null == (X = null == e1 ? void 0 : e1.base) ? void 0 : X.caution) ? void 0 : q._hue,\n                ...null == (K = ne.badge) ? void 0 : K[\"*\"],\n                ...null == (Z = ne.badge) ? void 0 : Z.caution\n            },\n            critical: {\n                _hue: null == (Q = null == (J = null == e1 ? void 0 : e1.base) ? void 0 : J.critical) ? void 0 : Q._hue,\n                ...null == (ee = ne.badge) ? void 0 : ee[\"*\"],\n                ...null == (te = ne.badge) ? void 0 : te.critical\n            }\n        }\n    };\n}\nfunction Pe(e1) {\n    const t = {};\n    for (const n of ie)t[n] = Ee(e1, n);\n    return t;\n}\nfunction Ee(e1, t) {\n    const n = {};\n    for (const o of ae)n[o] = Te(e1, t, o);\n    return n;\n}\nfunction Te(e1, t, n) {\n    var o, r, i, a, s, l, c, u, d, h;\n    const f = ge(null == (r = null == (o = null == e1 ? void 0 : e1.input) ? void 0 : o[\"*\"]) ? void 0 : r[\"*\"], null == (a = null == (i = null == e1 ? void 0 : e1.input) ? void 0 : i[t]) ? void 0 : a[\"*\"], null == (l = null == (s = null == e1 ? void 0 : e1.input) ? void 0 : s[\"*\"]) ? void 0 : l[n], null == (u = null == (c = null == e1 ? void 0 : e1.input) ? void 0 : c[t]) ? void 0 : u[n]), p = f._hue || (null == (h = null == (d = null == e1 ? void 0 : e1.input) ? void 0 : d[t]) ? void 0 : h._hue);\n    return {\n        ...f,\n        _hue: p\n    };\n}\nfunction Ae(e1) {\n    const t = {};\n    for (const n of ne)t[n] = Re(e1, n);\n    return t;\n}\nfunction Re(e1, t) {\n    var n, o, r, i;\n    const a = {\n        _hue: (null == (o = null == (n = null == e1 ? void 0 : e1.selectable) ? void 0 : n[t]) ? void 0 : o._hue) || (null == (i = null == (r = null == e1 ? void 0 : e1.base) ? void 0 : r[t]) ? void 0 : i._hue)\n    };\n    for (const n of oe)a[n] = Ce(e1, t, n);\n    return a;\n}\nfunction Ce(e1, t, n) {\n    var o, r, i, a, s, l, c, u, d, h, f, p, g, m, v, b, y, w, x, k, S, P, E, T, A, R, C, M, O, B, j, z, L, V, D, _, $, F, I, H, N, W, U, Y, G, X, q, K;\n    const Z = ge(null == (r = null == (o = null == e1 ? void 0 : e1.selectable) ? void 0 : o[\"*\"]) ? void 0 : r[\"*\"], null == (a = null == (i = null == e1 ? void 0 : e1.selectable) ? void 0 : i[t]) ? void 0 : a[\"*\"], null == (l = null == (s = null == e1 ? void 0 : e1.selectable) ? void 0 : s[\"*\"]) ? void 0 : l[n], null == (u = null == (c = null == e1 ? void 0 : e1.selectable) ? void 0 : c[t]) ? void 0 : u[n]), J = Z._hue || (null == (h = null == (d = null == e1 ? void 0 : e1.base) ? void 0 : d[t]) ? void 0 : h._hue);\n    return {\n        ...Z,\n        _hue: J,\n        avatar: {\n            gray: ge({\n                _hue: \"gray\"\n            }, null == (f = Z.avatar) ? void 0 : f[\"*\"], null == (p = Z.avatar) ? void 0 : p.gray),\n            blue: ge({\n                _hue: \"blue\"\n            }, null == (g = Z.avatar) ? void 0 : g[\"*\"], null == (m = Z.avatar) ? void 0 : m.blue),\n            purple: ge({\n                _hue: \"purple\"\n            }, null == (v = Z.avatar) ? void 0 : v[\"*\"], null == (b = Z.avatar) ? void 0 : b.purple),\n            magenta: ge({\n                _hue: \"magenta\"\n            }, null == (y = Z.avatar) ? void 0 : y[\"*\"], null == (w = Z.avatar) ? void 0 : w.magenta),\n            red: ge({\n                _hue: \"red\"\n            }, null == (x = Z.avatar) ? void 0 : x[\"*\"], null == (k = Z.avatar) ? void 0 : k.red),\n            orange: ge({\n                _hue: \"orange\"\n            }, null == (S = Z.avatar) ? void 0 : S[\"*\"], null == (P = Z.avatar) ? void 0 : P.orange),\n            yellow: ge({\n                _hue: \"yellow\"\n            }, null == (E = Z.avatar) ? void 0 : E[\"*\"], null == (T = Z.avatar) ? void 0 : T.yellow),\n            green: ge({\n                _hue: \"green\"\n            }, null == (A = Z.avatar) ? void 0 : A[\"*\"], null == (R = Z.avatar) ? void 0 : R.green),\n            cyan: ge({\n                _hue: \"cyan\"\n            }, null == (C = Z.avatar) ? void 0 : C[\"*\"], null == (M = Z.avatar) ? void 0 : M.cyan)\n        },\n        badge: {\n            default: {\n                _hue: null == (B = null == (O = null == e1 ? void 0 : e1.base) ? void 0 : O.default) ? void 0 : B._hue,\n                ...null == (j = Z.badge) ? void 0 : j[\"*\"],\n                ...null == (z = Z.badge) ? void 0 : z.default\n            },\n            primary: {\n                _hue: null == (V = null == (L = null == e1 ? void 0 : e1.base) ? void 0 : L.primary) ? void 0 : V._hue,\n                ...null == (D = Z.badge) ? void 0 : D[\"*\"],\n                ...null == (_ = Z.badge) ? void 0 : _.primary\n            },\n            positive: {\n                _hue: null == (F = null == ($ = null == e1 ? void 0 : e1.base) ? void 0 : $.positive) ? void 0 : F._hue,\n                ...null == (I = Z.badge) ? void 0 : I[\"*\"],\n                ...null == (H = Z.badge) ? void 0 : H.positive\n            },\n            caution: {\n                _hue: null == (W = null == (N = null == e1 ? void 0 : e1.base) ? void 0 : N.caution) ? void 0 : W._hue,\n                ...null == (U = Z.badge) ? void 0 : U[\"*\"],\n                ...null == (Y = Z.badge) ? void 0 : Y.caution\n            },\n            critical: {\n                _hue: null == (X = null == (G = null == e1 ? void 0 : e1.base) ? void 0 : G.critical) ? void 0 : X._hue,\n                ...null == (q = Z.badge) ? void 0 : q[\"*\"],\n                ...null == (K = Z.badge) ? void 0 : K.critical\n            }\n        }\n    };\n}\nfunction Me(e1, t) {\n    const { scheme: n } = e1;\n    return {\n        transparent: Oe({\n            scheme: n,\n            tone: \"transparent\"\n        }, t),\n        default: Oe({\n            scheme: n,\n            tone: \"default\"\n        }, t),\n        primary: Oe({\n            scheme: n,\n            tone: \"primary\"\n        }, t),\n        positive: Oe({\n            scheme: n,\n            tone: \"positive\"\n        }, t),\n        caution: Oe({\n            scheme: n,\n            tone: \"caution\"\n        }, t),\n        critical: Oe({\n            scheme: n,\n            tone: \"critical\"\n        }, t)\n    };\n}\nfunction Oe(e1, t) {\n    var n, o, r, i, a, s, l, c, u, d, h, f, p;\n    const { scheme: g, tone: m } = e1, v = null == (o = null == (n = null == t ? void 0 : t.color) ? void 0 : n.base) ? void 0 : o[m], b = {\n        hue: (null == v ? void 0 : v._hue) || \"gray\",\n        scheme: g\n    };\n    return {\n        _blend: ((null == v ? void 0 : v._blend) || [\n            \"multiply\",\n            \"screen\"\n        ])[\"light\" === g ? 0 : 1],\n        _dark: \"dark\" === g,\n        accent: {\n            fg: he(b, null == (r = null == v ? void 0 : v.accent) ? void 0 : r.fg)\n        },\n        avatar: je({\n            scheme: g\n        }, v),\n        backdrop: he(b, null == v ? void 0 : v.backdrop),\n        badge: Le(null == v ? void 0 : v.badge, {\n            scheme: g\n        }, t),\n        bg: he(b, null == v ? void 0 : v.bg),\n        border: he(b, null == v ? void 0 : v.border),\n        button: De({\n            scheme: g\n        }, t),\n        code: {\n            bg: he(b, null == (i = null == v ? void 0 : v.code) ? void 0 : i.bg),\n            fg: he(b, null == (a = null == v ? void 0 : v.code) ? void 0 : a.fg)\n        },\n        fg: he(b, null == v ? void 0 : v.fg),\n        focusRing: he(b, null == v ? void 0 : v.focusRing),\n        icon: he(b, null == v ? void 0 : v.icon),\n        input: Ie({\n            scheme: g,\n            tone: m\n        }, t),\n        kbd: {\n            bg: he(b, null == (s = null == v ? void 0 : v.kbd) ? void 0 : s.bg),\n            fg: he(b, null == (l = null == v ? void 0 : v.kbd) ? void 0 : l.fg),\n            border: he(b, null == (c = null == v ? void 0 : v.kbd) ? void 0 : c.border)\n        },\n        link: {\n            fg: he(b, null == (u = null == v ? void 0 : v.link) ? void 0 : u.fg)\n        },\n        muted: {\n            bg: he(b, null == (d = null == v ? void 0 : v.muted) ? void 0 : d.bg),\n            fg: he(b, null == (h = null == v ? void 0 : v.muted) ? void 0 : h.fg)\n        },\n        selectable: We({\n            scheme: g\n        }, t),\n        shadow: Be({\n            scheme: g,\n            tone: m\n        }, t),\n        skeleton: {\n            from: he(b, null == (f = null == v ? void 0 : v.skeleton) ? void 0 : f.from),\n            to: he(b, null == (p = null == v ? void 0 : v.skeleton) ? void 0 : p.to)\n        },\n        syntax: Ge({\n            scheme: g\n        }, t)\n    };\n}\nfunction Be(e1, t) {\n    var n, o, r, i, a, s;\n    const { scheme: l, tone: c } = e1, u = null == (o = null == (n = null == t ? void 0 : t.color) ? void 0 : n.base) ? void 0 : o[c], d = {\n        hue: (null == u ? void 0 : u._hue) || \"gray\",\n        scheme: l\n    };\n    return {\n        outline: he(d, null == (r = null == u ? void 0 : u.shadow) ? void 0 : r.outline),\n        umbra: he(d, null == (i = null == u ? void 0 : u.shadow) ? void 0 : i.umbra),\n        penumbra: he(d, null == (a = null == u ? void 0 : u.shadow) ? void 0 : a.penumbra),\n        ambient: he(d, null == (s = null == u ? void 0 : u.shadow) ? void 0 : s.ambient)\n    };\n}\nfunction je(e1, t) {\n    const { scheme: n } = e1;\n    return {\n        gray: ze({\n            color: \"gray\",\n            scheme: n\n        }, t),\n        blue: ze({\n            color: \"blue\",\n            scheme: n\n        }, t),\n        purple: ze({\n            color: \"purple\",\n            scheme: n\n        }, t),\n        magenta: ze({\n            color: \"magenta\",\n            scheme: n\n        }, t),\n        red: ze({\n            color: \"red\",\n            scheme: n\n        }, t),\n        orange: ze({\n            color: \"orange\",\n            scheme: n\n        }, t),\n        yellow: ze({\n            color: \"yellow\",\n            scheme: n\n        }, t),\n        green: ze({\n            color: \"green\",\n            scheme: n\n        }, t),\n        cyan: ze({\n            color: \"cyan\",\n            scheme: n\n        }, t)\n    };\n}\nfunction ze(e1, t) {\n    var n;\n    const { color: o, scheme: r } = e1, i = null == (n = null == t ? void 0 : t.avatar) ? void 0 : n[o], a = {\n        hue: (null == i ? void 0 : i._hue) || \"gray\",\n        scheme: r\n    };\n    return {\n        _blend: ((null == i ? void 0 : i._blend) || [\n            \"screen\",\n            \"multiply\"\n        ])[\"light\" === r ? 0 : 1],\n        bg: he(a, null == i ? void 0 : i.bg),\n        fg: he(a, null == i ? void 0 : i.fg)\n    };\n}\nfunction Le(e1, t, n) {\n    const { scheme: o } = t;\n    return {\n        default: Ve(e1, {\n            scheme: o,\n            tone: \"default\"\n        }, n),\n        primary: Ve(e1, {\n            scheme: o,\n            tone: \"primary\"\n        }, n),\n        positive: Ve(e1, {\n            scheme: o,\n            tone: \"positive\"\n        }, n),\n        caution: Ve(e1, {\n            scheme: o,\n            tone: \"caution\"\n        }, n),\n        critical: Ve(e1, {\n            scheme: o,\n            tone: \"critical\"\n        }, n)\n    };\n}\nfunction Ve(e1, t, n) {\n    var o, r, i;\n    const { scheme: a, tone: s } = t, l = null == e1 ? void 0 : e1[s], c = {\n        hue: (null == l ? void 0 : l._hue) || (null == (i = null == (r = null == (o = null == n ? void 0 : n.color) ? void 0 : o.base) ? void 0 : r[s]) ? void 0 : i._hue) || \"gray\",\n        scheme: a\n    };\n    return {\n        bg: he(c, null == l ? void 0 : l.bg),\n        fg: he(c, null == l ? void 0 : l.fg),\n        dot: he(c, null == l ? void 0 : l.dot),\n        icon: he(c, null == l ? void 0 : l.icon)\n    };\n}\nfunction De(e1, t) {\n    const { scheme: n } = e1, o = {};\n    for (const e1 of re)o[e1] = _e({\n        scheme: n,\n        mode: e1\n    }, t);\n    return o;\n}\nfunction _e(e1, t) {\n    const { mode: n, scheme: o } = e1, r = {};\n    for (const e1 of ne)r[e1] = $e({\n        mode: n,\n        scheme: o,\n        tone: e1\n    }, t);\n    return r;\n}\nfunction $e(e1, t) {\n    const { mode: n, scheme: o, tone: r } = e1, i = {};\n    for (const e1 of oe)i[e1] = Fe({\n        mode: n,\n        tone: r,\n        scheme: o,\n        state: e1\n    }, t);\n    return i;\n}\nfunction Fe(e1, t) {\n    var n, o, r, i, a, s, l, c, u, d, h, f, p, g, m;\n    const { mode: v, tone: b, scheme: y, state: w } = e1, x = null == (i = null == (r = null == (o = null == (n = null == t ? void 0 : t.color) ? void 0 : n.button) ? void 0 : o[v]) ? void 0 : r[b]) ? void 0 : i[w], k = {\n        hue: (null == x ? void 0 : x._hue) || \"gray\",\n        scheme: y\n    };\n    return {\n        _blend: ((null == x ? void 0 : x._blend) || [\n            \"screen\",\n            \"multiply\"\n        ])[\"light\" === y ? 0 : 1],\n        accent: {\n            fg: he(k, null == (a = null == x ? void 0 : x.accent) ? void 0 : a.fg)\n        },\n        avatar: je({\n            scheme: y\n        }, x),\n        badge: Le(null == x ? void 0 : x.badge, {\n            scheme: y\n        }, t),\n        bg: he(k, null == x ? void 0 : x.bg),\n        border: he(k, null == x ? void 0 : x.border),\n        code: {\n            bg: he(k, null == (s = null == x ? void 0 : x.code) ? void 0 : s.bg),\n            fg: he(k, null == (l = null == x ? void 0 : x.code) ? void 0 : l.fg)\n        },\n        fg: he(k, null == x ? void 0 : x.fg),\n        icon: he(k, null == x ? void 0 : x.icon),\n        muted: {\n            bg: he(k, null == (c = null == x ? void 0 : x.muted) ? void 0 : c.bg),\n            fg: he(k, null == (u = null == x ? void 0 : x.muted) ? void 0 : u.fg)\n        },\n        kbd: {\n            bg: he(k, null == (d = null == x ? void 0 : x.kbd) ? void 0 : d.bg),\n            fg: he(k, null == (h = null == x ? void 0 : x.kbd) ? void 0 : h.fg),\n            border: he(k, null == (f = null == x ? void 0 : x.kbd) ? void 0 : f.border)\n        },\n        link: {\n            fg: he(k, null == (p = null == x ? void 0 : x.link) ? void 0 : p.fg)\n        },\n        skeleton: {\n            from: he(k, null == (g = null == x ? void 0 : x.skeleton) ? void 0 : g.from),\n            to: he(k, null == (m = null == x ? void 0 : x.skeleton) ? void 0 : m.to)\n        }\n    };\n}\nfunction Ie(e1, t) {\n    const { scheme: n, tone: o } = e1;\n    return {\n        default: He({\n            mode: \"default\",\n            scheme: n,\n            tone: o\n        }, t),\n        invalid: He({\n            mode: \"invalid\",\n            scheme: n,\n            tone: o\n        }, t)\n    };\n}\nfunction He(e1, t) {\n    const { mode: n, scheme: o, tone: r } = e1;\n    return {\n        enabled: Ne({\n            mode: n,\n            scheme: o,\n            state: \"enabled\",\n            tone: r\n        }, t),\n        hovered: Ne({\n            mode: n,\n            scheme: o,\n            state: \"hovered\",\n            tone: r\n        }, t),\n        readOnly: Ne({\n            mode: n,\n            scheme: o,\n            state: \"readOnly\",\n            tone: r\n        }, t),\n        disabled: Ne({\n            mode: n,\n            scheme: o,\n            state: \"disabled\",\n            tone: r\n        }, t)\n    };\n}\nfunction Ne(e1, t) {\n    var n, o, r, i, a, s, l;\n    const { mode: c, tone: u, scheme: d, state: h } = e1, f = null == (r = null == (o = null == (n = null == t ? void 0 : t.color) ? void 0 : n.input) ? void 0 : o[c]) ? void 0 : r[h], p = {\n        hue: (null == f ? void 0 : f._hue) || (null == (s = null == (a = null == (i = null == t ? void 0 : t.color) ? void 0 : i.base) ? void 0 : a[u]) ? void 0 : s._hue) || \"gray\",\n        scheme: d\n    };\n    return {\n        _blend: ((null == f ? void 0 : f._blend) || [\n            \"screen\",\n            \"multiply\"\n        ])[\"light\" === d ? 0 : 1],\n        bg: he(p, null == f ? void 0 : f.bg),\n        border: he(p, null == f ? void 0 : f.border),\n        fg: he(p, null == f ? void 0 : f.fg),\n        muted: {\n            bg: he(p, null == (l = null == f ? void 0 : f.muted) ? void 0 : l.bg)\n        },\n        placeholder: he(p, null == f ? void 0 : f.placeholder)\n    };\n}\nfunction We(e1, t) {\n    const { scheme: n } = e1, o = {};\n    for (const e1 of ne)o[e1] = Ue({\n        scheme: n,\n        tone: e1\n    }, t);\n    return o;\n}\nfunction Ue(e1, t) {\n    const { scheme: n, tone: o } = e1, r = {};\n    for (const e1 of oe)r[e1] = Ye({\n        tone: o,\n        scheme: n,\n        state: e1\n    }, t);\n    return r;\n}\nfunction Ye(e1, t) {\n    var n, o, r, i, a, s, l, c, u, d, h, f, p, g;\n    const { scheme: m, state: v, tone: b } = e1, y = null == (r = null == (o = null == (n = null == t ? void 0 : t.color) ? void 0 : n.selectable) ? void 0 : o[b]) ? void 0 : r[v], w = {\n        hue: (null == y ? void 0 : y._hue) || \"gray\",\n        scheme: m\n    };\n    return {\n        _blend: ((null == y ? void 0 : y._blend) || [\n            \"screen\",\n            \"multiply\"\n        ])[\"light\" === m ? 0 : 1],\n        accent: {\n            fg: he(w, null == (i = null == y ? void 0 : y.accent) ? void 0 : i.fg)\n        },\n        avatar: je({\n            scheme: m\n        }, y),\n        badge: Le(null == y ? void 0 : y.badge, {\n            scheme: m\n        }, t),\n        bg: he(w, null == y ? void 0 : y.bg),\n        border: he(w, null == y ? void 0 : y.border),\n        code: {\n            bg: he(w, null == (a = null == y ? void 0 : y.code) ? void 0 : a.bg),\n            fg: he(w, null == (s = null == y ? void 0 : y.code) ? void 0 : s.fg)\n        },\n        fg: he(w, null == y ? void 0 : y.fg),\n        icon: he(w, null == y ? void 0 : y.icon),\n        muted: {\n            bg: he(w, null == (l = null == y ? void 0 : y.muted) ? void 0 : l.bg),\n            fg: he(w, null == (c = null == y ? void 0 : y.muted) ? void 0 : c.fg)\n        },\n        kbd: {\n            bg: he(w, null == (u = null == y ? void 0 : y.kbd) ? void 0 : u.bg),\n            fg: he(w, null == (d = null == y ? void 0 : y.kbd) ? void 0 : d.fg),\n            border: he(w, null == (h = null == y ? void 0 : y.kbd) ? void 0 : h.border)\n        },\n        link: {\n            fg: he(w, null == (f = null == y ? void 0 : y.link) ? void 0 : f.fg)\n        },\n        skeleton: {\n            from: he(w, null == (p = null == y ? void 0 : y.skeleton) ? void 0 : p.from),\n            to: he(w, null == (g = null == y ? void 0 : y.skeleton) ? void 0 : g.to)\n        }\n    };\n}\nfunction Ge(e1, t) {\n    var n;\n    const { scheme: o } = e1, r = null == (n = null == t ? void 0 : t.color) ? void 0 : n.syntax, i = {\n        hue: \"gray\",\n        scheme: o\n    };\n    return {\n        atrule: he(i, null == r ? void 0 : r.atrule),\n        attrName: he(i, null == r ? void 0 : r.attrName),\n        attrValue: he(i, null == r ? void 0 : r.attrValue),\n        attribute: he(i, null == r ? void 0 : r.attribute),\n        boolean: he(i, null == r ? void 0 : r.boolean),\n        builtin: he(i, null == r ? void 0 : r.builtin),\n        cdata: he(i, null == r ? void 0 : r.cdata),\n        char: he(i, null == r ? void 0 : r.char),\n        class: he(i, null == r ? void 0 : r.class),\n        className: he(i, null == r ? void 0 : r.className),\n        comment: he(i, null == r ? void 0 : r.comment),\n        constant: he(i, null == r ? void 0 : r.constant),\n        deleted: he(i, null == r ? void 0 : r.deleted),\n        doctype: he(i, null == r ? void 0 : r.doctype),\n        entity: he(i, null == r ? void 0 : r.entity),\n        function: he(i, null == r ? void 0 : r.function),\n        hexcode: he(i, null == r ? void 0 : r.hexcode),\n        id: he(i, null == r ? void 0 : r.id),\n        important: he(i, null == r ? void 0 : r.important),\n        inserted: he(i, null == r ? void 0 : r.inserted),\n        keyword: he(i, null == r ? void 0 : r.keyword),\n        number: he(i, null == r ? void 0 : r.number),\n        operator: he(i, null == r ? void 0 : r.operator),\n        prolog: he(i, null == r ? void 0 : r.prolog),\n        property: he(i, null == r ? void 0 : r.property),\n        pseudoClass: he(i, null == r ? void 0 : r.pseudoClass),\n        pseudoElement: he(i, null == r ? void 0 : r.pseudoElement),\n        punctuation: he(i, null == r ? void 0 : r.punctuation),\n        regex: he(i, null == r ? void 0 : r.regex),\n        selector: he(i, null == r ? void 0 : r.selector),\n        string: he(i, null == r ? void 0 : r.string),\n        symbol: he(i, null == r ? void 0 : r.symbol),\n        tag: he(i, null == r ? void 0 : r.tag),\n        unit: he(i, null == r ? void 0 : r.unit),\n        url: he(i, null == r ? void 0 : r.url),\n        variable: he(i, null == r ? void 0 : r.variable)\n    };\n}\nconst Xe = V;\nfunction qe(e1, t, n) {\n    return e1 + (t - e1) * n;\n}\nfunction Ke(e1, t) {\n    return e1 * t;\n}\nfunction Ze(e1, t) {\n    return e1 + t - e1 * t;\n}\nfunction Je(e1) {\n    let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;\n    return Math.min(n, Math.max(t, e1));\n}\nfunction Qe(e1, t, n, o, r) {\n    return function(e1, t, n) {\n        return e1 * (1 - n) + t * n;\n    }(n, o, function(e1, t, n) {\n        return Je((n - e1) / (t - e1));\n    }(e1, t, r));\n}\nfunction et(e1) {\n    return Math.round(e1);\n}\nfunction tt(e1) {\n    if (4 === e1.length) {\n        const t = e1.slice(1, 2), n = e1.slice(2, 3), o = e1.slice(3, 4);\n        return {\n            r: parseInt(t + t, 16),\n            g: parseInt(n + n, 16),\n            b: parseInt(o + o, 16)\n        };\n    }\n    return {\n        r: parseInt(e1.slice(1, 3), 16),\n        g: parseInt(e1.slice(3, 5), 16),\n        b: parseInt(e1.slice(5, 7), 16)\n    };\n}\nfunction nt(e1) {\n    const t = et(Je(Math.round(e1.r), 0, 255)), n = et(Je(Math.round(e1.g), 0, 255)), o = et(Je(Math.round(e1.b), 0, 255));\n    return \"a\" in e1 ? \"rgba(\".concat(t, \",\").concat(n, \",\").concat(o, \",\").concat(e1.a, \")\") : \"#\" + ((1 << 24) + (t << 16) + (n << 8) + o).toString(16).slice(1);\n}\nconst ot = \"0123456789ABCDEFabcdef\", rt = /hsl\\(\\s*(\\d+)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*,\\s*((\\d+(?:\\.\\d+)?)%)\\s*\\)/i;\nfunction it(e1) {\n    return \"#\" === e1[0] && (4 === e1.length || 7 === e1.length) && function(e1) {\n        for (const t of e1)if (-1 === ot.indexOf(t)) return !1;\n        return !0;\n    }(e1.slice(1));\n}\nfunction at(e1) {\n    if (!e1) return {\n        r: 0,\n        g: 0,\n        b: 0\n    };\n    if (\"string\" != typeof e1) throw new Error(\"parseColor: expected a string\");\n    if (it(e1)) return tt(e1);\n    if (e1.startsWith(\"hsl(\")) return function(e1) {\n        const t = e1.s / 100, n = e1.l / 100, o = (1 - Math.abs(2 * n - 1)) * t, r = o * (1 - Math.abs(e1.h / 60 % 2 - 1)), i = n - o / 2;\n        let a = 0, s = 0, l = 0;\n        return 0 <= e1.h && e1.h < 60 ? (a = o, s = r, l = 0) : 60 <= e1.h && e1.h < 120 ? (a = r, s = o, l = 0) : 120 <= e1.h && e1.h < 180 ? (a = 0, s = o, l = r) : 180 <= e1.h && e1.h < 240 ? (a = 0, s = r, l = o) : 240 <= e1.h && e1.h < 300 ? (a = r, s = 0, l = o) : 300 <= e1.h && e1.h < 360 && (a = o, s = 0, l = r), {\n            r: Math.round(255 * (a + i)),\n            g: Math.round(255 * (s + i)),\n            b: Math.round(255 * (l + i))\n        };\n    }(function(e1) {\n        const t = rt.exec(e1);\n        if (!t) throw new Error('parseHsl: string is not a HSL color: \"'.concat(e1, '\"'));\n        return {\n            h: parseInt(t[1]),\n            s: parseFloat(t[3]),\n            l: parseFloat(t[5])\n        };\n    }(e1));\n    if (e1.startsWith(\"rgba(\")) return function(e1) {\n        const t = e1.replace(/rgba\\(|\\)/g, \"\").split(\",\");\n        return {\n            r: parseInt(t[0]),\n            g: parseInt(t[1]),\n            b: parseInt(t[2]),\n            a: parseFloat(t[3])\n        };\n    }(e1);\n    throw new Error('parseColor: unexpected color format: \"'.concat(e1, '\"'));\n}\nconst st = [\n    0,\n    255\n];\nfunction lt(e1, t) {\n    const { blendMode: n } = t, o = at(e1), r = at(t.black), i = at(t.white), a = t.bg ? at(t.bg) : \"multiply\" === n ? i : r, s = {\n        r: [\n            r.r,\n            i.r\n        ],\n        g: [\n            r.g,\n            i.g\n        ],\n        b: [\n            r.b,\n            i.b\n        ]\n    }, l = {\n        r: Je(Qe(...s.r, ...st, a.r), ...st),\n        g: Je(Qe(...s.g, ...st, a.g), ...st),\n        b: Je(Qe(...s.b, ...st, a.b), ...st)\n    }, c = {\n        r: Je(Qe(...s.r, ...st, o.r), ...st),\n        g: Je(Qe(...s.g, ...st, o.g), ...st),\n        b: Je(Qe(...s.b, ...st, o.b), ...st)\n    }, u = \"multiply\" === n ? {\n        r: 255 * Ke((d = l).r / 255, (h = c).r / 255),\n        g: 255 * Ke(d.g / 255, h.g / 255),\n        b: 255 * Ke(d.b / 255, h.b / 255)\n    } : function(e1, t) {\n        return {\n            r: 255 * Ze(e1.r / 255, t.r / 255),\n            g: 255 * Ze(e1.g / 255, t.g / 255),\n            b: 255 * Ze(e1.b / 255, t.b / 255)\n        };\n    }(l, c);\n    var d, h;\n    return nt({\n        r: Je(Qe(...st, ...s.r, u.r), ...s.r),\n        g: Je(Qe(...st, ...s.g, u.g), ...s.g),\n        b: Je(Qe(...st, ...s.b, u.b), ...s.b)\n    });\n}\nfunction ct(e1, t) {\n    const { bg: n, blendMode: o, colorPalette: r } = t;\n    if (\"white\" === n) throw new Error(\"Cannot blend with white background\");\n    const i = ce(e1);\n    if (!i || \"color\" !== i.type) throw new Error(\"Invalid color token value: \".concat(e1));\n    let a = \"\";\n    if (\"black\" === i.key && (a = ut(r.black)), \"white\" === i.key && (a = ut(r.white)), i.hue && i.tint && (a = ut(r[i.hue][i.tint])), !a) throw new Error(\"Invalid color token value: \".concat(e1));\n    const s = a, l = {\n        blendMode: o,\n        bg: n,\n        black: ut(r.black),\n        white: ut(r.white)\n    };\n    try {\n        if (a = lt(a, l), n && void 0 !== i.mix) {\n            const e1 = tt(n), t = tt(a);\n            a = nt((c = e1, u = t, d = i.mix, {\n                r: qe(c.r, u.r, d),\n                g: qe(c.g, u.g, d),\n                b: qe(c.b, u.b, d)\n            }));\n        }\n    } catch (e1) {\n        throw console.warn(\"could not blend\", a, l), e1;\n    }\n    var c, u, d;\n    return \"#aN\" === a && (console.warn(\"invalid color token value: \".concat(e1)), a = s), void 0 !== i.opacity && (a = function(e1, t) {\n        const n = at(e1);\n        return \"rgba(\".concat(n.r, \",\").concat(n.g, \",\").concat(n.b, \",\").concat(t, \")\");\n    }(a, i.opacity)), a;\n}\nfunction ut(e1) {\n    return \"string\" == typeof e1 ? e1 : e1.hex;\n}\nfunction dt(e1, t) {\n    var n;\n    const o = null != (n = null == t ? void 0 : t.palette) ? n : Xe;\n    return {\n        light: ht(o, e1.light),\n        dark: ht(o, e1.dark)\n    };\n}\nfunction ht(e1, t) {\n    const n = Object.entries(t), [, o] = n.find((e1)=>{\n        let [t] = e1;\n        return \"transparent\" === t;\n    }), [, r] = n.find((e1)=>{\n        let [t] = e1;\n        return \"default\" === t;\n    }), i = ft(o, {\n        colorPalette: e1\n    }), a = ft(r, {\n        colorPalette: e1\n    }), s = a.bg;\n    if (\"white\" === s) throw new Error(\"Cannot blend with white background\");\n    return Object.fromEntries([\n        [\n            \"transparent\",\n            i\n        ],\n        [\n            \"default\",\n            a\n        ],\n        ...n.filter((e1)=>{\n            let [t] = e1;\n            return \"default\" !== t && \"transparent\" !== t;\n        }).map((t)=>{\n            let [n, o] = t;\n            return [\n                n,\n                ft(o, {\n                    bg: s,\n                    colorPalette: e1\n                })\n            ];\n        })\n    ]);\n}\nfunction ft(e1, t) {\n    const { colorPalette: n, bg: o } = t, r = e1._blend || \"multiply\", i = ct(e1.bg, {\n        colorPalette: n,\n        bg: o,\n        blendMode: r\n    }), a = {\n        colorPalette: n,\n        bg: i,\n        blendMode: r\n    }, s = function(e1, t) {\n        return {\n            default: yt(e1.default, t),\n            ghost: yt(e1.ghost, t),\n            bleed: yt(e1.bleed, t)\n        };\n    }(e1.button, {\n        baseBg: i,\n        blendMode: r,\n        colorPalette: n\n    }), l = function(e1, t) {\n        return {\n            default: Et(e1.default, t),\n            primary: Et(e1.primary, t),\n            positive: Et(e1.positive, t),\n            caution: Et(e1.caution, t),\n            critical: Et(e1.critical, t)\n        };\n    }(e1.selectable, {\n        colorPalette: n,\n        baseBg: i,\n        blendMode: r\n    }), c = {\n        outline: ct(e1.shadow.outline, a),\n        umbra: ct(e1.shadow.umbra, {\n            ...a,\n            bg: void 0,\n            colorPalette: {\n                ...n,\n                black: \"#000000\"\n            }\n        }),\n        penumbra: ct(e1.shadow.penumbra, {\n            ...a,\n            bg: void 0,\n            colorPalette: {\n                ...n,\n                black: \"#000000\"\n            }\n        }),\n        ambient: ct(e1.shadow.ambient, {\n            ...a,\n            bg: void 0,\n            colorPalette: {\n                ...n,\n                black: \"#000000\"\n            }\n        })\n    };\n    return {\n        _blend: r,\n        _dark: e1._dark,\n        accent: {\n            fg: ct(e1.accent.fg, a)\n        },\n        avatar: gt(e1.avatar, {\n            baseBg: i,\n            colorPalette: n,\n            blendMode: r\n        }),\n        backdrop: ct(e1.backdrop, a),\n        badge: vt(e1.badge, {\n            baseBg: i,\n            colorPalette: n,\n            blendMode: r\n        }),\n        bg: i,\n        border: ct(e1.border, a),\n        button: s,\n        code: {\n            bg: ct(e1.code.bg, a),\n            fg: ct(e1.code.fg, a)\n        },\n        fg: ct(e1.fg, a),\n        focusRing: ct(e1.focusRing, a),\n        icon: ct(e1.icon, a),\n        input: kt(e1.input, {\n            baseBg: i,\n            colorPalette: n,\n            blendMode: r\n        }),\n        kbd: pt(e1.kbd, {\n            baseBg: i,\n            colorPalette: n,\n            blendMode: r\n        }),\n        link: {\n            fg: ct(e1.link.fg, a)\n        },\n        muted: {\n            bg: ct(e1.muted.bg, a),\n            fg: ct(e1.muted.fg, a)\n        },\n        shadow: c,\n        skeleton: {\n            from: ct(e1.skeleton.from, a),\n            to: ct(e1.skeleton.to, a)\n        },\n        syntax: Tt(e1.syntax, {\n            baseBg: i,\n            colorPalette: n,\n            blendMode: r\n        }),\n        selectable: l\n    };\n}\nfunction pt(e1, t) {\n    const { baseBg: n, blendMode: o, colorPalette: r } = t, i = {\n        bg: n,\n        blendMode: o,\n        colorPalette: r\n    }, a = ct(e1.bg, i), s = {\n        bg: a,\n        blendMode: o,\n        colorPalette: r\n    };\n    return {\n        bg: a,\n        fg: ct(e1.fg, s),\n        border: ct(e1.border, s)\n    };\n}\nfunction gt(e1, t) {\n    return {\n        gray: mt(e1.gray, t),\n        blue: mt(e1.blue, t),\n        purple: mt(e1.purple, t),\n        magenta: mt(e1.magenta, t),\n        red: mt(e1.red, t),\n        orange: mt(e1.orange, t),\n        yellow: mt(e1.yellow, t),\n        green: mt(e1.green, t),\n        cyan: mt(e1.cyan, t)\n    };\n}\nfunction mt(e1, t) {\n    const { baseBg: n, blendMode: o, colorPalette: r } = t, i = e1._blend || \"multiply\", a = {\n        bg: n,\n        blendMode: o,\n        colorPalette: r\n    }, s = ct(e1.bg, a), l = {\n        bg: s,\n        blendMode: i,\n        colorPalette: r\n    };\n    return {\n        _blend: i,\n        bg: s,\n        fg: ct(e1.fg, l)\n    };\n}\nfunction vt(e1, t) {\n    return {\n        default: bt(e1.default, t),\n        primary: bt(e1.primary, t),\n        positive: bt(e1.positive, t),\n        caution: bt(e1.caution, t),\n        critical: bt(e1.critical, t)\n    };\n}\nfunction bt(e1, t) {\n    const { baseBg: n, blendMode: o, colorPalette: r } = t, i = o, a = {\n        bg: n,\n        blendMode: o,\n        colorPalette: r\n    }, s = ct(e1.bg, a), l = {\n        bg: s,\n        blendMode: i,\n        colorPalette: r\n    };\n    return {\n        bg: s,\n        dot: ct(e1.dot, l),\n        fg: ct(e1.fg, l),\n        icon: ct(e1.icon, l)\n    };\n}\nfunction yt(e1, t) {\n    return {\n        default: wt(e1.default, t),\n        primary: wt(e1.primary, t),\n        positive: wt(e1.positive, t),\n        caution: wt(e1.caution, t),\n        critical: wt(e1.critical, t)\n    };\n}\nfunction wt(e1, t) {\n    return {\n        enabled: xt(e1.enabled, t),\n        hovered: xt(e1.hovered, t),\n        pressed: xt(e1.pressed, t),\n        selected: xt(e1.selected, t),\n        disabled: xt(e1.disabled, t)\n    };\n}\nfunction xt(e1, t) {\n    var n, o;\n    const { baseBg: r, blendMode: i, colorPalette: a } = t, s = e1._blend || \"multiply\", l = {\n        bg: r,\n        blendMode: i,\n        colorPalette: a\n    }, c = ct(e1.bg, l), u = {\n        bg: c,\n        blendMode: s,\n        colorPalette: a\n    };\n    return {\n        _blend: s,\n        accent: {\n            fg: ct(e1.accent.fg, u)\n        },\n        avatar: gt(e1.avatar, {\n            baseBg: r,\n            colorPalette: a,\n            blendMode: s\n        }),\n        badge: vt(e1.badge, {\n            baseBg: c,\n            colorPalette: a,\n            blendMode: s\n        }),\n        bg: c,\n        border: ct(e1.border, u),\n        code: {\n            bg: ct(e1.code.bg, u),\n            fg: ct(e1.code.fg, u)\n        },\n        fg: ct(e1.fg, u),\n        icon: ct(e1.icon, u),\n        link: {\n            fg: ct(e1.link.fg, u)\n        },\n        muted: {\n            bg: ct(e1.muted.bg, u),\n            fg: ct(e1.muted.fg, u)\n        },\n        kbd: {\n            bg: ct(e1.kbd.bg, u),\n            fg: ct(e1.kbd.fg, u),\n            border: ct(e1.kbd.border, u)\n        },\n        skeleton: {\n            from: ct(null == (n = e1.skeleton) ? void 0 : n.from, u),\n            to: ct(null == (o = e1.skeleton) ? void 0 : o.to, u)\n        }\n    };\n}\nfunction kt(e1, t) {\n    return {\n        default: St(e1.default, t),\n        invalid: St(e1.invalid, t)\n    };\n}\nfunction St(e1, t) {\n    return {\n        enabled: Pt(e1.enabled, t),\n        hovered: Pt(e1.hovered, t),\n        readOnly: Pt(e1.readOnly, t),\n        disabled: Pt(e1.disabled, t)\n    };\n}\nfunction Pt(e1, t) {\n    const { baseBg: n, blendMode: o, colorPalette: r } = t, i = e1._blend || \"multiply\", a = {\n        colorPalette: r,\n        bg: n,\n        blendMode: o\n    }, s = ct(e1.bg, a), l = {\n        colorPalette: r,\n        bg: s,\n        blendMode: i\n    };\n    return {\n        _blend: i,\n        bg: s,\n        border: ct(e1.border, l),\n        fg: ct(e1.fg, l),\n        muted: {\n            bg: ct(e1.muted.bg, l)\n        },\n        placeholder: ct(e1.placeholder, l)\n    };\n}\nfunction Et(e1, t) {\n    return {\n        enabled: xt(e1.enabled, t),\n        hovered: xt(e1.hovered, t),\n        pressed: xt(e1.pressed, t),\n        selected: xt(e1.selected, t),\n        disabled: xt(e1.disabled, t)\n    };\n}\nfunction Tt(e1, t) {\n    const { colorPalette: n, baseBg: o, blendMode: r } = t, i = {\n        colorPalette: n,\n        bg: o,\n        blendMode: r\n    };\n    return {\n        atrule: ct(e1.atrule, i),\n        attrName: ct(e1.attrName, i),\n        attrValue: ct(e1.attrValue, i),\n        attribute: ct(e1.attribute, i),\n        boolean: ct(e1.boolean, i),\n        builtin: ct(e1.builtin, i),\n        cdata: ct(e1.cdata, i),\n        char: ct(e1.char, i),\n        class: ct(e1.class, i),\n        className: ct(e1.className, i),\n        comment: ct(e1.comment, i),\n        constant: ct(e1.constant, i),\n        deleted: ct(e1.deleted, i),\n        doctype: ct(e1.doctype, i),\n        entity: ct(e1.entity, i),\n        function: ct(e1.function, i),\n        hexcode: ct(e1.hexcode, i),\n        id: ct(e1.id, i),\n        important: ct(e1.important, i),\n        inserted: ct(e1.inserted, i),\n        keyword: ct(e1.keyword, i),\n        number: ct(e1.number, i),\n        operator: ct(e1.operator, i),\n        prolog: ct(e1.prolog, i),\n        property: ct(e1.property, i),\n        pseudoClass: ct(e1.pseudoClass, i),\n        pseudoElement: ct(e1.pseudoElement, i),\n        punctuation: ct(e1.punctuation, i),\n        regex: ct(e1.regex, i),\n        selector: ct(e1.selector, i),\n        string: ct(e1.string, i),\n        symbol: ct(e1.symbol, i),\n        tag: ct(e1.tag, i),\n        unit: ct(e1.unit, i),\n        url: ct(e1.url, i),\n        variable: ct(e1.variable, i)\n    };\n}\nconst At = new Map;\nfunction Rt(e1, t, n) {\n    const o = function(e1, t, n) {\n        const o = At.get(t);\n        if (!o) return;\n        const r = o.get(n);\n        return r ? r.get(e1) : void 0;\n    }(e1, t, n);\n    if (o) return o;\n    const r = G(e1) ? K(e1) : e1, i = G(e1) ? e1 : function(e1) {\n        if (e1.v2) return e1.v2;\n        const t = X.get(e1);\n        if (t) return t;\n        const { avatar: n, button: o, color: r, container: i, focusRing: a, fonts: s, input: l, layer: c, media: u, radius: d, shadows: h, space: f, styles: p } = e1, g = {\n            _version: 2,\n            avatar: {\n                ...D.avatar,\n                ...n\n            },\n            button: {\n                ...D.button,\n                ...o\n            },\n            card: D.card,\n            color: {\n                light: {\n                    transparent: F(r.light.transparent),\n                    default: F(r.light.default),\n                    primary: F(r.light.primary),\n                    positive: F(r.light.positive),\n                    caution: F(r.light.caution),\n                    critical: F(r.light.critical)\n                },\n                dark: {\n                    transparent: F(r.dark.transparent),\n                    default: F(r.dark.default),\n                    primary: F(r.dark.primary),\n                    positive: F(r.dark.positive),\n                    caution: F(r.dark.caution),\n                    critical: F(r.dark.critical)\n                }\n            },\n            container: i,\n            font: s,\n            input: {\n                ...D.input,\n                ...l,\n                checkbox: {\n                    ...D.input.checkbox,\n                    ...l.checkbox\n                },\n                radio: {\n                    ...D.input.radio,\n                    ...l.radio\n                },\n                switch: {\n                    ...D.input.switch,\n                    ...l.switch\n                }\n            },\n            layer: null != c ? c : D.layer,\n            media: u,\n            radius: d,\n            shadow: h,\n            space: f,\n            style: p\n        };\n        return X.set(e1, g), g;\n    }(e1), a = r.color[t] || r.color.light, s = a[n] || a.default, l = r.layer || D.layer, c = i.color[t] || i.color.light, u = c[n] || c.default, d = i.layer || D.layer, h = {\n        sanity: {\n            ...r,\n            color: s,\n            layer: l,\n            v2: {\n                ...i,\n                _resolved: !0,\n                color: u,\n                layer: d\n            }\n        }\n    };\n    return function(e1, t, n, o) {\n        At.has(t) || At.set(t, new Map);\n        const r = At.get(t);\n        r.has(n) || r.set(n, new WeakMap);\n        const i = r.get(n);\n        i.set(e1, o);\n    }(e1, t, n, h), h;\n}\nvar Ct = function() {\n    return Ct = Object.assign || function(e1) {\n        for(var t, n = 1, o = arguments.length; n < o; n++)for(var r in t = arguments[n])Object.prototype.hasOwnProperty.call(t, r) && (e1[r] = t[r]);\n        return e1;\n    }, Ct.apply(this, arguments);\n};\nfunction Mt(e1, t, n) {\n    if (n || 2 === arguments.length) for(var o, r = 0, i = t.length; r < i; r++)!o && r in t || (o || (o = Array.prototype.slice.call(t, 0, r)), o[r] = t[r]);\n    return e1.concat(o || Array.prototype.slice.call(t));\n}\nvar Ot = \"-ms-\", Bt = \"-moz-\", jt = \"-webkit-\", zt = \"comm\", Lt = \"rule\", Vt = \"decl\", Dt = \"@import\", _t = \"@keyframes\", $t = \"@layer\", Ft = Math.abs, It = String.fromCharCode, Ht = Object.assign;\nfunction Nt(e1) {\n    return e1.trim();\n}\nfunction Wt(e1, t) {\n    return (e1 = t.exec(e1)) ? e1[0] : e1;\n}\nfunction Ut(e1, t, n) {\n    return e1.replace(t, n);\n}\nfunction Yt(e1, t, n) {\n    return e1.indexOf(t, n);\n}\nfunction Gt(e1, t) {\n    return 0 | e1.charCodeAt(t);\n}\nfunction Xt(e1, t, n) {\n    return e1.slice(t, n);\n}\nfunction qt(e1) {\n    return e1.length;\n}\nfunction Kt(e1) {\n    return e1.length;\n}\nfunction Zt(e1, t) {\n    return t.push(e1), e1;\n}\nfunction Jt(e1, t) {\n    return e1.filter(function(e1) {\n        return !Wt(e1, t);\n    });\n}\nvar Qt = 1, en = 1, tn = 0, nn = 0, on = 0, rn = \"\";\nfunction an(e1, t, n, o, r, i, a, s) {\n    return {\n        value: e1,\n        root: t,\n        parent: n,\n        type: o,\n        props: r,\n        children: i,\n        line: Qt,\n        column: en,\n        length: a,\n        return: \"\",\n        siblings: s\n    };\n}\nfunction sn(e1, t) {\n    return Ht(an(\"\", null, null, \"\", null, null, 0, e1.siblings), e1, {\n        length: -e1.length\n    }, t);\n}\nfunction ln(e1) {\n    for(; e1.root;)e1 = sn(e1.root, {\n        children: [\n            e1\n        ]\n    });\n    Zt(e1, e1.siblings);\n}\nfunction cn() {\n    return on = nn > 0 ? Gt(rn, --nn) : 0, en--, 10 === on && (en = 1, Qt--), on;\n}\nfunction un() {\n    return on = nn < tn ? Gt(rn, nn++) : 0, en++, 10 === on && (en = 1, Qt++), on;\n}\nfunction dn() {\n    return Gt(rn, nn);\n}\nfunction hn() {\n    return nn;\n}\nfunction fn(e1, t) {\n    return Xt(rn, e1, t);\n}\nfunction pn(e1) {\n    switch(e1){\n        case 0:\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            return 5;\n        case 33:\n        case 43:\n        case 44:\n        case 47:\n        case 62:\n        case 64:\n        case 126:\n        case 59:\n        case 123:\n        case 125:\n            return 4;\n        case 58:\n            return 3;\n        case 34:\n        case 39:\n        case 40:\n        case 91:\n            return 2;\n        case 41:\n        case 93:\n            return 1;\n    }\n    return 0;\n}\nfunction gn(e1) {\n    return Nt(fn(nn - 1, bn(91 === e1 ? e1 + 2 : 40 === e1 ? e1 + 1 : e1)));\n}\nfunction mn(e1) {\n    for(; (on = dn()) && on < 33;)un();\n    return pn(e1) > 2 || pn(on) > 3 ? \"\" : \" \";\n}\nfunction vn(e1, t) {\n    for(; --t && un() && !(on < 48 || on > 102 || on > 57 && on < 65 || on > 70 && on < 97););\n    return fn(e1, hn() + (t < 6 && 32 == dn() && 32 == un()));\n}\nfunction bn(e1) {\n    for(; un();)switch(on){\n        case e1:\n            return nn;\n        case 34:\n        case 39:\n            34 !== e1 && 39 !== e1 && bn(on);\n            break;\n        case 40:\n            41 === e1 && bn(e1);\n            break;\n        case 92:\n            un();\n    }\n    return nn;\n}\nfunction yn(e1, t) {\n    for(; un() && e1 + on !== 57 && (e1 + on !== 84 || 47 !== dn()););\n    return \"/*\" + fn(t, nn - 1) + \"*\" + It(47 === e1 ? e1 : un());\n}\nfunction wn(e1) {\n    for(; !pn(dn());)un();\n    return fn(e1, nn);\n}\nfunction xn(e1) {\n    return function(e1) {\n        return rn = \"\", e1;\n    }(kn(\"\", null, null, null, [\n        \"\"\n    ], e1 = function(e1) {\n        return Qt = en = 1, tn = qt(rn = e1), nn = 0, [];\n    }(e1), 0, [\n        0\n    ], e1));\n}\nfunction kn(e1, t, n, o, r, i, a, s, l) {\n    for(var c = 0, u = 0, d = a, h = 0, f = 0, p = 0, g = 1, m = 1, v = 1, b = 0, y = \"\", w = r, x = i, k = o, S = y; m;)switch(p = b, b = un()){\n        case 40:\n            if (108 != p && 58 == Gt(S, d - 1)) {\n                -1 != Yt(S += Ut(gn(b), \"&\", \"&\\f\"), \"&\\f\", Ft(c ? s[c - 1] : 0)) && (v = -1);\n                break;\n            }\n        case 34:\n        case 39:\n        case 91:\n            S += gn(b);\n            break;\n        case 9:\n        case 10:\n        case 13:\n        case 32:\n            S += mn(p);\n            break;\n        case 92:\n            S += vn(hn() - 1, 7);\n            continue;\n        case 47:\n            switch(dn()){\n                case 42:\n                case 47:\n                    Zt(Pn(yn(un(), hn()), t, n, l), l);\n                    break;\n                default:\n                    S += \"/\";\n            }\n            break;\n        case 123 * g:\n            s[c++] = qt(S) * v;\n        case 125 * g:\n        case 59:\n        case 0:\n            switch(b){\n                case 0:\n                case 125:\n                    m = 0;\n                case 59 + u:\n                    -1 == v && (S = Ut(S, /\\f/g, \"\")), f > 0 && qt(S) - d && Zt(f > 32 ? En(S + \";\", o, n, d - 1, l) : En(Ut(S, \" \", \"\") + \";\", o, n, d - 2, l), l);\n                    break;\n                case 59:\n                    S += \";\";\n                default:\n                    if (Zt(k = Sn(S, t, n, c, u, r, s, y, w = [], x = [], d, i), i), 123 === b) if (0 === u) kn(S, t, k, k, w, i, d, s, x);\n                    else switch(99 === h && 110 === Gt(S, 3) ? 100 : h){\n                        case 100:\n                        case 108:\n                        case 109:\n                        case 115:\n                            kn(e1, k, k, o && Zt(Sn(e1, k, k, 0, 0, r, s, y, r, w = [], d, x), x), r, x, d, s, o ? w : x);\n                            break;\n                        default:\n                            kn(S, k, k, k, [\n                                \"\"\n                            ], x, 0, s, x);\n                    }\n            }\n            c = u = f = 0, g = v = 1, y = S = \"\", d = a;\n            break;\n        case 58:\n            d = 1 + qt(S), f = p;\n        default:\n            if (g < 1) {\n                if (123 == b) --g;\n                else if (125 == b && 0 == g++ && 125 == cn()) continue;\n            }\n            switch(S += It(b), b * g){\n                case 38:\n                    v = u > 0 ? 1 : (S += \"\\f\", -1);\n                    break;\n                case 44:\n                    s[c++] = (qt(S) - 1) * v, v = 1;\n                    break;\n                case 64:\n                    45 === dn() && (S += gn(un())), h = dn(), u = d = qt(y = S += wn(hn())), b++;\n                    break;\n                case 45:\n                    45 === p && 2 == qt(S) && (g = 0);\n            }\n    }\n    return i;\n}\nfunction Sn(e1, t, n, o, r, i, a, s, l, c, u, d) {\n    for(var h = r - 1, f = 0 === r ? i : [\n        \"\"\n    ], p = Kt(f), g = 0, m = 0, v = 0; g < o; ++g)for(var b = 0, y = Xt(e1, h + 1, h = Ft(m = a[g])), w = e1; b < p; ++b)(w = Nt(m > 0 ? f[b] + \" \" + y : Ut(y, /&\\f/g, f[b]))) && (l[v++] = w);\n    return an(e1, t, n, 0 === r ? Lt : s, l, c, u, d);\n}\nfunction Pn(e1, t, n, o) {\n    return an(e1, t, n, zt, It(on), Xt(e1, 2, -2), 0, o);\n}\nfunction En(e1, t, n, o, r) {\n    return an(e1, t, n, Vt, Xt(e1, 0, o), Xt(e1, o + 1, -1), o, r);\n}\nfunction Tn(e1, t, n) {\n    switch(function(e1, t) {\n        return 45 ^ Gt(e1, 0) ? (((t << 2 ^ Gt(e1, 0)) << 2 ^ Gt(e1, 1)) << 2 ^ Gt(e1, 2)) << 2 ^ Gt(e1, 3) : 0;\n    }(e1, t)){\n        case 5103:\n            return jt + \"print-\" + e1 + e1;\n        case 5737:\n        case 4201:\n        case 3177:\n        case 3433:\n        case 1641:\n        case 4457:\n        case 2921:\n        case 5572:\n        case 6356:\n        case 5844:\n        case 3191:\n        case 6645:\n        case 3005:\n        case 6391:\n        case 5879:\n        case 5623:\n        case 6135:\n        case 4599:\n        case 4855:\n        case 4215:\n        case 6389:\n        case 5109:\n        case 5365:\n        case 5621:\n        case 3829:\n            return jt + e1 + e1;\n        case 4789:\n            return Bt + e1 + e1;\n        case 5349:\n        case 4246:\n        case 4810:\n        case 6968:\n        case 2756:\n            return jt + e1 + Bt + e1 + Ot + e1 + e1;\n        case 5936:\n            switch(Gt(e1, t + 11)){\n                case 114:\n                    return jt + e1 + Ot + Ut(e1, /[svh]\\w+-[tblr]{2}/, \"tb\") + e1;\n                case 108:\n                    return jt + e1 + Ot + Ut(e1, /[svh]\\w+-[tblr]{2}/, \"tb-rl\") + e1;\n                case 45:\n                    return jt + e1 + Ot + Ut(e1, /[svh]\\w+-[tblr]{2}/, \"lr\") + e1;\n            }\n        case 6828:\n        case 4268:\n        case 2903:\n            return jt + e1 + Ot + e1 + e1;\n        case 6165:\n            return jt + e1 + Ot + \"flex-\" + e1 + e1;\n        case 5187:\n            return jt + e1 + Ut(e1, /(\\w+).+(:[^]+)/, jt + \"box-$1$2\" + Ot + \"flex-$1$2\") + e1;\n        case 5443:\n            return jt + e1 + Ot + \"flex-item-\" + Ut(e1, /flex-|-self/g, \"\") + (Wt(e1, /flex-|baseline/) ? \"\" : Ot + \"grid-row-\" + Ut(e1, /flex-|-self/g, \"\")) + e1;\n        case 4675:\n            return jt + e1 + Ot + \"flex-line-pack\" + Ut(e1, /align-content|flex-|-self/g, \"\") + e1;\n        case 5548:\n            return jt + e1 + Ot + Ut(e1, \"shrink\", \"negative\") + e1;\n        case 5292:\n            return jt + e1 + Ot + Ut(e1, \"basis\", \"preferred-size\") + e1;\n        case 6060:\n            return jt + \"box-\" + Ut(e1, \"-grow\", \"\") + jt + e1 + Ot + Ut(e1, \"grow\", \"positive\") + e1;\n        case 4554:\n            return jt + Ut(e1, /([^-])(transform)/g, \"$1\" + jt + \"$2\") + e1;\n        case 6187:\n            return Ut(Ut(Ut(e1, /(zoom-|grab)/, jt + \"$1\"), /(image-set)/, jt + \"$1\"), e1, \"\") + e1;\n        case 5495:\n        case 3959:\n            return Ut(e1, /(image-set\\([^]*)/, jt + \"$1$`$1\");\n        case 4968:\n            return Ut(Ut(e1, /(.+:)(flex-)?(.*)/, jt + \"box-pack:$3\" + Ot + \"flex-pack:$3\"), /s.+-b[^;]+/, \"justify\") + jt + e1 + e1;\n        case 4200:\n            if (!Wt(e1, /flex-|baseline/)) return Ot + \"grid-column-align\" + Xt(e1, t) + e1;\n            break;\n        case 2592:\n        case 3360:\n            return Ot + Ut(e1, \"template-\", \"\") + e1;\n        case 4384:\n        case 3616:\n            return n && n.some(function(e1, n) {\n                return t = n, Wt(e1.props, /grid-\\w+-end/);\n            }) ? ~Yt(e1 + (n = n[t].value), \"span\", 0) ? e1 : Ot + Ut(e1, \"-start\", \"\") + e1 + Ot + \"grid-row-span:\" + (~Yt(n, \"span\", 0) ? Wt(n, /\\d+/) : +Wt(n, /\\d+/) - +Wt(e1, /\\d+/)) + \";\" : Ot + Ut(e1, \"-start\", \"\") + e1;\n        case 4896:\n        case 4128:\n            return n && n.some(function(e1) {\n                return Wt(e1.props, /grid-\\w+-start/);\n            }) ? e1 : Ot + Ut(Ut(e1, \"-end\", \"-span\"), \"span \", \"\") + e1;\n        case 4095:\n        case 3583:\n        case 4068:\n        case 2532:\n            return Ut(e1, /(.+)-inline(.+)/, jt + \"$1$2\") + e1;\n        case 8116:\n        case 7059:\n        case 5753:\n        case 5535:\n        case 5445:\n        case 5701:\n        case 4933:\n        case 4677:\n        case 5533:\n        case 5789:\n        case 5021:\n        case 4765:\n            if (qt(e1) - 1 - t > 6) switch(Gt(e1, t + 1)){\n                case 109:\n                    if (45 !== Gt(e1, t + 4)) break;\n                case 102:\n                    return Ut(e1, /(.+:)(.+)-([^]+)/, \"$1\" + jt + \"$2-$3$1\" + Bt + (108 == Gt(e1, t + 3) ? \"$3\" : \"$2-$3\")) + e1;\n                case 115:\n                    return ~Yt(e1, \"stretch\", 0) ? Tn(Ut(e1, \"stretch\", \"fill-available\"), t, n) + e1 : e1;\n            }\n            break;\n        case 5152:\n        case 5920:\n            return Ut(e1, /(.+?):(\\d+)(\\s*\\/\\s*(span)?\\s*(\\d+))?(.*)/, function(t, n, o, r, i, a, s) {\n                return Ot + n + \":\" + o + s + (r ? Ot + n + \"-span:\" + (i ? a : +a - +o) + s : \"\") + e1;\n            });\n        case 4949:\n            if (121 === Gt(e1, t + 6)) return Ut(e1, \":\", \":\" + jt) + e1;\n            break;\n        case 6444:\n            switch(Gt(e1, 45 === Gt(e1, 14) ? 18 : 11)){\n                case 120:\n                    return Ut(e1, /(.+:)([^;\\s!]+)(;|(\\s+)?!.+)?/, \"$1\" + jt + (45 === Gt(e1, 14) ? \"inline-\" : \"\") + \"box$3$1\" + jt + \"$2$3$1\" + Ot + \"$2box$3\") + e1;\n                case 100:\n                    return Ut(e1, \":\", \":\" + Ot) + e1;\n            }\n            break;\n        case 5719:\n        case 2647:\n        case 2135:\n        case 3927:\n        case 2391:\n            return Ut(e1, \"scroll-\", \"scroll-snap-\") + e1;\n    }\n    return e1;\n}\nfunction An(e1, t) {\n    for(var n = \"\", o = 0; o < e1.length; o++)n += t(e1[o], o, e1, t) || \"\";\n    return n;\n}\nfunction Rn(e1, t, n, o) {\n    switch(e1.type){\n        case $t:\n            if (e1.children.length) break;\n        case Dt:\n        case Vt:\n            return e1.return = e1.return || e1.value;\n        case zt:\n            return \"\";\n        case _t:\n            return e1.return = e1.value + \"{\" + An(e1.children, o) + \"}\";\n        case Lt:\n            if (!qt(e1.value = e1.props.join(\",\"))) return \"\";\n    }\n    return qt(n = An(e1.children, o)) ? e1.return = e1.value + \"{\" + n + \"}\" : \"\";\n}\nfunction Cn(e1, t, n, o) {\n    if (e1.length > -1 && !e1.return) switch(e1.type){\n        case Vt:\n            return void (e1.return = Tn(e1.value, e1.length, n));\n        case _t:\n            return An([\n                sn(e1, {\n                    value: Ut(e1.value, \"@\", \"@\" + jt)\n                })\n            ], o);\n        case Lt:\n            if (e1.length) return function(e1, t) {\n                return e1.map(t).join(\"\");\n            }(n = e1.props, function(t) {\n                switch(Wt(t, o = /(::plac\\w+|:read-\\w+)/)){\n                    case \":read-only\":\n                    case \":read-write\":\n                        ln(sn(e1, {\n                            props: [\n                                Ut(t, /:(read-\\w+)/, \":\" + Bt + \"$1\")\n                            ]\n                        })), ln(sn(e1, {\n                            props: [\n                                t\n                            ]\n                        })), Ht(e1, {\n                            props: Jt(n, o)\n                        });\n                        break;\n                    case \"::placeholder\":\n                        ln(sn(e1, {\n                            props: [\n                                Ut(t, /:(plac\\w+)/, \":\" + jt + \"input-$1\")\n                            ]\n                        })), ln(sn(e1, {\n                            props: [\n                                Ut(t, /:(plac\\w+)/, \":\" + Bt + \"$1\")\n                            ]\n                        })), ln(sn(e1, {\n                            props: [\n                                Ut(t, /:(plac\\w+)/, Ot + \"input-$1\")\n                            ]\n                        })), ln(sn(e1, {\n                            props: [\n                                t\n                            ]\n                        })), Ht(e1, {\n                            props: Jt(n, o)\n                        });\n                }\n                return \"\";\n            });\n    }\n}\nvar Mn = {\n    animationIterationCount: 1,\n    borderImageOutset: 1,\n    borderImageSlice: 1,\n    borderImageWidth: 1,\n    boxFlex: 1,\n    boxFlexGroup: 1,\n    boxOrdinalGroup: 1,\n    columnCount: 1,\n    columns: 1,\n    flex: 1,\n    flexGrow: 1,\n    flexPositive: 1,\n    flexShrink: 1,\n    flexNegative: 1,\n    flexOrder: 1,\n    gridRow: 1,\n    gridRowEnd: 1,\n    gridRowSpan: 1,\n    gridRowStart: 1,\n    gridColumn: 1,\n    gridColumnEnd: 1,\n    gridColumnSpan: 1,\n    gridColumnStart: 1,\n    msGridRow: 1,\n    msGridRowSpan: 1,\n    msGridColumn: 1,\n    msGridColumnSpan: 1,\n    fontWeight: 1,\n    lineHeight: 1,\n    opacity: 1,\n    order: 1,\n    orphans: 1,\n    tabSize: 1,\n    widows: 1,\n    zIndex: 1,\n    zoom: 1,\n    WebkitLineClamp: 1,\n    fillOpacity: 1,\n    floodOpacity: 1,\n    stopOpacity: 1,\n    strokeDasharray: 1,\n    strokeDashoffset: 1,\n    strokeMiterlimit: 1,\n    strokeOpacity: 1,\n    strokeWidth: 1\n}, On = \"undefined\" != typeof process && void 0 !== process.env && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || \"data-styled\", Bn = \"active\", jn = \"data-styled-version\", zn = \"6.1.8\", Ln = \"/*!sc*/\\n\", Vn =  false && 0, Dn = Boolean(\"boolean\" == typeof SC_DISABLE_SPEEDY ? SC_DISABLE_SPEEDY : \"undefined\" != typeof process && void 0 !== process.env && void 0 !== process.env.REACT_APP_SC_DISABLE_SPEEDY && \"\" !== process.env.REACT_APP_SC_DISABLE_SPEEDY ? \"false\" !== process.env.REACT_APP_SC_DISABLE_SPEEDY && process.env.REACT_APP_SC_DISABLE_SPEEDY : \"undefined\" != typeof process && void 0 !== process.env && void 0 !== process.env.SC_DISABLE_SPEEDY && \"\" !== process.env.SC_DISABLE_SPEEDY && \"false\" !== process.env.SC_DISABLE_SPEEDY && process.env.SC_DISABLE_SPEEDY), _n = Object.freeze([]), $n = Object.freeze({});\nvar Fn = new Set([\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"use\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"marker\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n]), In = /[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g, Hn = /(^-|-$)/g;\nfunction Nn(e1) {\n    return e1.replace(In, \"-\").replace(Hn, \"\");\n}\nvar Wn = /(a)(d)/gi, Un = 52, Yn = function(e1) {\n    return String.fromCharCode(e1 + (e1 > 25 ? 39 : 97));\n};\nfunction Gn(e1) {\n    var t, n = \"\";\n    for(t = Math.abs(e1); t > Un; t = t / Un | 0)n = Yn(t % Un) + n;\n    return (Yn(t % Un) + n).replace(Wn, \"$1-$2\");\n}\nvar Xn, qn = function(e1, t) {\n    for(var n = t.length; n;)e1 = 33 * e1 ^ t.charCodeAt(--n);\n    return e1;\n}, Kn = function(e1) {\n    return qn(5381, e1);\n};\nfunction Zn(e1) {\n    return Gn(Kn(e1) >>> 0);\n}\nfunction Jn(e1) {\n    return \"string\" == typeof e1 && !0;\n}\nvar Qn = \"function\" == typeof Symbol && Symbol.for, eo = Qn ? Symbol.for(\"react.memo\") : 60115, to = Qn ? Symbol.for(\"react.forward_ref\") : 60112, no = {\n    childContextTypes: !0,\n    contextType: !0,\n    contextTypes: !0,\n    defaultProps: !0,\n    displayName: !0,\n    getDefaultProps: !0,\n    getDerivedStateFromError: !0,\n    getDerivedStateFromProps: !0,\n    mixins: !0,\n    propTypes: !0,\n    type: !0\n}, oo = {\n    name: !0,\n    length: !0,\n    prototype: !0,\n    caller: !0,\n    callee: !0,\n    arguments: !0,\n    arity: !0\n}, ro = {\n    $$typeof: !0,\n    compare: !0,\n    defaultProps: !0,\n    displayName: !0,\n    propTypes: !0,\n    type: !0\n}, io = ((Xn = {})[to] = {\n    $$typeof: !0,\n    render: !0,\n    defaultProps: !0,\n    displayName: !0,\n    propTypes: !0\n}, Xn[eo] = ro, Xn);\nfunction ao(e1) {\n    return (\"type\" in (t = e1) && t.type.$$typeof) === eo ? ro : \"$$typeof\" in e1 ? io[e1.$$typeof] : no;\n    var t;\n}\nvar so = Object.defineProperty, lo = Object.getOwnPropertyNames, co = Object.getOwnPropertySymbols, uo = Object.getOwnPropertyDescriptor, ho = Object.getPrototypeOf, fo = Object.prototype;\nfunction po(e1, t, n) {\n    if (\"string\" != typeof t) {\n        if (fo) {\n            var o = ho(t);\n            o && o !== fo && po(e1, o, n);\n        }\n        var r = lo(t);\n        co && (r = r.concat(co(t)));\n        for(var i = ao(e1), a = ao(t), s = 0; s < r.length; ++s){\n            var l = r[s];\n            if (!(l in oo || n && n[l] || a && l in a || i && l in i)) {\n                var c = uo(t, l);\n                try {\n                    so(e1, l, c);\n                } catch (e1) {}\n            }\n        }\n    }\n    return e1;\n}\nfunction go(e1) {\n    return \"function\" == typeof e1;\n}\nfunction mo(e1) {\n    return \"object\" == typeof e1 && \"styledComponentId\" in e1;\n}\nfunction vo(e1, t) {\n    return e1 && t ? \"\".concat(e1, \" \").concat(t) : e1 || t || \"\";\n}\nfunction bo(e1, t) {\n    if (0 === e1.length) return \"\";\n    for(var n = e1[0], o = 1; o < e1.length; o++)n += t ? t + e1[o] : e1[o];\n    return n;\n}\nfunction yo(e1) {\n    return null !== e1 && \"object\" == typeof e1 && e1.constructor.name === Object.name && !(\"props\" in e1 && e1.$$typeof);\n}\nfunction wo(e1, t, n) {\n    if (void 0 === n && (n = !1), !n && !yo(e1) && !Array.isArray(e1)) return t;\n    if (Array.isArray(t)) for(var o = 0; o < t.length; o++)e1[o] = wo(e1[o], t[o]);\n    else if (yo(t)) for(var o in t)e1[o] = wo(e1[o], t[o]);\n    return e1;\n}\nfunction xo(e1, t) {\n    Object.defineProperty(e1, \"toString\", {\n        value: t\n    });\n}\nfunction ko(e1) {\n    for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];\n    return new Error(\"An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#\".concat(e1, \" for more information.\").concat(t.length > 0 ? \" Args: \".concat(t.join(\", \")) : \"\"));\n}\nvar So = function() {\n    function e1(e1) {\n        this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e1;\n    }\n    return e1.prototype.indexOfGroup = function(e1) {\n        for(var t = 0, n = 0; n < e1; n++)t += this.groupSizes[n];\n        return t;\n    }, e1.prototype.insertRules = function(e1, t) {\n        if (e1 >= this.groupSizes.length) {\n            for(var n = this.groupSizes, o = n.length, r = o; e1 >= r;)if ((r <<= 1) < 0) throw ko(16, \"\".concat(e1));\n            this.groupSizes = new Uint32Array(r), this.groupSizes.set(n), this.length = r;\n            for(var i = o; i < r; i++)this.groupSizes[i] = 0;\n        }\n        for(var a = this.indexOfGroup(e1 + 1), s = (i = 0, t.length); i < s; i++)this.tag.insertRule(a, t[i]) && (this.groupSizes[e1]++, a++);\n    }, e1.prototype.clearGroup = function(e1) {\n        if (e1 < this.length) {\n            var t = this.groupSizes[e1], n = this.indexOfGroup(e1), o = n + t;\n            this.groupSizes[e1] = 0;\n            for(var r = n; r < o; r++)this.tag.deleteRule(n);\n        }\n    }, e1.prototype.getGroup = function(e1) {\n        var t = \"\";\n        if (e1 >= this.length || 0 === this.groupSizes[e1]) return t;\n        for(var n = this.groupSizes[e1], o = this.indexOfGroup(e1), r = o + n, i = o; i < r; i++)t += \"\".concat(this.tag.getRule(i)).concat(Ln);\n        return t;\n    }, e1;\n}(), Po = new Map, Eo = new Map, To = 1, Ao = function(e1) {\n    if (Po.has(e1)) return Po.get(e1);\n    for(; Eo.has(To);)To++;\n    var t = To++;\n    return Po.set(e1, t), Eo.set(t, e1), t;\n}, Ro = function(e1, t) {\n    To = t + 1, Po.set(e1, t), Eo.set(t, e1);\n}, Co = \"style[\".concat(On, \"][\").concat(jn, '=\"').concat(zn, '\"]'), Mo = new RegExp(\"^\".concat(On, '\\\\.g(\\\\d+)\\\\[id=\"([\\\\w\\\\d-]+)\"\\\\].*?\"([^\"]*)')), Oo = function(e1, t, n) {\n    for(var o, r = n.split(\",\"), i = 0, a = r.length; i < a; i++)(o = r[i]) && e1.registerName(t, o);\n}, Bo = function(e1, t) {\n    for(var n, o = (null !== (n = t.textContent) && void 0 !== n ? n : \"\").split(Ln), r = [], i = 0, a = o.length; i < a; i++){\n        var s = o[i].trim();\n        if (s) {\n            var l = s.match(Mo);\n            if (l) {\n                var c = 0 | parseInt(l[1], 10), u = l[2];\n                0 !== c && (Ro(u, c), Oo(e1, u, l[3]), e1.getTag().insertRules(c, r)), r.length = 0;\n            } else r.push(s);\n        }\n    }\n};\nvar jo = function(e1) {\n    var t = document.head, n = e1 || t, o = document.createElement(\"style\"), r = function(e1) {\n        var t = Array.from(e1.querySelectorAll(\"style[\".concat(On, \"]\")));\n        return t[t.length - 1];\n    }(n), i = void 0 !== r ? r.nextSibling : null;\n    o.setAttribute(On, Bn), o.setAttribute(jn, zn);\n    var a =  true ? __webpack_require__.nc : 0;\n    return a && o.setAttribute(\"nonce\", a), n.insertBefore(o, i), o;\n}, zo = function() {\n    function e1(e1) {\n        this.element = jo(e1), this.element.appendChild(document.createTextNode(\"\")), this.sheet = function(e1) {\n            if (e1.sheet) return e1.sheet;\n            for(var t = document.styleSheets, n = 0, o = t.length; n < o; n++){\n                var r = t[n];\n                if (r.ownerNode === e1) return r;\n            }\n            throw ko(17);\n        }(this.element), this.length = 0;\n    }\n    return e1.prototype.insertRule = function(e1, t) {\n        try {\n            return this.sheet.insertRule(t, e1), this.length++, !0;\n        } catch (e1) {\n            return !1;\n        }\n    }, e1.prototype.deleteRule = function(e1) {\n        this.sheet.deleteRule(e1), this.length--;\n    }, e1.prototype.getRule = function(e1) {\n        var t = this.sheet.cssRules[e1];\n        return t && t.cssText ? t.cssText : \"\";\n    }, e1;\n}(), Lo = function() {\n    function e1(e1) {\n        this.element = jo(e1), this.nodes = this.element.childNodes, this.length = 0;\n    }\n    return e1.prototype.insertRule = function(e1, t) {\n        if (e1 <= this.length && e1 >= 0) {\n            var n = document.createTextNode(t);\n            return this.element.insertBefore(n, this.nodes[e1] || null), this.length++, !0;\n        }\n        return !1;\n    }, e1.prototype.deleteRule = function(e1) {\n        this.element.removeChild(this.nodes[e1]), this.length--;\n    }, e1.prototype.getRule = function(e1) {\n        return e1 < this.length ? this.nodes[e1].textContent : \"\";\n    }, e1;\n}(), Vo = function() {\n    function e1(e1) {\n        this.rules = [], this.length = 0;\n    }\n    return e1.prototype.insertRule = function(e1, t) {\n        return e1 <= this.length && (this.rules.splice(e1, 0, t), this.length++, !0);\n    }, e1.prototype.deleteRule = function(e1) {\n        this.rules.splice(e1, 1), this.length--;\n    }, e1.prototype.getRule = function(e1) {\n        return e1 < this.length ? this.rules[e1] : \"\";\n    }, e1;\n}(), Do = Vn, _o = {\n    isServer: !Vn,\n    useCSSOMInjection: !Dn\n}, $o = function() {\n    function e1(e1, t, n) {\n        void 0 === e1 && (e1 = $n), void 0 === t && (t = {});\n        var o = this;\n        this.options = Ct(Ct({}, _o), e1), this.gs = t, this.names = new Map(n), this.server = !!e1.isServer, !this.server && Vn && Do && (Do = !1, function(e1) {\n            for(var t = document.querySelectorAll(Co), n = 0, o = t.length; n < o; n++){\n                var r = t[n];\n                r && r.getAttribute(On) !== Bn && (Bo(e1, r), r.parentNode && r.parentNode.removeChild(r));\n            }\n        }(this)), xo(this, function() {\n            return function(e1) {\n                for(var t = e1.getTag(), n = t.length, o = \"\", r = function(n) {\n                    var r = function(e1) {\n                        return Eo.get(e1);\n                    }(n);\n                    if (void 0 === r) return \"continue\";\n                    var i = e1.names.get(r), a = t.getGroup(n);\n                    if (void 0 === i || 0 === a.length) return \"continue\";\n                    var s = \"\".concat(On, \".g\").concat(n, '[id=\"').concat(r, '\"]'), l = \"\";\n                    void 0 !== i && i.forEach(function(e1) {\n                        e1.length > 0 && (l += \"\".concat(e1, \",\"));\n                    }), o += \"\".concat(a).concat(s, '{content:\"').concat(l, '\"}').concat(Ln);\n                }, i = 0; i < n; i++)r(i);\n                return o;\n            }(o);\n        });\n    }\n    return e1.registerId = function(e1) {\n        return Ao(e1);\n    }, e1.prototype.reconstructWithOptions = function(t, n) {\n        return void 0 === n && (n = !0), new e1(Ct(Ct({}, this.options), t), this.gs, n && this.names || void 0);\n    }, e1.prototype.allocateGSInstance = function(e1) {\n        return this.gs[e1] = (this.gs[e1] || 0) + 1;\n    }, e1.prototype.getTag = function() {\n        return this.tag || (this.tag = (e1 = function(e1) {\n            var t = e1.useCSSOMInjection, n = e1.target;\n            return e1.isServer ? new Vo(n) : t ? new zo(n) : new Lo(n);\n        }(this.options), new So(e1)));\n        var e1;\n    }, e1.prototype.hasNameForId = function(e1, t) {\n        return this.names.has(e1) && this.names.get(e1).has(t);\n    }, e1.prototype.registerName = function(e1, t) {\n        if (Ao(e1), this.names.has(e1)) this.names.get(e1).add(t);\n        else {\n            var n = new Set;\n            n.add(t), this.names.set(e1, n);\n        }\n    }, e1.prototype.insertRules = function(e1, t, n) {\n        this.registerName(e1, t), this.getTag().insertRules(Ao(e1), n);\n    }, e1.prototype.clearNames = function(e1) {\n        this.names.has(e1) && this.names.get(e1).clear();\n    }, e1.prototype.clearRules = function(e1) {\n        this.getTag().clearGroup(Ao(e1)), this.clearNames(e1);\n    }, e1.prototype.clearTag = function() {\n        this.tag = void 0;\n    }, e1;\n}(), Fo = /&/g, Io = /^\\s*\\/\\/.*$/gm;\nfunction Ho(e1, t) {\n    return e1.map(function(e1) {\n        return \"rule\" === e1.type && (e1.value = \"\".concat(t, \" \").concat(e1.value), e1.value = e1.value.replaceAll(\",\", \",\".concat(t, \" \")), e1.props = e1.props.map(function(e1) {\n            return \"\".concat(t, \" \").concat(e1);\n        })), Array.isArray(e1.children) && \"@keyframes\" !== e1.type && (e1.children = Ho(e1.children, t)), e1;\n    });\n}\nvar No = new $o, Wo = function(e1) {\n    var t, n, o, r = void 0 === e1 ? $n : e1, i = r.options, a = void 0 === i ? $n : i, s = r.plugins, l = void 0 === s ? _n : s, c = function(e1, o, r) {\n        return r.startsWith(n) && r.endsWith(n) && r.replaceAll(n, \"\").length > 0 ? \".\".concat(t) : e1;\n    }, u = l.slice();\n    u.push(function(e1) {\n        e1.type === Lt && e1.value.includes(\"&\") && (e1.props[0] = e1.props[0].replace(Fo, n).replace(o, c));\n    }), a.prefix && u.push(Cn), u.push(Rn);\n    var d = function(e1, r, i, s) {\n        void 0 === r && (r = \"\"), void 0 === i && (i = \"\"), void 0 === s && (s = \"&\"), t = s, n = r, o = new RegExp(\"\\\\\".concat(n, \"\\\\b\"), \"g\");\n        var l = e1.replace(Io, \"\"), c = xn(i || r ? \"\".concat(i, \" \").concat(r, \" { \").concat(l, \" }\") : l);\n        a.namespace && (c = Ho(c, a.namespace));\n        var d, h = [];\n        return An(c, function(e1) {\n            var t = Kt(e1);\n            return function(n, o, r, i) {\n                for(var a = \"\", s = 0; s < t; s++)a += e1[s](n, o, r, i) || \"\";\n                return a;\n            };\n        }(u.concat((d = function(e1) {\n            return h.push(e1);\n        }, function(e1) {\n            e1.root || (e1 = e1.return) && d(e1);\n        })))), h;\n    };\n    return d.hash = l.length ? l.reduce(function(e1, t) {\n        return t.name || ko(15), qn(e1, t.name);\n    }, 5381).toString() : \"\", d;\n}(), Uo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    shouldForwardProp: void 0,\n    styleSheet: No,\n    stylis: Wo\n});\nfunction Yo() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Uo);\n}\n/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nvar Go = function() {\n    function e1(e1, t) {\n        var n = this;\n        this.inject = function(e1, t) {\n            void 0 === t && (t = Wo);\n            var o = n.name + t.hash;\n            e1.hasNameForId(n.id, o) || e1.insertRules(n.id, o, t(n.rules, o, \"@keyframes\"));\n        }, this.name = e1, this.id = \"sc-keyframes-\".concat(e1), this.rules = t, xo(this, function() {\n            throw ko(12, String(n.name));\n        });\n    }\n    return e1.prototype.getName = function(e1) {\n        return void 0 === e1 && (e1 = Wo), this.name + e1.hash;\n    }, e1;\n}(), Xo = function(e1) {\n    return e1 >= \"A\" && e1 <= \"Z\";\n};\nfunction qo(e1) {\n    for(var t = \"\", n = 0; n < e1.length; n++){\n        var o = e1[n];\n        if (1 === n && \"-\" === o && \"-\" === e1[0]) return e1;\n        Xo(o) ? t += \"-\" + o.toLowerCase() : t += o;\n    }\n    return t.startsWith(\"ms-\") ? \"-\" + t : t;\n}\nvar Ko = function(e1) {\n    return null == e1 || !1 === e1 || \"\" === e1;\n}, Zo = function(e1) {\n    var t, n, o = [];\n    for(var r in e1){\n        var i = e1[r];\n        e1.hasOwnProperty(r) && !Ko(i) && (Array.isArray(i) && i.isCss || go(i) ? o.push(\"\".concat(qo(r), \":\"), i, \";\") : yo(i) ? o.push.apply(o, Mt(Mt([\n            \"\".concat(r, \" {\")\n        ], Zo(i), !1), [\n            \"}\"\n        ], !1)) : o.push(\"\".concat(qo(r), \": \").concat((t = r, null == (n = i) || \"boolean\" == typeof n || \"\" === n ? \"\" : \"number\" != typeof n || 0 === n || t in Mn || t.startsWith(\"--\") ? String(n).trim() : \"\".concat(n, \"px\")), \";\")));\n    }\n    return o;\n};\nfunction Jo(e1, t, n, o) {\n    return Ko(e1) ? [] : mo(e1) ? [\n        \".\".concat(e1.styledComponentId)\n    ] : go(e1) ? !go(r = e1) || r.prototype && r.prototype.isReactComponent || !t ? [\n        e1\n    ] : Jo(e1(t), t, n, o) : e1 instanceof Go ? n ? (e1.inject(n, o), [\n        e1.getName(o)\n    ]) : [\n        e1\n    ] : yo(e1) ? Zo(e1) : Array.isArray(e1) ? Array.prototype.concat.apply(_n, e1.map(function(e1) {\n        return Jo(e1, t, n, o);\n    })) : [\n        e1.toString()\n    ];\n    var r;\n}\nvar Qo = Kn(zn), er = function() {\n    function e1(e1, t, n) {\n        this.rules = e1, this.staticRulesId = \"\", this.isStatic = (void 0 === n || n.isStatic) && function(e1) {\n            for(var t = 0; t < e1.length; t += 1){\n                var n = e1[t];\n                if (go(n) && !mo(n)) return !1;\n            }\n            return !0;\n        }(e1), this.componentId = t, this.baseHash = qn(Qo, t), this.baseStyle = n, $o.registerId(t);\n    }\n    return e1.prototype.generateAndInjectStyles = function(e1, t, n) {\n        var o = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e1, t, n) : \"\";\n        if (this.isStatic && !n.hash) if (this.staticRulesId && t.hasNameForId(this.componentId, this.staticRulesId)) o = vo(o, this.staticRulesId);\n        else {\n            var r = bo(Jo(this.rules, e1, t, n)), i = Gn(qn(this.baseHash, r) >>> 0);\n            if (!t.hasNameForId(this.componentId, i)) {\n                var a = n(r, \".\".concat(i), void 0, this.componentId);\n                t.insertRules(this.componentId, i, a);\n            }\n            o = vo(o, i), this.staticRulesId = i;\n        }\n        else {\n            for(var s = qn(this.baseHash, n.hash), l = \"\", c = 0; c < this.rules.length; c++){\n                var u = this.rules[c];\n                if (\"string\" == typeof u) l += u;\n                else if (u) {\n                    var d = bo(Jo(u, e1, t, n));\n                    s = qn(s, d + c), l += d;\n                }\n            }\n            if (l) {\n                var h = Gn(s >>> 0);\n                t.hasNameForId(this.componentId, h) || t.insertRules(this.componentId, h, n(l, \".\".concat(h), void 0, this.componentId)), o = vo(o, h);\n            }\n        }\n        return o;\n    }, e1;\n}(), tr = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction nr(e1) {\n    var t = react__WEBPACK_IMPORTED_MODULE_1__.useContext(tr), n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n        return function(e1, t) {\n            if (!e1) throw ko(14);\n            if (go(e1)) return e1(t);\n            if (Array.isArray(e1) || \"object\" != typeof e1) throw ko(8);\n            return t ? Ct(Ct({}, t), e1) : e1;\n        }(e1.theme, t);\n    }, [\n        e1.theme,\n        t\n    ]);\n    return e1.children ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(tr.Provider, {\n        value: n\n    }, e1.children) : null;\n}\nvar or = {};\nnew Set;\nfunction rr(e1, t, n) {\n    var o = mo(e1), i = e1, a = !Jn(e1), l = t.attrs, c = void 0 === l ? _n : l, u = t.componentId, d = void 0 === u ? function(e1, t) {\n        var n = \"string\" != typeof e1 ? \"sc\" : Nn(e1);\n        or[n] = (or[n] || 0) + 1;\n        var o = \"\".concat(n, \"-\").concat(Zn(zn + n + or[n]));\n        return t ? \"\".concat(t, \"-\").concat(o) : o;\n    }(t.displayName, t.parentComponentId) : u, h = t.displayName, f = void 0 === h ? function(e1) {\n        return Jn(e1) ? \"styled.\".concat(e1) : \"Styled(\".concat(function(e1) {\n            return e1.displayName || e1.name || \"Component\";\n        }(e1), \")\");\n    }(e1) : h, p = t.displayName && t.componentId ? \"\".concat(Nn(t.displayName), \"-\").concat(t.componentId) : t.componentId || d, g = o && i.attrs ? i.attrs.concat(c).filter(Boolean) : c, m = t.shouldForwardProp;\n    if (o && i.shouldForwardProp) {\n        var v = i.shouldForwardProp;\n        if (t.shouldForwardProp) {\n            var b = t.shouldForwardProp;\n            m = function(e1, t) {\n                return v(e1, t) && b(e1, t);\n            };\n        } else m = v;\n    }\n    var y = new er(n, p, o ? i.componentStyle : void 0);\n    function w(e1, t) {\n        return function(e1, t, n) {\n            var o = e1.attrs, i = e1.componentStyle, a = e1.defaultProps, l = e1.foldedComponentIds, c = e1.styledComponentId, u = e1.target, d = react__WEBPACK_IMPORTED_MODULE_1__.useContext(tr), h = Yo(), f = e1.shouldForwardProp || h.shouldForwardProp, p = function(e1, t, n) {\n                return void 0 === n && (n = $n), e1.theme !== n.theme && e1.theme || t || n.theme;\n            }(t, d, a) || $n, g = function(e1, t, n) {\n                for(var o, r = Ct(Ct({}, t), {\n                    className: void 0,\n                    theme: n\n                }), i = 0; i < e1.length; i += 1){\n                    var a = go(o = e1[i]) ? o(r) : o;\n                    for(var s in a)r[s] = \"className\" === s ? vo(r[s], a[s]) : \"style\" === s ? Ct(Ct({}, r[s]), a[s]) : a[s];\n                }\n                return t.className && (r.className = vo(r.className, t.className)), r;\n            }(o, t, p), m = g.as || u, v = {};\n            for(var b in g)void 0 === g[b] || \"$\" === b[0] || \"as\" === b || \"theme\" === b && g.theme === p || (\"forwardedAs\" === b ? v.as = g.forwardedAs : f && !f(b, m) || (v[b] = g[b]));\n            var y = function(e1, t) {\n                var n = Yo();\n                return e1.generateAndInjectStyles(t, n.styleSheet, n.stylis);\n            }(i, g), w = vo(l, c);\n            return y && (w += \" \" + y), g.className && (w += \" \" + g.className), v[Jn(m) && !Fn.has(m) ? \"class\" : \"className\"] = w, v.ref = n, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(m, v);\n        }(x, e1, t);\n    }\n    w.displayName = f;\n    var x = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(w);\n    return x.attrs = g, x.componentStyle = y, x.displayName = f, x.shouldForwardProp = m, x.foldedComponentIds = o ? vo(i.foldedComponentIds, i.styledComponentId) : \"\", x.styledComponentId = p, x.target = o ? i.target : e1, Object.defineProperty(x, \"defaultProps\", {\n        get: function() {\n            return this._foldedDefaultProps;\n        },\n        set: function(e1) {\n            this._foldedDefaultProps = o ? function(e1) {\n                for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];\n                for(var o = 0, r = t; o < r.length; o++)wo(e1, r[o], !0);\n                return e1;\n            }({}, i.defaultProps, e1) : e1;\n        }\n    }), xo(x, function() {\n        return \".\".concat(x.styledComponentId);\n    }), a && po(x, e1, {\n        attrs: !0,\n        componentStyle: !0,\n        displayName: !0,\n        foldedComponentIds: !0,\n        shouldForwardProp: !0,\n        styledComponentId: !0,\n        target: !0\n    }), x;\n}\nfunction ir(e1, t) {\n    for(var n = [\n        e1[0]\n    ], o = 0, r = t.length; o < r; o += 1)n.push(t[o], e1[o + 1]);\n    return n;\n}\nvar ar = function(e1) {\n    return Object.assign(e1, {\n        isCss: !0\n    });\n};\nfunction sr(e1) {\n    for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];\n    if (go(e1) || yo(e1)) return ar(Jo(ir(_n, Mt([\n        e1\n    ], t, !0))));\n    var o = e1;\n    return 0 === t.length && 1 === o.length && \"string\" == typeof o[0] ? Jo(o) : ar(Jo(ir(o, t)));\n}\nfunction lr(e1, t, n) {\n    if (void 0 === n && (n = $n), !t) throw ko(1, t);\n    var o = function(o) {\n        for(var r = [], i = 1; i < arguments.length; i++)r[i - 1] = arguments[i];\n        return e1(t, n, sr.apply(void 0, Mt([\n            o\n        ], r, !1)));\n    };\n    return o.attrs = function(o) {\n        return lr(e1, t, Ct(Ct({}, n), {\n            attrs: Array.prototype.concat(n.attrs, o).filter(Boolean)\n        }));\n    }, o.withConfig = function(o) {\n        return lr(e1, t, Ct(Ct({}, n), o));\n    }, o;\n}\nvar cr = function(e1) {\n    return lr(rr, e1);\n}, ur = cr;\nfunction dr(e1) {\n    for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];\n    var o = bo(sr.apply(void 0, Mt([\n        e1\n    ], t, !1))), r = Zn(o);\n    return new Go(r, o);\n}\nFn.forEach(function(e1) {\n    ur[e1] = cr(e1);\n});\nconst hr = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"svg\", {\n        \"data-sanity-icon\": \"spinner\",\n        width: \"1em\",\n        height: \"1em\",\n        viewBox: \"0 0 25 25\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ref: n,\n        ...t,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"path\", {\n            d: \"M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5\",\n            stroke: \"currentColor\",\n            strokeWidth: 1.2,\n            strokeLinejoin: \"round\"\n        })\n    });\n}), fr = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\"\n], pr = Math.min, gr = Math.max, mr = Math.round, vr = Math.floor, br = (e1)=>({\n        x: e1,\n        y: e1\n    }), yr = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n}, wr = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction xr(e1, t, n) {\n    return gr(e1, pr(t, n));\n}\nfunction kr(e1, t) {\n    return \"function\" == typeof e1 ? e1(t) : e1;\n}\nfunction Sr(e1) {\n    return e1.split(\"-\")[0];\n}\nfunction Pr(e1) {\n    return e1.split(\"-\")[1];\n}\nfunction Er(e1) {\n    return \"x\" === e1 ? \"y\" : \"x\";\n}\nfunction Tr(e1) {\n    return \"y\" === e1 ? \"height\" : \"width\";\n}\nfunction Ar(e1) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].includes(Sr(e1)) ? \"y\" : \"x\";\n}\nfunction Rr(e1) {\n    return Er(Ar(e1));\n}\nfunction Cr(e1) {\n    return e1.replace(/start|end/g, (e1)=>wr[e1]);\n}\nfunction Mr(e1) {\n    return e1.replace(/left|right|bottom|top/g, (e1)=>yr[e1]);\n}\nfunction Or(e1) {\n    return \"number\" != typeof e1 ? function(e1) {\n        return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            ...e1\n        };\n    }(e1) : {\n        top: e1,\n        right: e1,\n        bottom: e1,\n        left: e1\n    };\n}\nfunction Br(e1) {\n    return {\n        ...e1,\n        top: e1.y,\n        left: e1.x,\n        right: e1.x + e1.width,\n        bottom: e1.y + e1.height\n    };\n}\nfunction jr(e1, t, n) {\n    let { reference: o, floating: r } = e1;\n    const i = Ar(t), a = Rr(t), s = Tr(a), l = Sr(t), c = \"y\" === i, u = o.x + o.width / 2 - r.width / 2, d = o.y + o.height / 2 - r.height / 2, h = o[s] / 2 - r[s] / 2;\n    let f;\n    switch(l){\n        case \"top\":\n            f = {\n                x: u,\n                y: o.y - r.height\n            };\n            break;\n        case \"bottom\":\n            f = {\n                x: u,\n                y: o.y + o.height\n            };\n            break;\n        case \"right\":\n            f = {\n                x: o.x + o.width,\n                y: d\n            };\n            break;\n        case \"left\":\n            f = {\n                x: o.x - r.width,\n                y: d\n            };\n            break;\n        default:\n            f = {\n                x: o.x,\n                y: o.y\n            };\n    }\n    switch(Pr(t)){\n        case \"start\":\n            f[a] -= h * (n && c ? -1 : 1);\n            break;\n        case \"end\":\n            f[a] += h * (n && c ? -1 : 1);\n    }\n    return f;\n}\nasync function zr(e1, t) {\n    var n;\n    void 0 === t && (t = {});\n    const { x: o, y: r, platform: i, rects: a, elements: s, strategy: l } = e1, { boundary: c = \"clippingAncestors\", rootBoundary: u = \"viewport\", elementContext: d = \"floating\", altBoundary: h = !1, padding: f = 0 } = kr(t, e1), p = Or(f), g = s[h ? \"floating\" === d ? \"reference\" : \"floating\" : d], m = Br(await i.getClippingRect({\n        element: null == (n = await (null == i.isElement ? void 0 : i.isElement(g))) || n ? g : g.contextElement || await (null == i.getDocumentElement ? void 0 : i.getDocumentElement(s.floating)),\n        boundary: c,\n        rootBoundary: u,\n        strategy: l\n    })), v = \"floating\" === d ? {\n        ...a.floating,\n        x: o,\n        y: r\n    } : a.reference, b = await (null == i.getOffsetParent ? void 0 : i.getOffsetParent(s.floating)), y = await (null == i.isElement ? void 0 : i.isElement(b)) && await (null == i.getScale ? void 0 : i.getScale(b)) || {\n        x: 1,\n        y: 1\n    }, w = Br(i.convertOffsetParentRelativeRectToViewportRelativeRect ? await i.convertOffsetParentRelativeRectToViewportRelativeRect({\n        elements: s,\n        rect: v,\n        offsetParent: b,\n        strategy: l\n    }) : v);\n    return {\n        top: (m.top - w.top + p.top) / y.y,\n        bottom: (w.bottom - m.bottom + p.bottom) / y.y,\n        left: (m.left - w.left + p.left) / y.x,\n        right: (w.right - m.right + p.right) / y.x\n    };\n}\nfunction Lr(e1, t) {\n    return {\n        top: e1.top - t.height,\n        right: e1.right - t.width,\n        bottom: e1.bottom - t.height,\n        left: e1.left - t.width\n    };\n}\nfunction Vr(e1) {\n    return fr.some((t)=>e1[t] >= 0);\n}\nconst Dr = function(e1) {\n    return void 0 === e1 && (e1 = 0), {\n        name: \"offset\",\n        options: e1,\n        async fn (t) {\n            var n, o;\n            const { x: r, y: i, placement: a, middlewareData: s } = t, l = await async function(e1, t) {\n                const { placement: n, platform: o, elements: r } = e1, i = await (null == o.isRTL ? void 0 : o.isRTL(r.floating)), a = Sr(n), s = Pr(n), l = \"y\" === Ar(n), c = [\n                    \"left\",\n                    \"top\"\n                ].includes(a) ? -1 : 1, u = i && l ? -1 : 1, d = kr(t, e1);\n                let { mainAxis: h, crossAxis: f, alignmentAxis: p } = \"number\" == typeof d ? {\n                    mainAxis: d,\n                    crossAxis: 0,\n                    alignmentAxis: null\n                } : {\n                    mainAxis: 0,\n                    crossAxis: 0,\n                    alignmentAxis: null,\n                    ...d\n                };\n                return s && \"number\" == typeof p && (f = \"end\" === s ? -1 * p : p), l ? {\n                    x: f * u,\n                    y: h * c\n                } : {\n                    x: h * c,\n                    y: f * u\n                };\n            }(t, e1);\n            return a === (null == (n = s.offset) ? void 0 : n.placement) && null != (o = s.arrow) && o.alignmentOffset ? {} : {\n                x: r + l.x,\n                y: i + l.y,\n                data: {\n                    ...l,\n                    placement: a\n                }\n            };\n        }\n    };\n};\nfunction _r(e1) {\n    return Ir(e1) ? (e1.nodeName || \"\").toLowerCase() : \"#document\";\n}\nfunction $r(e1) {\n    var t;\n    return (null == e1 || null == (t = e1.ownerDocument) ? void 0 : t.defaultView) || window;\n}\nfunction Fr(e1) {\n    var t;\n    return null == (t = (Ir(e1) ? e1.ownerDocument : e1.document) || window.document) ? void 0 : t.documentElement;\n}\nfunction Ir(e1) {\n    return e1 instanceof Node || e1 instanceof $r(e1).Node;\n}\nfunction Hr(e1) {\n    return e1 instanceof Element || e1 instanceof $r(e1).Element;\n}\nfunction Nr(e1) {\n    return e1 instanceof HTMLElement || e1 instanceof $r(e1).HTMLElement;\n}\nfunction Wr(e1) {\n    return \"undefined\" != typeof ShadowRoot && (e1 instanceof ShadowRoot || e1 instanceof $r(e1).ShadowRoot);\n}\nfunction Ur(e1) {\n    const { overflow: t, overflowX: n, overflowY: o, display: r } = Zr(e1);\n    return /auto|scroll|overlay|hidden|clip/.test(t + o + n) && ![\n        \"inline\",\n        \"contents\"\n    ].includes(r);\n}\nfunction Yr(e1) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].includes(_r(e1));\n}\nfunction Gr(e1) {\n    const t = qr(), n = Zr(e1);\n    return \"none\" !== n.transform || \"none\" !== n.perspective || !!n.containerType && \"normal\" !== n.containerType || !t && !!n.backdropFilter && \"none\" !== n.backdropFilter || !t && !!n.filter && \"none\" !== n.filter || [\n        \"transform\",\n        \"perspective\",\n        \"filter\"\n    ].some((e1)=>(n.willChange || \"\").includes(e1)) || [\n        \"paint\",\n        \"layout\",\n        \"strict\",\n        \"content\"\n    ].some((e1)=>(n.contain || \"\").includes(e1));\n}\nfunction Xr(e1) {\n    let t = Qr(e1);\n    for(; Nr(t) && !Kr(t);){\n        if (Gr(t)) return t;\n        t = Qr(t);\n    }\n    return null;\n}\nfunction qr() {\n    return !(\"undefined\" == typeof CSS || !CSS.supports) && CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nfunction Kr(e1) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].includes(_r(e1));\n}\nfunction Zr(e1) {\n    return $r(e1).getComputedStyle(e1);\n}\nfunction Jr(e1) {\n    return Hr(e1) ? {\n        scrollLeft: e1.scrollLeft,\n        scrollTop: e1.scrollTop\n    } : {\n        scrollLeft: e1.pageXOffset,\n        scrollTop: e1.pageYOffset\n    };\n}\nfunction Qr(e1) {\n    if (\"html\" === _r(e1)) return e1;\n    const t = e1.assignedSlot || e1.parentNode || Wr(e1) && e1.host || Fr(e1);\n    return Wr(t) ? t.host : t;\n}\nfunction ei(e1) {\n    const t = Qr(e1);\n    return Kr(t) ? e1.ownerDocument ? e1.ownerDocument.body : e1.body : Nr(t) && Ur(t) ? t : ei(t);\n}\nfunction ti(e1, t, n) {\n    var o;\n    void 0 === t && (t = []), void 0 === n && (n = !0);\n    const r = ei(e1), i = r === (null == (o = e1.ownerDocument) ? void 0 : o.body), a = $r(r);\n    return i ? t.concat(a, a.visualViewport || [], Ur(r) ? r : [], a.frameElement && n ? ti(a.frameElement) : []) : t.concat(r, ti(r, [], n));\n}\nfunction ni(e1) {\n    const t = Zr(e1);\n    let n = parseFloat(t.width) || 0, o = parseFloat(t.height) || 0;\n    const r = Nr(e1), i = r ? e1.offsetWidth : n, a = r ? e1.offsetHeight : o, s = mr(n) !== i || mr(o) !== a;\n    return s && (n = i, o = a), {\n        width: n,\n        height: o,\n        $: s\n    };\n}\nfunction oi(e1) {\n    return Hr(e1) ? e1 : e1.contextElement;\n}\nfunction ri(e1) {\n    const t = oi(e1);\n    if (!Nr(t)) return br(1);\n    const n = t.getBoundingClientRect(), { width: o, height: r, $: i } = ni(t);\n    let a = (i ? mr(n.width) : n.width) / o, s = (i ? mr(n.height) : n.height) / r;\n    return a && Number.isFinite(a) || (a = 1), s && Number.isFinite(s) || (s = 1), {\n        x: a,\n        y: s\n    };\n}\nconst ii = br(0);\nfunction ai(e1) {\n    const t = $r(e1);\n    return qr() && t.visualViewport ? {\n        x: t.visualViewport.offsetLeft,\n        y: t.visualViewport.offsetTop\n    } : ii;\n}\nfunction si(e1, t, n, o) {\n    void 0 === t && (t = !1), void 0 === n && (n = !1);\n    const r = e1.getBoundingClientRect(), i = oi(e1);\n    let a = br(1);\n    t && (o ? Hr(o) && (a = ri(o)) : a = ri(e1));\n    const s = function(e1, t, n) {\n        return void 0 === t && (t = !1), !(!n || t && n !== $r(e1)) && t;\n    }(i, n, o) ? ai(i) : br(0);\n    let l = (r.left + s.x) / a.x, c = (r.top + s.y) / a.y, u = r.width / a.x, d = r.height / a.y;\n    if (i) {\n        const e1 = $r(i), t = o && Hr(o) ? $r(o) : o;\n        let n = e1.frameElement;\n        for(; n && o && t !== e1;){\n            const e1 = ri(n), t = n.getBoundingClientRect(), o = Zr(n), r = t.left + (n.clientLeft + parseFloat(o.paddingLeft)) * e1.x, i = t.top + (n.clientTop + parseFloat(o.paddingTop)) * e1.y;\n            l *= e1.x, c *= e1.y, u *= e1.x, d *= e1.y, l += r, c += i, n = $r(n).frameElement;\n        }\n    }\n    return Br({\n        width: u,\n        height: d,\n        x: l,\n        y: c\n    });\n}\nconst li = [\n    \":popover-open\",\n    \":modal\"\n];\nfunction ci(e1) {\n    let t = !1, n = 0, o = 0;\n    if (li.forEach((n)=>{\n        !function(n) {\n            try {\n                t = t || e1.matches(n);\n            } catch (e1) {}\n        }(n);\n    }), t) {\n        const t = Xr(e1);\n        if (t) {\n            const e1 = t.getBoundingClientRect();\n            n = e1.x, o = e1.y;\n        }\n    }\n    return [\n        t,\n        n,\n        o\n    ];\n}\nfunction ui(e1) {\n    return si(Fr(e1)).left + Jr(e1).scrollLeft;\n}\nfunction di(e1, t, n) {\n    let o;\n    if (\"viewport\" === t) o = function(e1, t) {\n        const n = $r(e1), o = Fr(e1), r = n.visualViewport;\n        let i = o.clientWidth, a = o.clientHeight, s = 0, l = 0;\n        if (r) {\n            i = r.width, a = r.height;\n            const e1 = qr();\n            (!e1 || e1 && \"fixed\" === t) && (s = r.offsetLeft, l = r.offsetTop);\n        }\n        return {\n            width: i,\n            height: a,\n            x: s,\n            y: l\n        };\n    }(e1, n);\n    else if (\"document\" === t) o = function(e1) {\n        const t = Fr(e1), n = Jr(e1), o = e1.ownerDocument.body, r = gr(t.scrollWidth, t.clientWidth, o.scrollWidth, o.clientWidth), i = gr(t.scrollHeight, t.clientHeight, o.scrollHeight, o.clientHeight);\n        let a = -n.scrollLeft + ui(e1);\n        const s = -n.scrollTop;\n        return \"rtl\" === Zr(o).direction && (a += gr(t.clientWidth, o.clientWidth) - r), {\n            width: r,\n            height: i,\n            x: a,\n            y: s\n        };\n    }(Fr(e1));\n    else if (Hr(t)) o = function(e1, t) {\n        const n = si(e1, !0, \"fixed\" === t), o = n.top + e1.clientTop, r = n.left + e1.clientLeft, i = Nr(e1) ? ri(e1) : br(1);\n        return {\n            width: e1.clientWidth * i.x,\n            height: e1.clientHeight * i.y,\n            x: r * i.x,\n            y: o * i.y\n        };\n    }(t, n);\n    else {\n        const n = ai(e1);\n        o = {\n            ...t,\n            x: t.x - n.x,\n            y: t.y - n.y\n        };\n    }\n    return Br(o);\n}\nfunction hi(e1, t) {\n    const n = Qr(e1);\n    return !(n === t || !Hr(n) || Kr(n)) && (\"fixed\" === Zr(n).position || hi(n, t));\n}\nfunction fi(e1, t, n, o) {\n    const r = Nr(t), i = Fr(t), a = \"fixed\" === n, s = si(e1, !0, a, t);\n    let l = {\n        scrollLeft: 0,\n        scrollTop: 0\n    };\n    const c = br(0);\n    if (r || !r && !a) if ((\"body\" !== _r(t) || Ur(i)) && (l = Jr(t)), r) {\n        const e1 = si(t, !0, a, t);\n        c.x = e1.x + t.clientLeft, c.y = e1.y + t.clientTop;\n    } else i && (c.x = ui(i));\n    let u = s.left + l.scrollLeft - c.x, d = s.top + l.scrollTop - c.y;\n    const [h, f, p] = ci(o);\n    return h && (u += f, d += p, r && (u += t.clientLeft, d += t.clientTop)), {\n        x: u,\n        y: d,\n        width: s.width,\n        height: s.height\n    };\n}\nfunction pi(e1, t) {\n    return Nr(e1) && \"fixed\" !== Zr(e1).position ? t ? t(e1) : e1.offsetParent : null;\n}\nfunction gi(e1, t) {\n    const n = $r(e1);\n    if (!Nr(e1)) return n;\n    let o = pi(e1, t);\n    for(; o && Yr(o) && \"static\" === Zr(o).position;)o = pi(o, t);\n    return o && (\"html\" === _r(o) || \"body\" === _r(o) && \"static\" === Zr(o).position && !Gr(o)) ? n : o || Xr(e1) || n;\n}\nconst mi = {\n    convertOffsetParentRelativeRectToViewportRelativeRect: function(e1) {\n        let { elements: t, rect: n, offsetParent: o, strategy: r } = e1;\n        const i = Fr(o), [a] = t ? ci(t.floating) : [\n            !1\n        ];\n        if (o === i || a) return n;\n        let s = {\n            scrollLeft: 0,\n            scrollTop: 0\n        }, l = br(1);\n        const c = br(0), u = Nr(o);\n        if ((u || !u && \"fixed\" !== r) && ((\"body\" !== _r(o) || Ur(i)) && (s = Jr(o)), Nr(o))) {\n            const e1 = si(o);\n            l = ri(o), c.x = e1.x + o.clientLeft, c.y = e1.y + o.clientTop;\n        }\n        return {\n            width: n.width * l.x,\n            height: n.height * l.y,\n            x: n.x * l.x - s.scrollLeft * l.x + c.x,\n            y: n.y * l.y - s.scrollTop * l.y + c.y\n        };\n    },\n    getDocumentElement: Fr,\n    getClippingRect: function(e1) {\n        let { element: t, boundary: n, rootBoundary: o, strategy: r } = e1;\n        const i = \"clippingAncestors\" === n ? function(e1, t) {\n            const n = t.get(e1);\n            if (n) return n;\n            let o = ti(e1, [], !1).filter((e1)=>Hr(e1) && \"body\" !== _r(e1)), r = null;\n            const i = \"fixed\" === Zr(e1).position;\n            let a = i ? Qr(e1) : e1;\n            for(; Hr(a) && !Kr(a);){\n                const t = Zr(a), n = Gr(a);\n                n || \"fixed\" !== t.position || (r = null), (i ? !n && !r : !n && \"static\" === t.position && r && [\n                    \"absolute\",\n                    \"fixed\"\n                ].includes(r.position) || Ur(a) && !n && hi(e1, a)) ? o = o.filter((e1)=>e1 !== a) : r = t, a = Qr(a);\n            }\n            return t.set(e1, o), o;\n        }(t, this._c) : [].concat(n), a = [\n            ...i,\n            o\n        ], s = a[0], l = a.reduce((e1, n)=>{\n            const o = di(t, n, r);\n            return e1.top = gr(o.top, e1.top), e1.right = pr(o.right, e1.right), e1.bottom = pr(o.bottom, e1.bottom), e1.left = gr(o.left, e1.left), e1;\n        }, di(t, s, r));\n        return {\n            width: l.right - l.left,\n            height: l.bottom - l.top,\n            x: l.left,\n            y: l.top\n        };\n    },\n    getOffsetParent: gi,\n    getElementRects: async function(e1) {\n        const t = this.getOffsetParent || gi, n = this.getDimensions;\n        return {\n            reference: fi(e1.reference, await t(e1.floating), e1.strategy, e1.floating),\n            floating: {\n                x: 0,\n                y: 0,\n                ...await n(e1.floating)\n            }\n        };\n    },\n    getClientRects: function(e1) {\n        return Array.from(e1.getClientRects());\n    },\n    getDimensions: function(e1) {\n        const { width: t, height: n } = ni(e1);\n        return {\n            width: t,\n            height: n\n        };\n    },\n    getScale: ri,\n    isElement: Hr,\n    isRTL: function(e1) {\n        return \"rtl\" === Zr(e1).direction;\n    }\n};\nfunction vi(e1, t, n, o) {\n    void 0 === o && (o = {});\n    const { ancestorScroll: r = !0, ancestorResize: i = !0, elementResize: a = \"function\" == typeof ResizeObserver, layoutShift: s = \"function\" == typeof IntersectionObserver, animationFrame: l = !1 } = o, c = oi(e1), u = r || i ? [\n        ...c ? ti(c) : [],\n        ...ti(t)\n    ] : [];\n    u.forEach((e1)=>{\n        r && e1.addEventListener(\"scroll\", n, {\n            passive: !0\n        }), i && e1.addEventListener(\"resize\", n);\n    });\n    const d = c && s ? function(e1, t) {\n        let n, o = null;\n        const r = Fr(e1);\n        function i() {\n            var e1;\n            clearTimeout(n), null == (e1 = o) || e1.disconnect(), o = null;\n        }\n        return function a(s, l) {\n            void 0 === s && (s = !1), void 0 === l && (l = 1), i();\n            const { left: c, top: u, width: d, height: h } = e1.getBoundingClientRect();\n            if (s || t(), !d || !h) return;\n            const f = {\n                rootMargin: -vr(u) + \"px \" + -vr(r.clientWidth - (c + d)) + \"px \" + -vr(r.clientHeight - (u + h)) + \"px \" + -vr(c) + \"px\",\n                threshold: gr(0, pr(1, l)) || 1\n            };\n            let p = !0;\n            function g(e1) {\n                const t = e1[0].intersectionRatio;\n                if (t !== l) {\n                    if (!p) return a();\n                    t ? a(!1, t) : n = setTimeout(()=>{\n                        a(!1, 1e-7);\n                    }, 100);\n                }\n                p = !1;\n            }\n            try {\n                o = new IntersectionObserver(g, {\n                    ...f,\n                    root: r.ownerDocument\n                });\n            } catch (e1) {\n                o = new IntersectionObserver(g, f);\n            }\n            o.observe(e1);\n        }(!0), i;\n    }(c, n) : null;\n    let h, f = -1, p = null;\n    a && (p = new ResizeObserver((e1)=>{\n        let [o] = e1;\n        o && o.target === c && p && (p.unobserve(t), cancelAnimationFrame(f), f = requestAnimationFrame(()=>{\n            var e1;\n            null == (e1 = p) || e1.observe(t);\n        })), n();\n    }), c && !l && p.observe(c), p.observe(t));\n    let g = l ? si(e1) : null;\n    return l && function t() {\n        const o = si(e1);\n        !g || o.x === g.x && o.y === g.y && o.width === g.width && o.height === g.height || n();\n        g = o, h = requestAnimationFrame(t);\n    }(), n(), ()=>{\n        var e1;\n        u.forEach((e1)=>{\n            r && e1.removeEventListener(\"scroll\", n), i && e1.removeEventListener(\"resize\", n);\n        }), null == d || d(), null == (e1 = p) || e1.disconnect(), p = null, l && cancelAnimationFrame(h);\n    };\n}\nconst bi = function(e1) {\n    return void 0 === e1 && (e1 = {}), {\n        name: \"shift\",\n        options: e1,\n        async fn (t) {\n            const { x: n, y: o, placement: r } = t, { mainAxis: i = !0, crossAxis: a = !1, limiter: s = {\n                fn: (e1)=>{\n                    let { x: t, y: n } = e1;\n                    return {\n                        x: t,\n                        y: n\n                    };\n                }\n            }, ...l } = kr(e1, t), c = {\n                x: n,\n                y: o\n            }, u = await zr(t, l), d = Ar(Sr(r)), h = Er(d);\n            let f = c[h], p = c[d];\n            if (i) {\n                const e1 = \"y\" === h ? \"bottom\" : \"right\";\n                f = xr(f + u[\"y\" === h ? \"top\" : \"left\"], f, f - u[e1]);\n            }\n            if (a) {\n                const e1 = \"y\" === d ? \"bottom\" : \"right\";\n                p = xr(p + u[\"y\" === d ? \"top\" : \"left\"], p, p - u[e1]);\n            }\n            const g = s.fn({\n                ...t,\n                [h]: f,\n                [d]: p\n            });\n            return {\n                ...g,\n                data: {\n                    x: g.x - n,\n                    y: g.y - o\n                }\n            };\n        }\n    };\n}, yi = function(e1) {\n    return void 0 === e1 && (e1 = {}), {\n        name: \"flip\",\n        options: e1,\n        async fn (t) {\n            var n, o;\n            const { placement: r, middlewareData: i, rects: a, initialPlacement: s, platform: l, elements: c } = t, { mainAxis: u = !0, crossAxis: d = !0, fallbackPlacements: h, fallbackStrategy: f = \"bestFit\", fallbackAxisSideDirection: p = \"none\", flipAlignment: g = !0, ...m } = kr(e1, t);\n            if (null != (n = i.arrow) && n.alignmentOffset) return {};\n            const v = Sr(r), b = Sr(s) === s, y = await (null == l.isRTL ? void 0 : l.isRTL(c.floating)), w = h || (b || !g ? [\n                Mr(s)\n            ] : function(e1) {\n                const t = Mr(e1);\n                return [\n                    Cr(e1),\n                    t,\n                    Cr(t)\n                ];\n            }(s));\n            h || \"none\" === p || w.push(...function(e1, t, n, o) {\n                const r = Pr(e1);\n                let i = function(e1, t, n) {\n                    const o = [\n                        \"left\",\n                        \"right\"\n                    ], r = [\n                        \"right\",\n                        \"left\"\n                    ], i = [\n                        \"top\",\n                        \"bottom\"\n                    ], a = [\n                        \"bottom\",\n                        \"top\"\n                    ];\n                    switch(e1){\n                        case \"top\":\n                        case \"bottom\":\n                            return n ? t ? r : o : t ? o : r;\n                        case \"left\":\n                        case \"right\":\n                            return t ? i : a;\n                        default:\n                            return [];\n                    }\n                }(Sr(e1), \"start\" === n, o);\n                return r && (i = i.map((e1)=>e1 + \"-\" + r), t && (i = i.concat(i.map(Cr)))), i;\n            }(s, g, p, y));\n            const x = [\n                s,\n                ...w\n            ], k = await zr(t, m), S = [];\n            let P = (null == (o = i.flip) ? void 0 : o.overflows) || [];\n            if (u && S.push(k[v]), d) {\n                const e1 = function(e1, t, n) {\n                    void 0 === n && (n = !1);\n                    const o = Pr(e1), r = Rr(e1), i = Tr(r);\n                    let a = \"x\" === r ? o === (n ? \"end\" : \"start\") ? \"right\" : \"left\" : \"start\" === o ? \"bottom\" : \"top\";\n                    return t.reference[i] > t.floating[i] && (a = Mr(a)), [\n                        a,\n                        Mr(a)\n                    ];\n                }(r, a, y);\n                S.push(k[e1[0]], k[e1[1]]);\n            }\n            if (P = [\n                ...P,\n                {\n                    placement: r,\n                    overflows: S\n                }\n            ], !S.every((e1)=>e1 <= 0)) {\n                var E, T;\n                const e1 = ((null == (E = i.flip) ? void 0 : E.index) || 0) + 1, t = x[e1];\n                if (t) return {\n                    data: {\n                        index: e1,\n                        overflows: P\n                    },\n                    reset: {\n                        placement: t\n                    }\n                };\n                let n = null == (T = P.filter((e1)=>e1.overflows[0] <= 0).sort((e1, t)=>e1.overflows[1] - t.overflows[1])[0]) ? void 0 : T.placement;\n                if (!n) switch(f){\n                    case \"bestFit\":\n                        {\n                            var A;\n                            const e1 = null == (A = P.map((e1)=>[\n                                    e1.placement,\n                                    e1.overflows.filter((e1)=>e1 > 0).reduce((e1, t)=>e1 + t, 0)\n                                ]).sort((e1, t)=>e1[1] - t[1])[0]) ? void 0 : A[0];\n                            e1 && (n = e1);\n                            break;\n                        }\n                    case \"initialPlacement\":\n                        n = s;\n                }\n                if (r !== n) return {\n                    reset: {\n                        placement: n\n                    }\n                };\n            }\n            return {};\n        }\n    };\n}, wi = function(e1) {\n    return void 0 === e1 && (e1 = {}), {\n        name: \"hide\",\n        options: e1,\n        async fn (t) {\n            const { rects: n } = t, { strategy: o = \"referenceHidden\", ...r } = kr(e1, t);\n            switch(o){\n                case \"referenceHidden\":\n                    {\n                        const e1 = Lr(await zr(t, {\n                            ...r,\n                            elementContext: \"reference\"\n                        }), n.reference);\n                        return {\n                            data: {\n                                referenceHiddenOffsets: e1,\n                                referenceHidden: Vr(e1)\n                            }\n                        };\n                    }\n                case \"escaped\":\n                    {\n                        const e1 = Lr(await zr(t, {\n                            ...r,\n                            altBoundary: !0\n                        }), n.floating);\n                        return {\n                            data: {\n                                escapedOffsets: e1,\n                                escaped: Vr(e1)\n                            }\n                        };\n                    }\n                default:\n                    return {};\n            }\n        }\n    };\n}, xi = (e1)=>({\n        name: \"arrow\",\n        options: e1,\n        async fn (t) {\n            const { x: n, y: o, placement: r, rects: i, platform: a, elements: s, middlewareData: l } = t, { element: c, padding: u = 0 } = kr(e1, t) || {};\n            if (null == c) return {};\n            const d = Or(u), h = {\n                x: n,\n                y: o\n            }, f = Rr(r), p = Tr(f), g = await a.getDimensions(c), m = \"y\" === f, v = m ? \"top\" : \"left\", b = m ? \"bottom\" : \"right\", y = m ? \"clientHeight\" : \"clientWidth\", w = i.reference[p] + i.reference[f] - h[f] - i.floating[p], x = h[f] - i.reference[f], k = await (null == a.getOffsetParent ? void 0 : a.getOffsetParent(c));\n            let S = k ? k[y] : 0;\n            S && await (null == a.isElement ? void 0 : a.isElement(k)) || (S = s.floating[y] || i.floating[p]);\n            const P = w / 2 - x / 2, E = S / 2 - g[p] / 2 - 1, T = pr(d[v], E), A = pr(d[b], E), R = T, C = S - g[p] - A, M = S / 2 - g[p] / 2 + P, O = xr(R, M, C), B = !l.arrow && null != Pr(r) && M !== O && i.reference[p] / 2 - (M < R ? T : A) - g[p] / 2 < 0, j = B ? M < R ? M - R : M - C : 0;\n            return {\n                [f]: h[f] + j,\n                data: {\n                    [f]: O,\n                    centerOffset: M - O - j,\n                    ...B && {\n                        alignmentOffset: j\n                    }\n                },\n                reset: B\n            };\n        }\n    }), ki = (e1, t, n)=>{\n    const o = new Map, r = {\n        platform: mi,\n        ...n\n    }, i = {\n        ...r.platform,\n        _c: o\n    };\n    return (async (e1, t, n)=>{\n        const { placement: o = \"bottom\", strategy: r = \"absolute\", middleware: i = [], platform: a } = n, s = i.filter(Boolean), l = await (null == a.isRTL ? void 0 : a.isRTL(t));\n        let c = await a.getElementRects({\n            reference: e1,\n            floating: t,\n            strategy: r\n        }), { x: u, y: d } = jr(c, o, l), h = o, f = {}, p = 0;\n        for(let n = 0; n < s.length; n++){\n            const { name: i, fn: g } = s[n], { x: m, y: v, data: b, reset: y } = await g({\n                x: u,\n                y: d,\n                initialPlacement: o,\n                placement: h,\n                strategy: r,\n                middlewareData: f,\n                rects: c,\n                platform: a,\n                elements: {\n                    reference: e1,\n                    floating: t\n                }\n            });\n            u = null != m ? m : u, d = null != v ? v : d, f = {\n                ...f,\n                [i]: {\n                    ...f[i],\n                    ...b\n                }\n            }, y && p <= 50 && (p++, \"object\" == typeof y && (y.placement && (h = y.placement), y.rects && (c = !0 === y.rects ? await a.getElementRects({\n                reference: e1,\n                floating: t,\n                strategy: r\n            }) : y.rects), { x: u, y: d } = jr(c, h, l)), n = -1);\n        }\n        return {\n            x: u,\n            y: d,\n            placement: h,\n            strategy: r,\n            middlewareData: f\n        };\n    })(e1, t, {\n        ...r,\n        platform: i\n    });\n};\nvar Si = \"undefined\" != typeof document ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nfunction Pi(e1, t) {\n    if (e1 === t) return !0;\n    if (typeof e1 != typeof t) return !1;\n    if (\"function\" == typeof e1 && e1.toString() === t.toString()) return !0;\n    let n, o, r;\n    if (e1 && t && \"object\" == typeof e1) {\n        if (Array.isArray(e1)) {\n            if (n = e1.length, n !== t.length) return !1;\n            for(o = n; 0 != o--;)if (!Pi(e1[o], t[o])) return !1;\n            return !0;\n        }\n        if (r = Object.keys(e1), n = r.length, n !== Object.keys(t).length) return !1;\n        for(o = n; 0 != o--;)if (!({}).hasOwnProperty.call(t, r[o])) return !1;\n        for(o = n; 0 != o--;){\n            const n = r[o];\n            if ((\"_owner\" !== n || !e1.$$typeof) && !Pi(e1[n], t[n])) return !1;\n        }\n        return !0;\n    }\n    return e1 != e1 && t != t;\n}\nfunction Ei(e1) {\n    if (true) return 1;\n    return (e1.ownerDocument.defaultView || window).devicePixelRatio || 1;\n}\nfunction Ti(e1, t) {\n    const n = Ei(e1);\n    return Math.round(t * n) / n;\n}\nfunction Ai(e1) {\n    const t = react__WEBPACK_IMPORTED_MODULE_1__.useRef(e1);\n    return Si(()=>{\n        t.current = e1;\n    }), t;\n}\nconst Ri = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    transformPagePoint: (e1)=>e1,\n    isStatic: !1,\n    reducedMotion: \"never\"\n}), Ci = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), Mi = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), Oi = \"undefined\" != typeof document, Bi = Oi ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_1__.useEffect, ji = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    strict: !1\n}), zi = (e1)=>e1.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase(), Li = \"data-\" + zi(\"framerAppearId\"), Vi = !1, Di = !1;\nclass _i {\n    constructor(){\n        this.order = [], this.scheduled = new Set;\n    }\n    add(e1) {\n        if (!this.scheduled.has(e1)) return this.scheduled.add(e1), this.order.push(e1), !0;\n    }\n    remove(e1) {\n        const t = this.order.indexOf(e1);\n        -1 !== t && (this.order.splice(t, 1), this.scheduled.delete(e1));\n    }\n    clear() {\n        this.order.length = 0, this.scheduled.clear();\n    }\n}\nconst $i = [\n    \"prepare\",\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\"\n];\nfunction Fi(e1, t) {\n    let n = !1, o = !0;\n    const r = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: !1\n    }, i = $i.reduce((e1, t)=>(e1[t] = function(e1) {\n            let t = new _i, n = new _i, o = 0, r = !1, i = !1;\n            const a = new WeakSet, s = {\n                schedule: (e1, i = !1, s = !1)=>{\n                    const l = s && r, c = l ? t : n;\n                    return i && a.add(e1), c.add(e1) && l && r && (o = t.order.length), e1;\n                },\n                cancel: (e1)=>{\n                    n.remove(e1), a.delete(e1);\n                },\n                process: (l)=>{\n                    if (r) i = !0;\n                    else {\n                        if (r = !0, [t, n] = [\n                            n,\n                            t\n                        ], n.clear(), o = t.order.length, o) for(let n = 0; n < o; n++){\n                            const o = t.order[n];\n                            a.has(o) && (s.schedule(o), e1()), o(l);\n                        }\n                        r = !1, i && (i = !1, s.process(l));\n                    }\n                }\n            };\n            return s;\n        }(()=>n = !0), e1), {}), a = (e1)=>{\n        i[e1].process(r);\n    }, s = ()=>{\n        const i = performance.now();\n        n = !1, r.delta = o ? 1e3 / 60 : Math.max(Math.min(i - r.timestamp, 40), 1), r.timestamp = i, r.isProcessing = !0, $i.forEach(a), r.isProcessing = !1, n && t && (o = !1, e1(s));\n    }, l = $i.reduce((t, a)=>{\n        const l = i[a];\n        return t[a] = (t, i = !1, a = !1)=>(n || (n = !0, o = !0, r.isProcessing || e1(s)), l.schedule(t, i, a)), t;\n    }, {});\n    return {\n        schedule: l,\n        cancel: (e1)=>$i.forEach((t)=>i[t].cancel(e1)),\n        state: r,\n        steps: i\n    };\n}\nconst { schedule: Ii, cancel: Hi } = Fi(queueMicrotask, !1);\nfunction Ni(e1) {\n    return e1 && \"object\" == typeof e1 && Object.prototype.hasOwnProperty.call(e1, \"current\");\n}\nfunction Wi(e1) {\n    return \"string\" == typeof e1 || Array.isArray(e1);\n}\nfunction Ui(e1) {\n    return null !== e1 && \"object\" == typeof e1 && \"function\" == typeof e1.start;\n}\nconst Yi = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\"\n], Gi = [\n    \"initial\",\n    ...Yi\n];\nfunction Xi(e1) {\n    return Ui(e1.animate) || Gi.some((t)=>Wi(e1[t]));\n}\nfunction qi(e1) {\n    return Boolean(Xi(e1) || e1.variants);\n}\nfunction Ki(e1) {\n    const { initial: t, animate: n } = function(e1, t) {\n        if (Xi(e1)) {\n            const { initial: t, animate: n } = e1;\n            return {\n                initial: !1 === t || Wi(t) ? t : void 0,\n                animate: Wi(n) ? n : void 0\n            };\n        }\n        return !1 !== e1.inherit ? t : {};\n    }(e1, (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ci));\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            initial: t,\n            animate: n\n        }), [\n        Zi(t),\n        Zi(n)\n    ]);\n}\nfunction Zi(e1) {\n    return Array.isArray(e1) ? e1.join(\" \") : e1;\n}\nconst Ji = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\"\n    ],\n    exit: [\n        \"exit\"\n    ],\n    drag: [\n        \"drag\",\n        \"dragControls\"\n    ],\n    focus: [\n        \"whileFocus\"\n    ],\n    hover: [\n        \"whileHover\",\n        \"onHoverStart\",\n        \"onHoverEnd\"\n    ],\n    tap: [\n        \"whileTap\",\n        \"onTap\",\n        \"onTapStart\",\n        \"onTapCancel\"\n    ],\n    pan: [\n        \"onPan\",\n        \"onPanStart\",\n        \"onPanSessionStart\",\n        \"onPanEnd\"\n    ],\n    inView: [\n        \"whileInView\",\n        \"onViewportEnter\",\n        \"onViewportLeave\"\n    ],\n    layout: [\n        \"layout\",\n        \"layoutId\"\n    ]\n}, Qi = {};\nfor(const e1 in Ji)Qi[e1] = {\n    isEnabled: (t)=>Ji[e1].some((e1)=>!!t[e1])\n};\nconst ea = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), ta = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({}), na = Symbol.for(\"motionComponentSymbol\");\nfunction oa({ preloadedFeatures: e1, createVisualElement: t, useRender: n, useVisualState: r, Component: i }) {\n    e1 && function(e1) {\n        for(const t in e1)Qi[t] = {\n            ...Qi[t],\n            ...e1[t]\n        };\n    }(e1);\n    const s = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(s, l) {\n        let c;\n        const d = {\n            ...(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ri),\n            ...s,\n            layoutId: ra(s)\n        }, { isStatic: g } = d, m = Ki(s), v = r(s, g);\n        if (!g && Oi) {\n            m.visualElement = function(e1, t, n, o) {\n                const { visualElement: r } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ci), i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ji), s = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Mi), l = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ri).reducedMotion, c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n                o = o || i.renderer, !c.current && o && (c.current = o(e1, {\n                    visualState: t,\n                    parent: r,\n                    props: n,\n                    presenceContext: s,\n                    blockInitialAnimation: !!s && !1 === s.initial,\n                    reducedMotionConfig: l\n                }));\n                const d = c.current;\n                (0,react__WEBPACK_IMPORTED_MODULE_1__.useInsertionEffect)(()=>{\n                    d && d.update(n, s);\n                });\n                const p = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Boolean(n[Li] && !window.HandoffComplete));\n                return Bi(()=>{\n                    d && (Ii.postRender(d.render), p.current && d.animationState && d.animationState.animateChanges());\n                }), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n                    d && (d.updateFeatures(), !p.current && d.animationState && d.animationState.animateChanges(), p.current && (p.current = !1, window.HandoffComplete = !0));\n                }), d;\n            }(i, v, d, t);\n            const n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ta), o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ji).strict;\n            m.visualElement && (c = m.visualElement.loadFeatures(d, o, e1, n));\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Ci.Provider, {\n            value: m\n        }, c && m.visualElement ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(c, {\n            visualElement: m.visualElement,\n            ...d\n        }) : null, n(i, s, function(e1, t, n) {\n            return (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((o)=>{\n                o && e1.mount && e1.mount(o), t && (o ? t.mount(o) : t.unmount()), n && (\"function\" == typeof n ? n(o) : Ni(n) && (n.current = o));\n            }, [\n                t\n            ]);\n        }(v, m.visualElement, l), v, g, m.visualElement));\n    });\n    return s[na] = i, s;\n}\nfunction ra({ layoutId: e1 }) {\n    const t = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ea).id;\n    return t && void 0 !== e1 ? t + \"-\" + e1 : e1;\n}\nfunction ia(e1) {\n    function t(t, n = {}) {\n        return oa(e1(t, n));\n    }\n    if (\"undefined\" == typeof Proxy) return t;\n    const n = new Map;\n    return new Proxy(t, {\n        get: (e1, o)=>(n.has(o) || n.set(o, t(o)), n.get(o))\n    });\n}\nconst aa = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\"\n];\nfunction sa(e1) {\n    return \"string\" == typeof e1 && !e1.includes(\"-\") && !!(aa.indexOf(e1) > -1 || /[A-Z]/.test(e1));\n}\nconst la = {};\nconst ca = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\"\n], ua = new Set(ca);\nfunction da(e1, { layout: t, layoutId: n }) {\n    return ua.has(e1) || e1.startsWith(\"origin\") || (t || void 0 !== n) && (!!la[e1] || \"opacity\" === e1);\n}\nconst ha = (e1)=>Boolean(e1 && e1.getVelocity), fa = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\"\n}, pa = ca.length;\nconst ga = (e1)=>(t)=>\"string\" == typeof t && t.startsWith(e1), ma = ga(\"--\"), va = ga(\"var(--\"), ba = (e1, t)=>t && \"number\" == typeof e1 ? t.transform(e1) : e1, ya = (e1, t, n)=>Math.min(Math.max(n, e1), t), wa = {\n    test: (e1)=>\"number\" == typeof e1,\n    parse: parseFloat,\n    transform: (e1)=>e1\n}, xa = {\n    ...wa,\n    transform: (e1)=>ya(0, 1, e1)\n}, ka = {\n    ...wa,\n    default: 1\n}, Sa = (e1)=>Math.round(1e5 * e1) / 1e5, Pa = /(-)?([\\d]*\\.?[\\d])+/g, Ea = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi, Ta = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\nfunction Aa(e1) {\n    return \"string\" == typeof e1;\n}\nconst Ra = (e1)=>({\n        test: (t)=>Aa(t) && t.endsWith(e1) && 1 === t.split(\" \").length,\n        parse: parseFloat,\n        transform: (t)=>`${t}${e1}`\n    }), Ca = Ra(\"deg\"), Ma = Ra(\"%\"), Oa = Ra(\"px\"), Ba = Ra(\"vh\"), ja = Ra(\"vw\"), za = {\n    ...Ma,\n    parse: (e1)=>Ma.parse(e1) / 100,\n    transform: (e1)=>Ma.transform(100 * e1)\n}, La = {\n    ...wa,\n    transform: Math.round\n}, Va = {\n    borderWidth: Oa,\n    borderTopWidth: Oa,\n    borderRightWidth: Oa,\n    borderBottomWidth: Oa,\n    borderLeftWidth: Oa,\n    borderRadius: Oa,\n    radius: Oa,\n    borderTopLeftRadius: Oa,\n    borderTopRightRadius: Oa,\n    borderBottomRightRadius: Oa,\n    borderBottomLeftRadius: Oa,\n    width: Oa,\n    maxWidth: Oa,\n    height: Oa,\n    maxHeight: Oa,\n    size: Oa,\n    top: Oa,\n    right: Oa,\n    bottom: Oa,\n    left: Oa,\n    padding: Oa,\n    paddingTop: Oa,\n    paddingRight: Oa,\n    paddingBottom: Oa,\n    paddingLeft: Oa,\n    margin: Oa,\n    marginTop: Oa,\n    marginRight: Oa,\n    marginBottom: Oa,\n    marginLeft: Oa,\n    rotate: Ca,\n    rotateX: Ca,\n    rotateY: Ca,\n    rotateZ: Ca,\n    scale: ka,\n    scaleX: ka,\n    scaleY: ka,\n    scaleZ: ka,\n    skew: Ca,\n    skewX: Ca,\n    skewY: Ca,\n    distance: Oa,\n    translateX: Oa,\n    translateY: Oa,\n    translateZ: Oa,\n    x: Oa,\n    y: Oa,\n    z: Oa,\n    perspective: Oa,\n    transformPerspective: Oa,\n    opacity: xa,\n    originX: za,\n    originY: za,\n    originZ: Oa,\n    zIndex: La,\n    fillOpacity: xa,\n    strokeOpacity: xa,\n    numOctaves: La\n};\nfunction Da(e1, t, n, o) {\n    const { style: r, vars: i, transform: a, transformOrigin: s } = e1;\n    let l = !1, c = !1, u = !0;\n    for(const e1 in t){\n        const n = t[e1];\n        if (ma(e1)) {\n            i[e1] = n;\n            continue;\n        }\n        const o = Va[e1], d = ba(n, o);\n        if (ua.has(e1)) {\n            if (l = !0, a[e1] = d, !u) continue;\n            n !== (o.default || 0) && (u = !1);\n        } else e1.startsWith(\"origin\") ? (c = !0, s[e1] = d) : r[e1] = d;\n    }\n    if (t.transform || (l || o ? r.transform = function(e1, { enableHardwareAcceleration: t = !0, allowTransformNone: n = !0 }, o, r) {\n        let i = \"\";\n        for(let t = 0; t < pa; t++){\n            const n = ca[t];\n            void 0 !== e1[n] && (i += `${fa[n] || n}(${e1[n]}) `);\n        }\n        return t && !e1.z && (i += \"translateZ(0)\"), i = i.trim(), r ? i = r(e1, o ? \"\" : i) : n && o && (i = \"none\"), i;\n    }(e1.transform, n, u, o) : r.transform && (r.transform = \"none\")), c) {\n        const { originX: e1 = \"50%\", originY: t = \"50%\", originZ: n = 0 } = s;\n        r.transformOrigin = `${e1} ${t} ${n}`;\n    }\n}\nconst _a = ()=>({\n        style: {},\n        transform: {},\n        transformOrigin: {},\n        vars: {}\n    });\nfunction $a(e1, t, n) {\n    for(const o in t)ha(t[o]) || da(o, n) || (e1[o] = t[o]);\n}\nfunction Fa(e1, t, n) {\n    const o = {};\n    return $a(o, e1.style || {}, e1), Object.assign(o, function({ transformTemplate: e1 }, t, n) {\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n            const o = _a();\n            return Da(o, t, {\n                enableHardwareAcceleration: !n\n            }, e1), Object.assign({}, o.vars, o.style);\n        }, [\n            t\n        ]);\n    }(e1, t, n)), o;\n}\nfunction Ia(e1, t, n) {\n    const o = {}, r = Fa(e1, t, n);\n    return e1.drag && !1 !== e1.dragListener && (o.draggable = !1, r.userSelect = r.WebkitUserSelect = r.WebkitTouchCallout = \"none\", r.touchAction = !0 === e1.drag ? \"none\" : \"pan-\" + (\"x\" === e1.drag ? \"y\" : \"x\")), void 0 === e1.tabIndex && (e1.onTap || e1.onTapStart || e1.whileTap) && (o.tabIndex = 0), o.style = r, o;\n}\nconst Ha = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\"\n]);\nfunction Na(e1) {\n    return e1.startsWith(\"while\") || e1.startsWith(\"drag\") && \"draggable\" !== e1 || e1.startsWith(\"layout\") || e1.startsWith(\"onTap\") || e1.startsWith(\"onPan\") || e1.startsWith(\"onLayout\") || Ha.has(e1);\n}\nlet Wa = (e1)=>!Na(e1);\ntry {\n    (Ua = require(\"@emotion/is-prop-valid\").default) && (Wa = (e1)=>e1.startsWith(\"on\") ? !Na(e1) : Ua(e1));\n} catch (Nb) {}\nvar Ua;\nfunction Ya(e1, t, n) {\n    return \"string\" == typeof e1 ? e1 : Oa.transform(t + n * e1);\n}\nconst Ga = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\"\n}, Xa = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\"\n};\nfunction qa(e1, { attrX: t, attrY: n, attrScale: o, originX: r, originY: i, pathLength: a, pathSpacing: s = 1, pathOffset: l = 0, ...c }, u, d, h) {\n    if (Da(e1, c, u, h), d) return void (e1.style.viewBox && (e1.attrs.viewBox = e1.style.viewBox));\n    e1.attrs = e1.style, e1.style = {};\n    const { attrs: f, style: p, dimensions: g } = e1;\n    f.transform && (g && (p.transform = f.transform), delete f.transform), g && (void 0 !== r || void 0 !== i || p.transform) && (p.transformOrigin = function(e1, t, n) {\n        return `${Ya(t, e1.x, e1.width)} ${Ya(n, e1.y, e1.height)}`;\n    }(g, void 0 !== r ? r : .5, void 0 !== i ? i : .5)), void 0 !== t && (f.x = t), void 0 !== n && (f.y = n), void 0 !== o && (f.scale = o), void 0 !== a && function(e1, t, n = 1, o = 0, r = !0) {\n        e1.pathLength = 1;\n        const i = r ? Ga : Xa;\n        e1[i.offset] = Oa.transform(-o);\n        const a = Oa.transform(t), s = Oa.transform(n);\n        e1[i.array] = `${a} ${s}`;\n    }(f, a, s, l, !1);\n}\nconst Ka = ()=>({\n        ..._a(),\n        attrs: {}\n    }), Za = (e1)=>\"string\" == typeof e1 && \"svg\" === e1.toLowerCase();\nfunction Ja(e1, t, n, o) {\n    const r = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const n = Ka();\n        return qa(n, t, {\n            enableHardwareAcceleration: !1\n        }, Za(o), e1.transformTemplate), {\n            ...n.attrs,\n            style: {\n                ...n.style\n            }\n        };\n    }, [\n        t\n    ]);\n    if (e1.style) {\n        const t = {};\n        $a(t, e1.style, e1), r.style = {\n            ...t,\n            ...r.style\n        };\n    }\n    return r;\n}\nfunction Qa(e1 = !1) {\n    return (t, n, o, { latestValues: r }, a)=>{\n        const l = (sa(t) ? Ja : Ia)(n, r, a, t), c = function(e1, t, n) {\n            const o = {};\n            for(const r in e1)\"values\" === r && \"object\" == typeof e1.values || (Wa(r) || !0 === n && Na(r) || !t && !Na(r) || e1.draggable && r.startsWith(\"onDrag\")) && (o[r] = e1[r]);\n            return o;\n        }(n, \"string\" == typeof t, e1), u = {\n            ...c,\n            ...l,\n            ref: o\n        }, { children: d } = n, h = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>ha(d) ? d.get() : d, [\n            d\n        ]);\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(t, {\n            ...u,\n            children: h\n        });\n    };\n}\nfunction es(e1, { style: t, vars: n }, o, r) {\n    Object.assign(e1.style, t, r && r.getProjectionStyles(o));\n    for(const t in n)e1.style.setProperty(t, n[t]);\n}\nconst ts = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\"\n]);\nfunction ns(e1, t, n, o) {\n    es(e1, t, void 0, o);\n    for(const n in t.attrs)e1.setAttribute(ts.has(n) ? n : zi(n), t.attrs[n]);\n}\nfunction os(e1, t) {\n    const { style: n } = e1, o = {};\n    for(const r in n)(ha(n[r]) || t.style && ha(t.style[r]) || da(r, e1)) && (o[r] = n[r]);\n    return o;\n}\nfunction rs(e1, t) {\n    const n = os(e1, t);\n    for(const o in e1)if (ha(e1[o]) || ha(t[o])) {\n        n[-1 !== ca.indexOf(o) ? \"attr\" + o.charAt(0).toUpperCase() + o.substring(1) : o] = e1[o];\n    }\n    return n;\n}\nfunction is(e1, t, n, o = {}, r = {}) {\n    return \"function\" == typeof t && (t = t(void 0 !== n ? n : e1.custom, o, r)), \"string\" == typeof t && (t = e1.variants && e1.variants[t]), \"function\" == typeof t && (t = t(void 0 !== n ? n : e1.custom, o, r)), t;\n}\nfunction as(e1) {\n    const t = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    return null === t.current && (t.current = e1()), t.current;\n}\nconst ss = (e1)=>Array.isArray(e1), ls = (e1)=>Boolean(e1 && \"object\" == typeof e1 && e1.mix && e1.toValue), cs = (e1)=>ss(e1) ? e1[e1.length - 1] || 0 : e1;\nfunction us(e1) {\n    const t = ha(e1) ? e1.get() : e1;\n    return ls(t) ? t.toValue() : t;\n}\nconst ds = (e1)=>(t, n)=>{\n        const o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Ci), r = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Mi), i = ()=>(function({ scrapeMotionValuesFromProps: e1, createRenderState: t, onMount: n }, o, r, i) {\n                const a = {\n                    latestValues: hs(o, r, i, e1),\n                    renderState: t()\n                };\n                return n && (a.mount = (e1)=>n(o, e1, a)), a;\n            })(e1, t, o, r);\n        return n ? i() : as(i);\n    };\nfunction hs(e1, t, n, o) {\n    const r = {}, i = o(e1, {});\n    for(const e1 in i)r[e1] = us(i[e1]);\n    let { initial: a, animate: s } = e1;\n    const l = Xi(e1), c = qi(e1);\n    t && c && !l && !1 !== e1.inherit && (void 0 === a && (a = t.initial), void 0 === s && (s = t.animate));\n    let u = !!n && !1 === n.initial;\n    u = u || !1 === a;\n    const d = u ? s : a;\n    if (d && \"boolean\" != typeof d && !Ui(d)) {\n        (Array.isArray(d) ? d : [\n            d\n        ]).forEach((t)=>{\n            const n = is(e1, t);\n            if (!n) return;\n            const { transitionEnd: o, transition: i, ...a } = n;\n            for(const e1 in a){\n                let t = a[e1];\n                if (Array.isArray(t)) {\n                    t = t[u ? t.length - 1 : 0];\n                }\n                null !== t && (r[e1] = t);\n            }\n            for(const e1 in o)r[e1] = o[e1];\n        });\n    }\n    return r;\n}\nconst fs = (e1)=>e1, { schedule: ps, cancel: gs, state: ms, steps: vs } = Fi(\"undefined\" != typeof requestAnimationFrame ? requestAnimationFrame : fs, !0), bs = {\n    useVisualState: ds({\n        scrapeMotionValuesFromProps: rs,\n        createRenderState: Ka,\n        onMount: (e1, t, { renderState: n, latestValues: o })=>{\n            ps.read(()=>{\n                try {\n                    n.dimensions = \"function\" == typeof t.getBBox ? t.getBBox() : t.getBoundingClientRect();\n                } catch (e1) {\n                    n.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0\n                    };\n                }\n            }), ps.render(()=>{\n                qa(n, o, {\n                    enableHardwareAcceleration: !1\n                }, Za(t.tagName), e1.transformTemplate), ns(t, n);\n            });\n        }\n    })\n}, ys = {\n    useVisualState: ds({\n        scrapeMotionValuesFromProps: os,\n        createRenderState: _a\n    })\n};\nfunction ws(e1, t, n, o = {\n    passive: !0\n}) {\n    return e1.addEventListener(t, n, o), ()=>e1.removeEventListener(t, n);\n}\nconst xs = (e1)=>\"mouse\" === e1.pointerType ? \"number\" != typeof e1.button || e1.button <= 0 : !1 !== e1.isPrimary;\nfunction ks(e1, t = \"page\") {\n    return {\n        point: {\n            x: e1[t + \"X\"],\n            y: e1[t + \"Y\"]\n        }\n    };\n}\nconst Ss = (e1)=>(t)=>xs(t) && e1(t, ks(t));\nfunction Ps(e1, t, n, o) {\n    return ws(e1, t, Ss(n), o);\n}\nconst Es = (e1, t)=>(n)=>t(e1(n)), Ts = (...e1)=>e1.reduce(Es);\nfunction As(e1) {\n    let t = null;\n    return ()=>{\n        const n = ()=>{\n            t = null;\n        };\n        return null === t && (t = e1, n);\n    };\n}\nconst Rs = As(\"dragHorizontal\"), Cs = As(\"dragVertical\");\nfunction Ms(e1) {\n    let t = !1;\n    if (\"y\" === e1) t = Cs();\n    else if (\"x\" === e1) t = Rs();\n    else {\n        const e1 = Rs(), n = Cs();\n        e1 && n ? t = ()=>{\n            e1(), n();\n        } : (e1 && e1(), n && n());\n    }\n    return t;\n}\nfunction Os() {\n    const e1 = Ms(!0);\n    return !e1 || (e1(), !1);\n}\nclass Bs {\n    constructor(e1){\n        this.isMounted = !1, this.node = e1;\n    }\n    update() {}\n}\nfunction js(e1, t) {\n    const n = \"pointer\" + (t ? \"enter\" : \"leave\"), o = \"onHover\" + (t ? \"Start\" : \"End\");\n    return Ps(e1.current, n, (n, r)=>{\n        if (\"touch\" === n.pointerType || Os()) return;\n        const i = e1.getProps();\n        e1.animationState && i.whileHover && e1.animationState.setActive(\"whileHover\", t), i[o] && ps.update(()=>i[o](n, r));\n    }, {\n        passive: !e1.getProps()[o]\n    });\n}\nconst zs = (e1, t)=>!!t && (e1 === t || zs(e1, t.parentElement));\nfunction Ls(e1, t) {\n    if (!t) return;\n    const n = new PointerEvent(\"pointer\" + e1);\n    t(n, ks(n));\n}\nconst Vs = new WeakMap, Ds = new WeakMap, _s = (e1)=>{\n    const t = Vs.get(e1.target);\n    t && t(e1);\n}, $s = (e1)=>{\n    e1.forEach(_s);\n};\nfunction Fs(e1, t, n) {\n    const o = function({ root: e1, ...t }) {\n        const n = e1 || document;\n        Ds.has(n) || Ds.set(n, {});\n        const o = Ds.get(n), r = JSON.stringify(t);\n        return o[r] || (o[r] = new IntersectionObserver($s, {\n            root: e1,\n            ...t\n        })), o[r];\n    }(t);\n    return Vs.set(e1, n), o.observe(e1), ()=>{\n        Vs.delete(e1), o.unobserve(e1);\n    };\n}\nconst Is = {\n    some: 0,\n    all: 1\n};\nconst Hs = {\n    inView: {\n        Feature: class extends Bs {\n            constructor(){\n                super(...arguments), this.hasEnteredView = !1, this.isInView = !1;\n            }\n            startObserver() {\n                this.unmount();\n                const { viewport: e1 = {} } = this.node.getProps(), { root: t, margin: n, amount: o = \"some\", once: r } = e1, i = {\n                    root: t ? t.current : void 0,\n                    rootMargin: n,\n                    threshold: \"number\" == typeof o ? o : Is[o]\n                };\n                return Fs(this.node.current, i, (e1)=>{\n                    const { isIntersecting: t } = e1;\n                    if (this.isInView === t) return;\n                    if (this.isInView = t, r && !t && this.hasEnteredView) return;\n                    t && (this.hasEnteredView = !0), this.node.animationState && this.node.animationState.setActive(\"whileInView\", t);\n                    const { onViewportEnter: n, onViewportLeave: o } = this.node.getProps(), i = t ? n : o;\n                    i && i(e1);\n                });\n            }\n            mount() {\n                this.startObserver();\n            }\n            update() {\n                if (\"undefined\" == typeof IntersectionObserver) return;\n                const { props: e1, prevProps: t } = this.node;\n                [\n                    \"amount\",\n                    \"margin\",\n                    \"root\"\n                ].some(function({ viewport: e1 = {} }, { viewport: t = {} } = {}) {\n                    return (n)=>e1[n] !== t[n];\n                }(e1, t)) && this.startObserver();\n            }\n            unmount() {}\n        }\n    },\n    tap: {\n        Feature: class extends Bs {\n            constructor(){\n                super(...arguments), this.removeStartListeners = fs, this.removeEndListeners = fs, this.removeAccessibleListeners = fs, this.startPointerPress = (e1, t)=>{\n                    if (this.isPressing) return;\n                    this.removeEndListeners();\n                    const n = this.node.getProps(), o = Ps(window, \"pointerup\", (e1, t)=>{\n                        if (!this.checkPressEnd()) return;\n                        const { onTap: n, onTapCancel: o, globalTapTarget: r } = this.node.getProps();\n                        ps.update(()=>{\n                            r || zs(this.node.current, e1.target) ? n && n(e1, t) : o && o(e1, t);\n                        });\n                    }, {\n                        passive: !(n.onTap || n.onPointerUp)\n                    }), r = Ps(window, \"pointercancel\", (e1, t)=>this.cancelPress(e1, t), {\n                        passive: !(n.onTapCancel || n.onPointerCancel)\n                    });\n                    this.removeEndListeners = Ts(o, r), this.startPress(e1, t);\n                }, this.startAccessiblePress = ()=>{\n                    const e1 = ws(this.node.current, \"keydown\", (e1)=>{\n                        if (\"Enter\" !== e1.key || this.isPressing) return;\n                        this.removeEndListeners(), this.removeEndListeners = ws(this.node.current, \"keyup\", (e1)=>{\n                            \"Enter\" === e1.key && this.checkPressEnd() && Ls(\"up\", (e1, t)=>{\n                                const { onTap: n } = this.node.getProps();\n                                n && ps.update(()=>n(e1, t));\n                            });\n                        }), Ls(\"down\", (e1, t)=>{\n                            this.startPress(e1, t);\n                        });\n                    }), t = ws(this.node.current, \"blur\", ()=>{\n                        this.isPressing && Ls(\"cancel\", (e1, t)=>this.cancelPress(e1, t));\n                    });\n                    this.removeAccessibleListeners = Ts(e1, t);\n                };\n            }\n            startPress(e1, t) {\n                this.isPressing = !0;\n                const { onTapStart: n, whileTap: o } = this.node.getProps();\n                o && this.node.animationState && this.node.animationState.setActive(\"whileTap\", !0), n && ps.update(()=>n(e1, t));\n            }\n            checkPressEnd() {\n                this.removeEndListeners(), this.isPressing = !1;\n                return this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive(\"whileTap\", !1), !Os();\n            }\n            cancelPress(e1, t) {\n                if (!this.checkPressEnd()) return;\n                const { onTapCancel: n } = this.node.getProps();\n                n && ps.update(()=>n(e1, t));\n            }\n            mount() {\n                const e1 = this.node.getProps(), t = Ps(e1.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n                    passive: !(e1.onTapStart || e1.onPointerStart)\n                }), n = ws(this.node.current, \"focus\", this.startAccessiblePress);\n                this.removeStartListeners = Ts(t, n);\n            }\n            unmount() {\n                this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();\n            }\n        }\n    },\n    focus: {\n        Feature: class extends Bs {\n            constructor(){\n                super(...arguments), this.isActive = !1;\n            }\n            onFocus() {\n                let e1 = !1;\n                try {\n                    e1 = this.node.current.matches(\":focus-visible\");\n                } catch (t) {\n                    e1 = !0;\n                }\n                e1 && this.node.animationState && (this.node.animationState.setActive(\"whileFocus\", !0), this.isActive = !0);\n            }\n            onBlur() {\n                this.isActive && this.node.animationState && (this.node.animationState.setActive(\"whileFocus\", !1), this.isActive = !1);\n            }\n            mount() {\n                this.unmount = Ts(ws(this.node.current, \"focus\", ()=>this.onFocus()), ws(this.node.current, \"blur\", ()=>this.onBlur()));\n            }\n            unmount() {}\n        }\n    },\n    hover: {\n        Feature: class extends Bs {\n            mount() {\n                this.unmount = Ts(js(this.node, !0), js(this.node, !1));\n            }\n            unmount() {}\n        }\n    }\n};\nfunction Ns(e1, t) {\n    if (!Array.isArray(t)) return !1;\n    const n = t.length;\n    if (n !== e1.length) return !1;\n    for(let o = 0; o < n; o++)if (t[o] !== e1[o]) return !1;\n    return !0;\n}\nfunction Ws(e1, t, n) {\n    const o = e1.getProps();\n    return is(o, t, void 0 !== n ? n : o.custom, function(e1) {\n        const t = {};\n        return e1.values.forEach((e1, n)=>t[n] = e1.get()), t;\n    }(e1), function(e1) {\n        const t = {};\n        return e1.values.forEach((e1, n)=>t[n] = e1.getVelocity()), t;\n    }(e1));\n}\nlet Us = fs;\nconst Ys = (e1)=>1e3 * e1, Gs = (e1)=>e1 / 1e3, Xs = !1, qs = (e1, t, n)=>(((1 - 3 * n + 3 * t) * e1 + (3 * n - 6 * t)) * e1 + 3 * t) * e1, Ks = 1e-7, Zs = 12;\nfunction Js(e1, t, n, o) {\n    if (e1 === t && n === o) return fs;\n    const r = (t)=>(function(e1, t, n, o, r) {\n            let i, a, s = 0;\n            do {\n                a = t + (n - t) / 2, i = qs(a, o, r) - e1, i > 0 ? n = a : t = a;\n            }while (Math.abs(i) > Ks && ++s < Zs);\n            return a;\n        })(t, 0, 1, e1, n);\n    return (e1)=>0 === e1 || 1 === e1 ? e1 : qs(r(e1), t, o);\n}\nconst Qs = Js(.42, 0, 1, 1), el = Js(0, 0, .58, 1), tl = Js(.42, 0, .58, 1), nl = (e1)=>Array.isArray(e1) && \"number\" != typeof e1[0], ol = (e1)=>(t)=>t <= .5 ? e1(2 * t) / 2 : (2 - e1(2 * (1 - t))) / 2, rl = (e1)=>(t)=>1 - e1(1 - t), il = (e1)=>1 - Math.sin(Math.acos(e1)), al = rl(il), sl = ol(il), ll = Js(.33, 1.53, .69, .99), cl = rl(ll), ul = ol(cl), dl = {\n    linear: fs,\n    easeIn: Qs,\n    easeInOut: tl,\n    easeOut: el,\n    circIn: il,\n    circInOut: sl,\n    circOut: al,\n    backIn: cl,\n    backInOut: ul,\n    backOut: ll,\n    anticipate: (e1)=>(e1 *= 2) < 1 ? .5 * cl(e1) : .5 * (2 - Math.pow(2, -10 * (e1 - 1)))\n}, hl = (e1)=>{\n    if (Array.isArray(e1)) {\n        const [t, n, o, r] = e1;\n        return Js(t, n, o, r);\n    }\n    return \"string\" == typeof e1 ? dl[e1] : e1;\n}, fl = (e1, t)=>(n)=>Boolean(Aa(n) && Ta.test(n) && n.startsWith(e1) || t && Object.prototype.hasOwnProperty.call(n, t)), pl = (e1, t, n)=>(o)=>{\n        if (!Aa(o)) return o;\n        const [r, i, a, s] = o.match(Pa);\n        return {\n            [e1]: parseFloat(r),\n            [t]: parseFloat(i),\n            [n]: parseFloat(a),\n            alpha: void 0 !== s ? parseFloat(s) : 1\n        };\n    }, gl = {\n    ...wa,\n    transform: (e1)=>Math.round(((e1)=>ya(0, 255, e1))(e1))\n}, ml = {\n    test: fl(\"rgb\", \"red\"),\n    parse: pl(\"red\", \"green\", \"blue\"),\n    transform: ({ red: e1, green: t, blue: n, alpha: o = 1 })=>\"rgba(\" + gl.transform(e1) + \", \" + gl.transform(t) + \", \" + gl.transform(n) + \", \" + Sa(xa.transform(o)) + \")\"\n};\nconst vl = {\n    test: fl(\"#\"),\n    parse: function(e1) {\n        let t = \"\", n = \"\", o = \"\", r = \"\";\n        return e1.length > 5 ? (t = e1.substring(1, 3), n = e1.substring(3, 5), o = e1.substring(5, 7), r = e1.substring(7, 9)) : (t = e1.substring(1, 2), n = e1.substring(2, 3), o = e1.substring(3, 4), r = e1.substring(4, 5), t += t, n += n, o += o, r += r), {\n            red: parseInt(t, 16),\n            green: parseInt(n, 16),\n            blue: parseInt(o, 16),\n            alpha: r ? parseInt(r, 16) / 255 : 1\n        };\n    },\n    transform: ml.transform\n}, bl = {\n    test: fl(\"hsl\", \"hue\"),\n    parse: pl(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue: e1, saturation: t, lightness: n, alpha: o = 1 })=>\"hsla(\" + Math.round(e1) + \", \" + Ma.transform(Sa(t)) + \", \" + Ma.transform(Sa(n)) + \", \" + Sa(xa.transform(o)) + \")\"\n}, yl = {\n    test: (e1)=>ml.test(e1) || vl.test(e1) || bl.test(e1),\n    parse: (e1)=>ml.test(e1) ? ml.parse(e1) : bl.test(e1) ? bl.parse(e1) : vl.parse(e1),\n    transform: (e1)=>Aa(e1) ? e1 : e1.hasOwnProperty(\"red\") ? ml.transform(e1) : bl.transform(e1)\n}, wl = (e1, t, n)=>-n * e1 + n * t + e1;\nfunction xl(e1, t, n) {\n    return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? e1 + 6 * (t - e1) * n : n < .5 ? t : n < 2 / 3 ? e1 + (t - e1) * (2 / 3 - n) * 6 : e1;\n}\nconst kl = (e1, t, n)=>{\n    const o = e1 * e1;\n    return Math.sqrt(Math.max(0, n * (t * t - o) + o));\n}, Sl = [\n    vl,\n    ml,\n    bl\n];\nfunction Pl(e1) {\n    const t = ((e1)=>Sl.find((t)=>t.test(e1)))(e1);\n    let n = t.parse(e1);\n    return t === bl && (n = function({ hue: e1, saturation: t, lightness: n, alpha: o }) {\n        e1 /= 360, n /= 100;\n        let r = 0, i = 0, a = 0;\n        if (t /= 100) {\n            const o = n < .5 ? n * (1 + t) : n + t - n * t, s = 2 * n - o;\n            r = xl(s, o, e1 + 1 / 3), i = xl(s, o, e1), a = xl(s, o, e1 - 1 / 3);\n        } else r = i = a = n;\n        return {\n            red: Math.round(255 * r),\n            green: Math.round(255 * i),\n            blue: Math.round(255 * a),\n            alpha: o\n        };\n    }(n)), n;\n}\nconst El = (e1, t)=>{\n    const n = Pl(e1), o = Pl(t), r = {\n        ...n\n    };\n    return (e1)=>(r.red = kl(n.red, o.red, e1), r.green = kl(n.green, o.green, e1), r.blue = kl(n.blue, o.blue, e1), r.alpha = wl(n.alpha, o.alpha, e1), ml.transform(r));\n};\nconst Tl = {\n    regex: /var\\s*\\(\\s*--[\\w-]+(\\s*,\\s*(?:(?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)+)?\\s*\\)/g,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: fs\n}, Al = {\n    regex: Ea,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: yl.parse\n}, Rl = {\n    regex: Pa,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: wa.parse\n};\nfunction Cl(e1, { regex: t, countKey: n, token: o, parse: r }) {\n    const i = e1.tokenised.match(t);\n    i && (e1[\"num\" + n] = i.length, e1.tokenised = e1.tokenised.replace(t, o), e1.values.push(...i.map(r)));\n}\nfunction Ml(e1) {\n    const t = e1.toString(), n = {\n        value: t,\n        tokenised: t,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0\n    };\n    return n.value.includes(\"var(--\") && Cl(n, Tl), Cl(n, Al), Cl(n, Rl), n;\n}\nfunction Ol(e1) {\n    return Ml(e1).values;\n}\nfunction Bl(e1) {\n    const { values: t, numColors: n, numVars: o, tokenised: r } = Ml(e1), i = t.length;\n    return (e1)=>{\n        let t = r;\n        for(let r = 0; r < i; r++)t = r < o ? t.replace(Tl.token, e1[r]) : r < o + n ? t.replace(Al.token, yl.transform(e1[r])) : t.replace(Rl.token, Sa(e1[r]));\n        return t;\n    };\n}\nconst jl = (e1)=>\"number\" == typeof e1 ? 0 : e1;\nconst zl = {\n    test: function(e1) {\n        var t, n;\n        return isNaN(e1) && Aa(e1) && ((null === (t = e1.match(Pa)) || void 0 === t ? void 0 : t.length) || 0) + ((null === (n = e1.match(Ea)) || void 0 === n ? void 0 : n.length) || 0) > 0;\n    },\n    parse: Ol,\n    createTransformer: Bl,\n    getAnimatableNone: function(e1) {\n        const t = Ol(e1);\n        return Bl(e1)(t.map(jl));\n    }\n}, Ll = (e1, t)=>(n)=>`${n > 0 ? t : e1}`;\nfunction Vl(e1, t) {\n    return \"number\" == typeof e1 ? (n)=>wl(e1, t, n) : yl.test(e1) ? El(e1, t) : e1.startsWith(\"var(\") ? Ll(e1, t) : $l(e1, t);\n}\nconst Dl = (e1, t)=>{\n    const n = [\n        ...e1\n    ], o = n.length, r = e1.map((e1, n)=>Vl(e1, t[n]));\n    return (e1)=>{\n        for(let t = 0; t < o; t++)n[t] = r[t](e1);\n        return n;\n    };\n}, _l = (e1, t)=>{\n    const n = {\n        ...e1,\n        ...t\n    }, o = {};\n    for(const r in n)void 0 !== e1[r] && void 0 !== t[r] && (o[r] = Vl(e1[r], t[r]));\n    return (e1)=>{\n        for(const t in o)n[t] = o[t](e1);\n        return n;\n    };\n}, $l = (e1, t)=>{\n    const n = zl.createTransformer(t), o = Ml(e1), r = Ml(t);\n    return o.numVars === r.numVars && o.numColors === r.numColors && o.numNumbers >= r.numNumbers ? Ts(Dl(o.values, r.values), n) : Ll(e1, t);\n}, Fl = (e1, t, n)=>{\n    const o = t - e1;\n    return 0 === o ? 1 : (n - e1) / o;\n}, Il = (e1, t)=>(n)=>wl(e1, t, n);\nfunction Hl(e1, t, n) {\n    const o = [], r = n || function(e1) {\n        return \"number\" == typeof e1 ? Il : \"string\" == typeof e1 ? yl.test(e1) ? El : $l : Array.isArray(e1) ? Dl : \"object\" == typeof e1 ? _l : Il;\n    }(e1[0]), i = e1.length - 1;\n    for(let n = 0; n < i; n++){\n        let i = r(e1[n], e1[n + 1]);\n        if (t) {\n            const e1 = Array.isArray(t) ? t[n] || fs : t;\n            i = Ts(e1, i);\n        }\n        o.push(i);\n    }\n    return o;\n}\nfunction Nl(e1, t, { clamp: n = !0, ease: o, mixer: r } = {}) {\n    const i = e1.length;\n    if (1 === i) return ()=>t[0];\n    e1[0] > e1[i - 1] && (e1 = [\n        ...e1\n    ].reverse(), t = [\n        ...t\n    ].reverse());\n    const a = Hl(t, o, r), s = a.length, l = (t)=>{\n        let n = 0;\n        if (s > 1) for(; n < e1.length - 2 && !(t < e1[n + 1]); n++);\n        const o = Fl(e1[n], e1[n + 1], t);\n        return a[n](o);\n    };\n    return n ? (t)=>l(ya(e1[0], e1[i - 1], t)) : l;\n}\nfunction Wl(e1) {\n    const t = [\n        0\n    ];\n    return function(e1, t) {\n        const n = e1[e1.length - 1];\n        for(let o = 1; o <= t; o++){\n            const r = Fl(0, t, o);\n            e1.push(wl(n, 1, r));\n        }\n    }(t, e1.length - 1), t;\n}\nfunction Ul({ duration: e1 = 300, keyframes: t, times: n, ease: o = \"easeInOut\" }) {\n    const r = nl(o) ? o.map(hl) : hl(o), i = {\n        done: !1,\n        value: t[0]\n    }, a = function(e1, t) {\n        return e1.map((e1)=>e1 * t);\n    }(n && n.length === t.length ? n : Wl(t), e1), s = Nl(a, t, {\n        ease: Array.isArray(r) ? r : (l = t, c = r, l.map(()=>c || tl).splice(0, l.length - 1))\n    });\n    var l, c;\n    return {\n        calculatedDuration: e1,\n        next: (t)=>(i.value = s(t), i.done = t >= e1, i)\n    };\n}\nfunction Yl(e1, t) {\n    return t ? e1 * (1e3 / t) : 0;\n}\nconst Gl = 5;\nfunction Xl(e1, t, n) {\n    const o = Math.max(t - Gl, 0);\n    return Yl(n - e1(o), t - o);\n}\nconst ql = .001, Kl = .01, Zl = 10, Jl = .05, Ql = 1;\nfunction ec({ duration: e1 = 800, bounce: t = .25, velocity: n = 0, mass: o = 1 }) {\n    let r, i, a = 1 - t;\n    a = ya(Jl, Ql, a), e1 = ya(Kl, Zl, Gs(e1)), a < 1 ? (r = (t)=>{\n        const o = t * a, r = o * e1, i = o - n, s = nc(t, a), l = Math.exp(-r);\n        return ql - i / s * l;\n    }, i = (t)=>{\n        const o = t * a * e1, i = o * n + n, s = Math.pow(a, 2) * Math.pow(t, 2) * e1, l = Math.exp(-o), c = nc(Math.pow(t, 2), a);\n        return (-r(t) + ql > 0 ? -1 : 1) * ((i - s) * l) / c;\n    }) : (r = (t)=>Math.exp(-t * e1) * ((t - n) * e1 + 1) - ql, i = (t)=>Math.exp(-t * e1) * (e1 * e1 * (n - t)));\n    const s = function(e1, t, n) {\n        let o = n;\n        for(let n = 1; n < tc; n++)o -= e1(o) / t(o);\n        return o;\n    }(r, i, 5 / e1);\n    if (e1 = Ys(e1), isNaN(s)) return {\n        stiffness: 100,\n        damping: 10,\n        duration: e1\n    };\n    {\n        const t = Math.pow(s, 2) * o;\n        return {\n            stiffness: t,\n            damping: 2 * a * Math.sqrt(o * t),\n            duration: e1\n        };\n    }\n}\nconst tc = 12;\nfunction nc(e1, t) {\n    return e1 * Math.sqrt(1 - t * t);\n}\nconst oc = [\n    \"duration\",\n    \"bounce\"\n], rc = [\n    \"stiffness\",\n    \"damping\",\n    \"mass\"\n];\nfunction ic(e1, t) {\n    return t.some((t)=>void 0 !== e1[t]);\n}\nfunction ac({ keyframes: e1, restDelta: t, restSpeed: n, ...o }) {\n    const r = e1[0], i = e1[e1.length - 1], a = {\n        done: !1,\n        value: r\n    }, { stiffness: s, damping: l, mass: c, duration: u, velocity: d, isResolvedFromDuration: h } = function(e1) {\n        let t = {\n            velocity: 0,\n            stiffness: 100,\n            damping: 10,\n            mass: 1,\n            isResolvedFromDuration: !1,\n            ...e1\n        };\n        if (!ic(e1, rc) && ic(e1, oc)) {\n            const n = ec(e1);\n            t = {\n                ...t,\n                ...n,\n                mass: 1\n            }, t.isResolvedFromDuration = !0;\n        }\n        return t;\n    }({\n        ...o,\n        velocity: -Gs(o.velocity || 0)\n    }), f = d || 0, p = l / (2 * Math.sqrt(s * c)), g = i - r, m = Gs(Math.sqrt(s / c)), v = Math.abs(g) < 5;\n    let b;\n    if (n || (n = v ? .01 : 2), t || (t = v ? .005 : .5), p < 1) {\n        const e1 = nc(m, p);\n        b = (t)=>{\n            const n = Math.exp(-p * m * t);\n            return i - n * ((f + p * m * g) / e1 * Math.sin(e1 * t) + g * Math.cos(e1 * t));\n        };\n    } else if (1 === p) b = (e1)=>i - Math.exp(-m * e1) * (g + (f + m * g) * e1);\n    else {\n        const e1 = m * Math.sqrt(p * p - 1);\n        b = (t)=>{\n            const n = Math.exp(-p * m * t), o = Math.min(e1 * t, 300);\n            return i - n * ((f + p * m * g) * Math.sinh(o) + e1 * g * Math.cosh(o)) / e1;\n        };\n    }\n    return {\n        calculatedDuration: h && u || null,\n        next: (e1)=>{\n            const o = b(e1);\n            if (h) a.done = e1 >= u;\n            else {\n                let r = f;\n                0 !== e1 && (r = p < 1 ? Xl(b, e1, o) : 0);\n                const s = Math.abs(r) <= n, l = Math.abs(i - o) <= t;\n                a.done = s && l;\n            }\n            return a.value = a.done ? i : o, a;\n        }\n    };\n}\nfunction sc({ keyframes: e1, velocity: t = 0, power: n = .8, timeConstant: o = 325, bounceDamping: r = 10, bounceStiffness: i = 500, modifyTarget: a, min: s, max: l, restDelta: c = .5, restSpeed: u }) {\n    const d = e1[0], h = {\n        done: !1,\n        value: d\n    }, f = (e1)=>void 0 === s ? l : void 0 === l || Math.abs(s - e1) < Math.abs(l - e1) ? s : l;\n    let p = n * t;\n    const g = d + p, m = void 0 === a ? g : a(g);\n    m !== g && (p = m - d);\n    const v = (e1)=>-p * Math.exp(-e1 / o), b = (e1)=>m + v(e1), y = (e1)=>{\n        const t = v(e1), n = b(e1);\n        h.done = Math.abs(t) <= c, h.value = h.done ? m : n;\n    };\n    let w, x;\n    const k = (e1)=>{\n        ((e1)=>void 0 !== s && e1 < s || void 0 !== l && e1 > l)(h.value) && (w = e1, x = ac({\n            keyframes: [\n                h.value,\n                f(h.value)\n            ],\n            velocity: Xl(b, e1, h.value),\n            damping: r,\n            stiffness: i,\n            restDelta: c,\n            restSpeed: u\n        }));\n    };\n    return k(0), {\n        calculatedDuration: null,\n        next: (e1)=>{\n            let t = !1;\n            return x || void 0 !== w || (t = !0, y(e1), k(e1)), void 0 !== w && e1 > w ? x.next(e1 - w) : (!t && y(e1), h);\n        }\n    };\n}\nlet lc;\nfunction cc() {\n    lc = void 0;\n}\nconst uc = {\n    now: ()=>(void 0 === lc && uc.set(ms.isProcessing || Di ? ms.timestamp : performance.now()), lc),\n    set: (e1)=>{\n        lc = e1, queueMicrotask(cc);\n    }\n}, dc = (e1)=>{\n    const t = ({ timestamp: t })=>e1(t);\n    return {\n        start: ()=>ps.update(t, !0),\n        stop: ()=>gs(t),\n        now: ()=>ms.isProcessing ? ms.timestamp : uc.now()\n    };\n}, hc = 2e4;\nfunction fc(e1) {\n    let t = 0;\n    let n = e1.next(t);\n    for(; !n.done && t < hc;)t += 50, n = e1.next(t);\n    return t >= hc ? 1 / 0 : t;\n}\nconst pc = {\n    decay: sc,\n    inertia: sc,\n    tween: Ul,\n    keyframes: Ul,\n    spring: ac\n};\nfunction gc({ autoplay: e1 = !0, delay: t = 0, driver: n = dc, keyframes: o, type: r = \"keyframes\", repeat: i = 0, repeatDelay: a = 0, repeatType: s = \"loop\", onPlay: l, onStop: c, onComplete: u, onUpdate: d, ...h }) {\n    let f, p, g = 1, m = !1;\n    const v = ()=>{\n        p = new Promise((e1)=>{\n            f = e1;\n        });\n    };\n    let b;\n    v();\n    const y = pc[r] || Ul;\n    let w;\n    y !== Ul && \"number\" != typeof o[0] && (w = Nl([\n        0,\n        100\n    ], o, {\n        clamp: !1\n    }), o = [\n        0,\n        100\n    ]);\n    const x = y({\n        ...h,\n        keyframes: o\n    });\n    let k;\n    \"mirror\" === s && (k = y({\n        ...h,\n        keyframes: [\n            ...o\n        ].reverse(),\n        velocity: -(h.velocity || 0)\n    }));\n    let S = \"idle\", P = null, E = null, T = null;\n    null === x.calculatedDuration && i && (x.calculatedDuration = fc(x));\n    const { calculatedDuration: A } = x;\n    let R = 1 / 0, C = 1 / 0;\n    null !== A && (R = A + a, C = R * (i + 1) - a);\n    let M = 0;\n    const O = (e1)=>{\n        if (null === E) return;\n        g > 0 && (E = Math.min(E, e1)), g < 0 && (E = Math.min(e1 - C / g, E)), M = null !== P ? P : Math.round(e1 - E) * g;\n        const n = M - t * (g >= 0 ? 1 : -1), r = g >= 0 ? n < 0 : n > C;\n        M = Math.max(n, 0), \"finished\" === S && null === P && (M = C);\n        let l = M, c = x;\n        if (i) {\n            const e1 = Math.min(M, C) / R;\n            let t = Math.floor(e1), n = e1 % 1;\n            !n && e1 >= 1 && (n = 1), 1 === n && t--, t = Math.min(t, i + 1);\n            Boolean(t % 2) && (\"reverse\" === s ? (n = 1 - n, a && (n -= a / R)) : \"mirror\" === s && (c = k)), l = ya(0, 1, n) * R;\n        }\n        const u = r ? {\n            done: !1,\n            value: o[0]\n        } : c.next(l);\n        w && (u.value = w(u.value));\n        let { done: h } = u;\n        r || null === A || (h = g >= 0 ? M >= C : M <= 0);\n        const f = null === P && (\"finished\" === S || \"running\" === S && h);\n        return d && d(u.value), f && z(), u;\n    }, B = ()=>{\n        b && b.stop(), b = void 0;\n    }, j = ()=>{\n        S = \"idle\", B(), f(), v(), E = T = null;\n    }, z = ()=>{\n        S = \"finished\", u && u(), B(), f();\n    }, L = ()=>{\n        if (m) return;\n        b || (b = n(O));\n        const e1 = b.now();\n        l && l(), null !== P ? E = e1 - P : E && \"finished\" !== S || (E = e1), \"finished\" === S && v(), T = E, P = null, S = \"running\", b.start();\n    };\n    e1 && L();\n    const V = {\n        then: (e1, t)=>p.then(e1, t),\n        get time () {\n            return Gs(M);\n        },\n        set time (e){\n            e = Ys(e), M = e, null === P && b && 0 !== g ? E = b.now() - e / g : P = e;\n        },\n        get duration () {\n            const e1 = null === x.calculatedDuration ? fc(x) : x.calculatedDuration;\n            return Gs(e1);\n        },\n        get speed () {\n            return g;\n        },\n        set speed (e){\n            e !== g && b && (g = e, V.time = Gs(M));\n        },\n        get state () {\n            return S;\n        },\n        play: L,\n        pause: ()=>{\n            S = \"paused\", P = M;\n        },\n        stop: ()=>{\n            m = !0, \"idle\" !== S && (S = \"idle\", c && c(), j());\n        },\n        cancel: ()=>{\n            null !== T && O(T), j();\n        },\n        complete: ()=>{\n            S = \"finished\";\n        },\n        sample: (e1)=>(E = 0, O(e1))\n    };\n    return V;\n}\nconst mc = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10\n}, vc = {\n    type: \"keyframes\",\n    duration: .8\n}, bc = {\n    type: \"keyframes\",\n    ease: [\n        .25,\n        .1,\n        .35,\n        1\n    ],\n    duration: .3\n}, yc = (e1, { keyframes: t })=>t.length > 2 ? vc : ua.has(e1) ? e1.startsWith(\"scale\") ? {\n        type: \"spring\",\n        stiffness: 550,\n        damping: 0 === t[1] ? 2 * Math.sqrt(550) : 30,\n        restSpeed: 10\n    } : mc : bc, wc = (e1, t)=>\"zIndex\" !== e1 && (!(\"number\" != typeof t && !Array.isArray(t)) || !(\"string\" != typeof t || !zl.test(t) && \"0\" !== t || t.startsWith(\"url(\"))), xc = new Set([\n    \"brightness\",\n    \"contrast\",\n    \"saturate\",\n    \"opacity\"\n]);\nfunction kc(e1) {\n    const [t, n] = e1.slice(0, -1).split(\"(\");\n    if (\"drop-shadow\" === t) return e1;\n    const [o] = n.match(Pa) || [];\n    if (!o) return e1;\n    const r = n.replace(o, \"\");\n    let i = xc.has(t) ? 1 : 0;\n    return o !== n && (i *= 100), t + \"(\" + i + r + \")\";\n}\nconst Sc = /([a-z-]*)\\(.*?\\)/g, Pc = {\n    ...zl,\n    getAnimatableNone: (e1)=>{\n        const t = e1.match(Sc);\n        return t ? t.map(kc).join(\" \") : e1;\n    }\n}, Ec = {\n    ...Va,\n    color: yl,\n    backgroundColor: yl,\n    outlineColor: yl,\n    fill: yl,\n    stroke: yl,\n    borderColor: yl,\n    borderTopColor: yl,\n    borderRightColor: yl,\n    borderBottomColor: yl,\n    borderLeftColor: yl,\n    filter: Pc,\n    WebkitFilter: Pc\n}, Tc = (e1)=>Ec[e1];\nfunction Ac(e1, t) {\n    let n = Tc(e1);\n    return n !== Pc && (n = zl), n.getAnimatableNone ? n.getAnimatableNone(t) : void 0;\n}\nconst Rc = (e1)=>/^0[^.\\s]+$/.test(e1);\nfunction Cc(e1) {\n    return \"number\" == typeof e1 ? 0 === e1 : null !== e1 ? \"none\" === e1 || \"0\" === e1 || Rc(e1) : void 0;\n}\nfunction Mc(e1, t) {\n    return e1[t] || e1.default || e1;\n}\nconst Oc = (e1, t, n, o = {})=>(r)=>{\n        const i = Mc(o, e1) || {}, a = i.delay || o.delay || 0;\n        let { elapsed: s = 0 } = o;\n        s -= Ys(a);\n        const l = function(e1, t, n, o) {\n            const r = wc(t, n);\n            let i;\n            i = Array.isArray(n) ? [\n                ...n\n            ] : [\n                null,\n                n\n            ];\n            const a = void 0 !== o.from ? o.from : e1.get();\n            let s;\n            const l = [];\n            for(let e1 = 0; e1 < i.length; e1++)null === i[e1] && (i[e1] = 0 === e1 ? a : i[e1 - 1]), Cc(i[e1]) && l.push(e1), \"string\" == typeof i[e1] && \"none\" !== i[e1] && \"0\" !== i[e1] && (s = i[e1]);\n            if (r && l.length && s) for(let e1 = 0; e1 < l.length; e1++)i[l[e1]] = Ac(t, s);\n            return i;\n        }(t, e1, n, i), c = l[0], u = l[l.length - 1], d = wc(e1, c), h = wc(e1, u);\n        let f = {\n            keyframes: l,\n            velocity: t.getVelocity(),\n            ease: \"easeOut\",\n            ...i,\n            delay: -s,\n            onUpdate: (e1)=>{\n                t.set(e1), i.onUpdate && i.onUpdate(e1);\n            },\n            onComplete: ()=>{\n                r(), i.onComplete && i.onComplete();\n            }\n        };\n        if (function({ when: e1, delay: t, delayChildren: n, staggerChildren: o, staggerDirection: r, repeat: i, repeatType: a, repeatDelay: s, from: l, elapsed: c, ...u }) {\n            return !!Object.keys(u).length;\n        }(i) || (f = {\n            ...f,\n            ...yc(e1, f)\n        }), f.duration && (f.duration = Ys(f.duration)), f.repeatDelay && (f.repeatDelay = Ys(f.repeatDelay)), !d || !h || Xs || !1 === i.type || Vi) return function({ keyframes: e1, delay: t, onUpdate: n, onComplete: o }) {\n            const r = ()=>(n && n(e1[e1.length - 1]), o && o(), {\n                    time: 0,\n                    speed: 1,\n                    duration: 0,\n                    play: fs,\n                    pause: fs,\n                    stop: fs,\n                    then: (e1)=>(e1(), Promise.resolve()),\n                    cancel: fs,\n                    complete: fs\n                });\n            return t ? gc({\n                keyframes: [\n                    0,\n                    1\n                ],\n                duration: 0,\n                delay: t,\n                onComplete: r\n            }) : r();\n        }(f);\n        if (!o.isHandoff && t.owner && t.owner.current instanceof HTMLElement && !t.owner.getProps().onUpdate) {\n            const e1 = !1;\n            if (e1) return e1;\n        }\n        return gc(f);\n    };\nfunction Bc(e1) {\n    return Boolean(ha(e1) && e1.add);\n}\nconst jc = (e1)=>/^\\-?\\d*\\.?\\d+$/.test(e1);\nfunction zc(e1, t) {\n    -1 === e1.indexOf(t) && e1.push(t);\n}\nfunction Lc(e1, t) {\n    const n = e1.indexOf(t);\n    n > -1 && e1.splice(n, 1);\n}\nclass Vc {\n    constructor(){\n        this.subscriptions = [];\n    }\n    add(e1) {\n        return zc(this.subscriptions, e1), ()=>Lc(this.subscriptions, e1);\n    }\n    notify(e1, t, n) {\n        const o = this.subscriptions.length;\n        if (o) if (1 === o) this.subscriptions[0](e1, t, n);\n        else for(let r = 0; r < o; r++){\n            const o = this.subscriptions[r];\n            o && o(e1, t, n);\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\nclass Dc {\n    constructor(e1, t = {}){\n        var n;\n        this.version = \"11.0.3\", this.canTrackVelocity = !1, this.events = {}, this.updateAndNotify = (e1, t = !0)=>{\n            const n = uc.now();\n            this.updatedAt !== n && this.setPrevFrameValue(), this.prev = this.current, this.setCurrent(e1), this.current !== this.prev && this.events.change && this.events.change.notify(this.current), t && this.events.renderRequest && this.events.renderRequest.notify(this.current);\n        }, this.hasAnimated = !1, this.setCurrent(e1), this.canTrackVelocity = (n = this.current, !isNaN(parseFloat(n))), this.owner = t.owner;\n    }\n    setCurrent(e1) {\n        this.current = e1, this.updatedAt = uc.now();\n    }\n    setPrevFrameValue(e1 = this.current) {\n        this.prevFrameValue = e1, this.prevUpdatedAt = this.updatedAt;\n    }\n    onChange(e1) {\n        return this.on(\"change\", e1);\n    }\n    on(e1, t) {\n        this.events[e1] || (this.events[e1] = new Vc);\n        const n = this.events[e1].add(t);\n        return \"change\" === e1 ? ()=>{\n            n(), ps.read(()=>{\n                this.events.change.getSize() || this.stop();\n            });\n        } : n;\n    }\n    clearListeners() {\n        for(const e1 in this.events)this.events[e1].clear();\n    }\n    attach(e1, t) {\n        this.passiveEffect = e1, this.stopPassiveEffect = t;\n    }\n    set(e1, t = !0) {\n        t && this.passiveEffect ? this.passiveEffect(e1, this.updateAndNotify) : this.updateAndNotify(e1, t);\n    }\n    setWithVelocity(e1, t, n) {\n        this.set(t), this.prev = void 0, this.prevFrameValue = e1, this.prevUpdatedAt = this.updatedAt - n;\n    }\n    jump(e1) {\n        this.updateAndNotify(e1), this.prev = e1, this.prevUpdatedAt = this.prevFrameValue = void 0, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();\n    }\n    get() {\n        return this.current;\n    }\n    getPrevious() {\n        return this.prev;\n    }\n    getVelocity() {\n        const e1 = uc.now();\n        if (!this.canTrackVelocity || void 0 === this.prevFrameValue || e1 - this.updatedAt > 30) return 0;\n        const t = Math.min(this.updatedAt - this.prevUpdatedAt, 30);\n        return Yl(parseFloat(this.current) - parseFloat(this.prevFrameValue), t);\n    }\n    start(e1) {\n        return this.stop(), new Promise((t)=>{\n            this.hasAnimated = !0, this.animation = e1(t), this.events.animationStart && this.events.animationStart.notify();\n        }).then(()=>{\n            this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();\n        });\n    }\n    stop() {\n        this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();\n    }\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    destroy() {\n        this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();\n    }\n}\nfunction _c(e1, t) {\n    return new Dc(e1, t);\n}\nconst $c = (e1)=>(t)=>t.test(e1), Fc = [\n    wa,\n    Oa,\n    Ma,\n    Ca,\n    ja,\n    Ba,\n    {\n        test: (e1)=>\"auto\" === e1,\n        parse: (e1)=>e1\n    }\n], Ic = (e1)=>Fc.find($c(e1)), Hc = [\n    ...Fc,\n    yl,\n    zl\n], Nc = (e1)=>Hc.find($c(e1));\nfunction Wc(e1, t, n) {\n    e1.hasValue(t) ? e1.getValue(t).set(n) : e1.addValue(t, _c(n));\n}\nfunction Uc(e1, t) {\n    if (!t) return;\n    return (t[e1] || t.default || t).from;\n}\nfunction Yc({ protectedKeys: e1, needsAnimating: t }, n) {\n    const o = e1.hasOwnProperty(n) && !0 !== t[n];\n    return t[n] = !1, o;\n}\nfunction Gc(e1, t) {\n    const n = e1.get();\n    if (!Array.isArray(t)) return n !== t;\n    for(let e1 = 0; e1 < t.length; e1++)if (t[e1] !== n) return !0;\n}\nfunction Xc(e1, t, { delay: n = 0, transitionOverride: o, type: r } = {}) {\n    let { transition: i = e1.getDefaultTransition(), transitionEnd: a, ...s } = e1.makeTargetAnimatable(t);\n    const l = e1.getValue(\"willChange\");\n    o && (i = o);\n    const c = [], u = r && e1.animationState && e1.animationState.getState()[r];\n    for(const t in s){\n        const o = e1.getValue(t), r = s[t];\n        if (!o || void 0 === r || u && Yc(u, t)) continue;\n        const a = {\n            delay: n,\n            elapsed: 0,\n            ...Mc(i || {}, t)\n        };\n        if (window.HandoffAppearAnimations) {\n            const n = e1.getProps()[Li];\n            if (n) {\n                const e1 = window.HandoffAppearAnimations(n, t, o, ps);\n                null !== e1 && (a.elapsed = e1, a.isHandoff = !0);\n            }\n        }\n        let d = !a.isHandoff && !Gc(o, r);\n        if (\"spring\" === a.type && (o.getVelocity() || a.velocity) && (d = !1), o.animation && (d = !1), d) continue;\n        o.start(Oc(t, o, r, e1.shouldReduceMotion && ua.has(t) ? {\n            type: !1\n        } : a));\n        const h = o.animation;\n        Bc(l) && (l.add(t), h.then(()=>l.remove(t))), c.push(h);\n    }\n    return a && Promise.all(c).then(()=>{\n        a && function(e1, t) {\n            const n = Ws(e1, t);\n            let { transitionEnd: o = {}, transition: r = {}, ...i } = n ? e1.makeTargetAnimatable(n, !1) : {};\n            i = {\n                ...i,\n                ...o\n            };\n            for(const t in i)Wc(e1, t, cs(i[t]));\n        }(e1, a);\n    }), c;\n}\nfunction qc(e1, t, n = {}) {\n    const o = Ws(e1, t, n.custom);\n    let { transition: r = e1.getDefaultTransition() || {} } = o || {};\n    n.transitionOverride && (r = n.transitionOverride);\n    const i = o ? ()=>Promise.all(Xc(e1, o, n)) : ()=>Promise.resolve(), a = e1.variantChildren && e1.variantChildren.size ? (o = 0)=>{\n        const { delayChildren: i = 0, staggerChildren: a, staggerDirection: s } = r;\n        return function(e1, t, n = 0, o = 0, r = 1, i) {\n            const a = [], s = (e1.variantChildren.size - 1) * o, l = 1 === r ? (e1 = 0)=>e1 * o : (e1 = 0)=>s - e1 * o;\n            return Array.from(e1.variantChildren).sort(Kc).forEach((e1, o)=>{\n                e1.notify(\"AnimationStart\", t), a.push(qc(e1, t, {\n                    ...i,\n                    delay: n + l(o)\n                }).then(()=>e1.notify(\"AnimationComplete\", t)));\n            }), Promise.all(a);\n        }(e1, t, i + o, a, s, n);\n    } : ()=>Promise.resolve(), { when: s } = r;\n    if (s) {\n        const [e1, t] = \"beforeChildren\" === s ? [\n            i,\n            a\n        ] : [\n            a,\n            i\n        ];\n        return e1().then(()=>t());\n    }\n    return Promise.all([\n        i(),\n        a(n.delay)\n    ]);\n}\nfunction Kc(e1, t) {\n    return e1.sortNodePosition(t);\n}\nconst Zc = [\n    ...Yi\n].reverse(), Jc = Yi.length;\nfunction Qc(e1) {\n    return (t)=>Promise.all(t.map(({ animation: t, options: n })=>(function(e1, t, n = {}) {\n                let o;\n                if (e1.notify(\"AnimationStart\", t), Array.isArray(t)) {\n                    const r = t.map((t)=>qc(e1, t, n));\n                    o = Promise.all(r);\n                } else if (\"string\" == typeof t) o = qc(e1, t, n);\n                else {\n                    const r = \"function\" == typeof t ? Ws(e1, t, n.custom) : t;\n                    o = Promise.all(Xc(e1, r, n));\n                }\n                return o.then(()=>e1.notify(\"AnimationComplete\", t));\n            })(e1, t, n)));\n}\nfunction eu(e1) {\n    let t = Qc(e1);\n    const n = {\n        animate: nu(!0),\n        whileInView: nu(),\n        whileHover: nu(),\n        whileTap: nu(),\n        whileDrag: nu(),\n        whileFocus: nu(),\n        exit: nu()\n    };\n    let o = !0;\n    const r = (t, n)=>{\n        const o = Ws(e1, n);\n        if (o) {\n            const { transition: e1, transitionEnd: n, ...r } = o;\n            t = {\n                ...t,\n                ...r,\n                ...n\n            };\n        }\n        return t;\n    };\n    function i(i, a) {\n        const s = e1.getProps(), l = e1.getVariantContext(!0) || {}, c = [], u = new Set;\n        let d = {}, h = 1 / 0;\n        for(let t = 0; t < Jc; t++){\n            const f = Zc[t], p = n[f], g = void 0 !== s[f] ? s[f] : l[f], m = Wi(g), v = f === a ? p.isActive : null;\n            !1 === v && (h = t);\n            let b = g === l[f] && g !== s[f] && m;\n            if (b && o && e1.manuallyAnimateOnMount && (b = !1), p.protectedKeys = {\n                ...d\n            }, !p.isActive && null === v || !g && !p.prevProp || Ui(g) || \"boolean\" == typeof g) continue;\n            let y = tu(p.prevProp, g) || f === a && p.isActive && !b && m || t > h && m, w = !1;\n            const x = Array.isArray(g) ? g : [\n                g\n            ];\n            let k = x.reduce(r, {});\n            !1 === v && (k = {});\n            const { prevResolvedValues: S = {} } = p, P = {\n                ...S,\n                ...k\n            }, E = (e1)=>{\n                y = !0, u.has(e1) && (w = !0, u.delete(e1)), p.needsAnimating[e1] = !0;\n            };\n            for(const e1 in P){\n                const t = k[e1], n = S[e1];\n                if (d.hasOwnProperty(e1)) continue;\n                let o = !1;\n                o = ss(t) && ss(n) ? !Ns(t, n) : t !== n, o ? void 0 !== t ? E(e1) : u.add(e1) : void 0 !== t && u.has(e1) ? E(e1) : p.protectedKeys[e1] = !0;\n            }\n            p.prevProp = g, p.prevResolvedValues = k, p.isActive && (d = {\n                ...d,\n                ...k\n            }), o && e1.blockInitialAnimation && (y = !1), !y || b && !w || c.push(...x.map((e1)=>({\n                    animation: e1,\n                    options: {\n                        type: f,\n                        ...i\n                    }\n                })));\n        }\n        if (u.size) {\n            const t = {};\n            u.forEach((n)=>{\n                const o = e1.getBaseTarget(n);\n                void 0 !== o && (t[n] = o);\n            }), c.push({\n                animation: t\n            });\n        }\n        let f = Boolean(c.length);\n        return !o || !1 !== s.initial && s.initial !== s.animate || e1.manuallyAnimateOnMount || (f = !1), o = !1, f ? t(c) : Promise.resolve();\n    }\n    return {\n        animateChanges: i,\n        setActive: function(t, o, r) {\n            var a;\n            if (n[t].isActive === o) return Promise.resolve();\n            null === (a = e1.variantChildren) || void 0 === a || a.forEach((e1)=>{\n                var n;\n                return null === (n = e1.animationState) || void 0 === n ? void 0 : n.setActive(t, o);\n            }), n[t].isActive = o;\n            const s = i(r, t);\n            for(const e1 in n)n[e1].protectedKeys = {};\n            return s;\n        },\n        setAnimateFunction: function(n) {\n            t = n(e1);\n        },\n        getState: ()=>n\n    };\n}\nfunction tu(e1, t) {\n    return \"string\" == typeof t ? t !== e1 : !!Array.isArray(t) && !Ns(t, e1);\n}\nfunction nu(e1 = !1) {\n    return {\n        isActive: e1,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {}\n    };\n}\nlet ou = 0;\nconst ru = {\n    animation: {\n        Feature: class extends Bs {\n            constructor(e1){\n                super(e1), e1.animationState || (e1.animationState = eu(e1));\n            }\n            updateAnimationControlsSubscription() {\n                const { animate: e1 } = this.node.getProps();\n                this.unmount(), Ui(e1) && (this.unmount = e1.subscribe(this.node));\n            }\n            mount() {\n                this.updateAnimationControlsSubscription();\n            }\n            update() {\n                const { animate: e1 } = this.node.getProps(), { animate: t } = this.node.prevProps || {};\n                e1 !== t && this.updateAnimationControlsSubscription();\n            }\n            unmount() {}\n        }\n    },\n    exit: {\n        Feature: class extends Bs {\n            constructor(){\n                super(...arguments), this.id = ou++;\n            }\n            update() {\n                if (!this.node.presenceContext) return;\n                const { isPresent: e1, onExitComplete: t, custom: n } = this.node.presenceContext, { isPresent: o } = this.node.prevPresenceContext || {};\n                if (!this.node.animationState || e1 === o) return;\n                const r = this.node.animationState.setActive(\"exit\", !e1, {\n                    custom: null != n ? n : this.node.getProps().custom\n                });\n                t && !e1 && r.then(()=>t(this.id));\n            }\n            mount() {\n                const { register: e1 } = this.node.presenceContext || {};\n                e1 && (this.unmount = e1(this.id));\n            }\n            unmount() {}\n        }\n    }\n}, iu = (e1, t)=>Math.abs(e1 - t);\nclass au {\n    constructor(e1, t, { transformPagePoint: n, contextWindow: o, dragSnapToOrigin: r = !1 } = {}){\n        if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.contextWindow = window, this.updatePoint = ()=>{\n            if (!this.lastMoveEvent || !this.lastMoveEventInfo) return;\n            const e1 = cu(this.lastMoveEventInfo, this.history), t = null !== this.startEvent, n = function(e1, t) {\n                const n = iu(e1.x, t.x), o = iu(e1.y, t.y);\n                return Math.sqrt(n ** 2 + o ** 2);\n            }(e1.offset, {\n                x: 0,\n                y: 0\n            }) >= 3;\n            if (!t && !n) return;\n            const { point: o } = e1, { timestamp: r } = ms;\n            this.history.push({\n                ...o,\n                timestamp: r\n            });\n            const { onStart: i, onMove: a } = this.handlers;\n            t || (i && i(this.lastMoveEvent, e1), this.startEvent = this.lastMoveEvent), a && a(this.lastMoveEvent, e1);\n        }, this.handlePointerMove = (e1, t)=>{\n            this.lastMoveEvent = e1, this.lastMoveEventInfo = su(t, this.transformPagePoint), ps.update(this.updatePoint, !0);\n        }, this.handlePointerUp = (e1, t)=>{\n            this.end();\n            const { onEnd: n, onSessionEnd: o, resumeAnimation: r } = this.handlers;\n            if (this.dragSnapToOrigin && r && r(), !this.lastMoveEvent || !this.lastMoveEventInfo) return;\n            const i = cu(\"pointercancel\" === e1.type ? this.lastMoveEventInfo : su(t, this.transformPagePoint), this.history);\n            this.startEvent && n && n(e1, i), o && o(e1, i);\n        }, !xs(e1)) return;\n        this.dragSnapToOrigin = r, this.handlers = t, this.transformPagePoint = n, this.contextWindow = o || window;\n        const i = su(ks(e1), this.transformPagePoint), { point: a } = i, { timestamp: s } = ms;\n        this.history = [\n            {\n                ...a,\n                timestamp: s\n            }\n        ];\n        const { onSessionStart: l } = t;\n        l && l(e1, cu(i, this.history)), this.removeListeners = Ts(Ps(this.contextWindow, \"pointermove\", this.handlePointerMove), Ps(this.contextWindow, \"pointerup\", this.handlePointerUp), Ps(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(e1) {\n        this.handlers = e1;\n    }\n    end() {\n        this.removeListeners && this.removeListeners(), gs(this.updatePoint);\n    }\n}\nfunction su(e1, t) {\n    return t ? {\n        point: t(e1.point)\n    } : e1;\n}\nfunction lu(e1, t) {\n    return {\n        x: e1.x - t.x,\n        y: e1.y - t.y\n    };\n}\nfunction cu({ point: e1 }, t) {\n    return {\n        point: e1,\n        delta: lu(e1, du(t)),\n        offset: lu(e1, uu(t)),\n        velocity: hu(t, .1)\n    };\n}\nfunction uu(e1) {\n    return e1[0];\n}\nfunction du(e1) {\n    return e1[e1.length - 1];\n}\nfunction hu(e1, t) {\n    if (e1.length < 2) return {\n        x: 0,\n        y: 0\n    };\n    let n = e1.length - 1, o = null;\n    const r = du(e1);\n    for(; n >= 0 && (o = e1[n], !(r.timestamp - o.timestamp > Ys(t)));)n--;\n    if (!o) return {\n        x: 0,\n        y: 0\n    };\n    const i = Gs(r.timestamp - o.timestamp);\n    if (0 === i) return {\n        x: 0,\n        y: 0\n    };\n    const a = {\n        x: (r.x - o.x) / i,\n        y: (r.y - o.y) / i\n    };\n    return a.x === 1 / 0 && (a.x = 0), a.y === 1 / 0 && (a.y = 0), a;\n}\nfunction fu(e1) {\n    return e1.max - e1.min;\n}\nfunction pu(e1, t = 0, n = .01) {\n    return Math.abs(e1 - t) <= n;\n}\nfunction gu(e1, t, n, o = .5) {\n    e1.origin = o, e1.originPoint = wl(t.min, t.max, e1.origin), e1.scale = fu(n) / fu(t), (pu(e1.scale, 1, 1e-4) || isNaN(e1.scale)) && (e1.scale = 1), e1.translate = wl(n.min, n.max, e1.origin) - e1.originPoint, (pu(e1.translate) || isNaN(e1.translate)) && (e1.translate = 0);\n}\nfunction mu(e1, t, n, o) {\n    gu(e1.x, t.x, n.x, o ? o.originX : void 0), gu(e1.y, t.y, n.y, o ? o.originY : void 0);\n}\nfunction vu(e1, t, n) {\n    e1.min = n.min + t.min, e1.max = e1.min + fu(t);\n}\nfunction bu(e1, t, n) {\n    e1.min = t.min - n.min, e1.max = e1.min + fu(t);\n}\nfunction yu(e1, t, n) {\n    bu(e1.x, t.x, n.x), bu(e1.y, t.y, n.y);\n}\nfunction wu(e1, t, n) {\n    return {\n        min: void 0 !== t ? e1.min + t : void 0,\n        max: void 0 !== n ? e1.max + n - (e1.max - e1.min) : void 0\n    };\n}\nfunction xu(e1, t) {\n    let n = t.min - e1.min, o = t.max - e1.max;\n    return t.max - t.min < e1.max - e1.min && ([n, o] = [\n        o,\n        n\n    ]), {\n        min: n,\n        max: o\n    };\n}\nconst ku = .35;\nfunction Su(e1, t, n) {\n    return {\n        min: Pu(e1, t),\n        max: Pu(e1, n)\n    };\n}\nfunction Pu(e1, t) {\n    return \"number\" == typeof e1 ? e1 : e1[t] || 0;\n}\nconst Eu = ()=>({\n        x: {\n            translate: 0,\n            scale: 1,\n            origin: 0,\n            originPoint: 0\n        },\n        y: {\n            translate: 0,\n            scale: 1,\n            origin: 0,\n            originPoint: 0\n        }\n    }), Tu = ()=>({\n        x: {\n            min: 0,\n            max: 0\n        },\n        y: {\n            min: 0,\n            max: 0\n        }\n    });\nfunction Au(e1) {\n    return [\n        e1(\"x\"),\n        e1(\"y\")\n    ];\n}\nfunction Ru({ top: e1, left: t, right: n, bottom: o }) {\n    return {\n        x: {\n            min: t,\n            max: n\n        },\n        y: {\n            min: e1,\n            max: o\n        }\n    };\n}\nfunction Cu(e1) {\n    return void 0 === e1 || 1 === e1;\n}\nfunction Mu({ scale: e1, scaleX: t, scaleY: n }) {\n    return !Cu(e1) || !Cu(t) || !Cu(n);\n}\nfunction Ou(e1) {\n    return Mu(e1) || Bu(e1) || e1.z || e1.rotate || e1.rotateX || e1.rotateY;\n}\nfunction Bu(e1) {\n    return ju(e1.x) || ju(e1.y);\n}\nfunction ju(e1) {\n    return e1 && \"0%\" !== e1;\n}\nfunction zu(e1, t, n) {\n    return n + t * (e1 - n);\n}\nfunction Lu(e1, t, n, o, r) {\n    return void 0 !== r && (e1 = zu(e1, r, o)), zu(e1, n, o) + t;\n}\nfunction Vu(e1, t = 0, n = 1, o, r) {\n    e1.min = Lu(e1.min, t, n, o, r), e1.max = Lu(e1.max, t, n, o, r);\n}\nfunction Du(e1, { x: t, y: n }) {\n    Vu(e1.x, t.translate, t.scale, t.originPoint), Vu(e1.y, n.translate, n.scale, n.originPoint);\n}\nfunction _u(e1) {\n    return Number.isInteger(e1) || e1 > 1.0000000000001 || e1 < .999999999999 ? e1 : 1;\n}\nfunction $u(e1, t) {\n    e1.min = e1.min + t, e1.max = e1.max + t;\n}\nfunction Fu(e1, t, [n, o, r]) {\n    const i = void 0 !== t[r] ? t[r] : .5, a = wl(e1.min, e1.max, i);\n    Vu(e1, t[n], t[o], a, t.scale);\n}\nconst Iu = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n], Hu = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\nfunction Nu(e1, t) {\n    Fu(e1.x, t, Iu), Fu(e1.y, t, Hu);\n}\nfunction Wu(e1, t) {\n    return Ru(function(e1, t) {\n        if (!t) return e1;\n        const n = t({\n            x: e1.left,\n            y: e1.top\n        }), o = t({\n            x: e1.right,\n            y: e1.bottom\n        });\n        return {\n            top: n.y,\n            left: n.x,\n            bottom: o.y,\n            right: o.x\n        };\n    }(e1.getBoundingClientRect(), t));\n}\nconst Uu = ({ current: e1 })=>e1 ? e1.ownerDocument.defaultView : null, Yu = new WeakMap;\nclass Gu {\n    constructor(e1){\n        this.openGlobalLock = null, this.isDragging = !1, this.currentDirection = null, this.originPoint = {\n            x: 0,\n            y: 0\n        }, this.constraints = !1, this.hasMutatedConstraints = !1, this.elastic = Tu(), this.visualElement = e1;\n    }\n    start(e1, { snapToCursor: t = !1 } = {}) {\n        const { presenceContext: n } = this.visualElement;\n        if (n && !1 === n.isPresent) return;\n        const { dragSnapToOrigin: o } = this.getProps();\n        this.panSession = new au(e1, {\n            onSessionStart: (e1)=>{\n                const { dragSnapToOrigin: n } = this.getProps();\n                n ? this.pauseAnimation() : this.stopAnimation(), t && this.snapToCursor(ks(e1, \"page\").point);\n            },\n            onStart: (e1, t)=>{\n                const { drag: n, dragPropagation: o, onDragStart: r } = this.getProps();\n                if (n && !o && (this.openGlobalLock && this.openGlobalLock(), this.openGlobalLock = Ms(n), !this.openGlobalLock)) return;\n                this.isDragging = !0, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = !0, this.visualElement.projection.target = void 0), Au((e1)=>{\n                    let t = this.getAxisMotionValue(e1).get() || 0;\n                    if (Ma.test(t)) {\n                        const { projection: n } = this.visualElement;\n                        if (n && n.layout) {\n                            const o = n.layout.layoutBox[e1];\n                            if (o) {\n                                t = fu(o) * (parseFloat(t) / 100);\n                            }\n                        }\n                    }\n                    this.originPoint[e1] = t;\n                }), r && ps.update(()=>r(e1, t), !1, !0);\n                const { animationState: i } = this.visualElement;\n                i && i.setActive(\"whileDrag\", !0);\n            },\n            onMove: (e1, t)=>{\n                const { dragPropagation: n, dragDirectionLock: o, onDirectionLock: r, onDrag: i } = this.getProps();\n                if (!n && !this.openGlobalLock) return;\n                const { offset: a } = t;\n                if (o && null === this.currentDirection) return this.currentDirection = function(e1, t = 10) {\n                    let n = null;\n                    Math.abs(e1.y) > t ? n = \"y\" : Math.abs(e1.x) > t && (n = \"x\");\n                    return n;\n                }(a), void (null !== this.currentDirection && r && r(this.currentDirection));\n                this.updateAxis(\"x\", t.point, a), this.updateAxis(\"y\", t.point, a), this.visualElement.render(), i && i(e1, t);\n            },\n            onSessionEnd: (e1, t)=>this.stop(e1, t),\n            resumeAnimation: ()=>Au((e1)=>{\n                    var t;\n                    return \"paused\" === this.getAnimationState(e1) && (null === (t = this.getAxisMotionValue(e1).animation) || void 0 === t ? void 0 : t.play());\n                })\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin: o,\n            contextWindow: Uu(this.visualElement)\n        });\n    }\n    stop(e1, t) {\n        const n = this.isDragging;\n        if (this.cancel(), !n) return;\n        const { velocity: o } = t;\n        this.startAnimation(o);\n        const { onDragEnd: r } = this.getProps();\n        r && ps.update(()=>r(e1, t));\n    }\n    cancel() {\n        this.isDragging = !1;\n        const { projection: e1, animationState: t } = this.visualElement;\n        e1 && (e1.isAnimationBlocked = !1), this.panSession && this.panSession.end(), this.panSession = void 0;\n        const { dragPropagation: n } = this.getProps();\n        !n && this.openGlobalLock && (this.openGlobalLock(), this.openGlobalLock = null), t && t.setActive(\"whileDrag\", !1);\n    }\n    updateAxis(e1, t, n) {\n        const { drag: o } = this.getProps();\n        if (!n || !Xu(e1, o, this.currentDirection)) return;\n        const r = this.getAxisMotionValue(e1);\n        let i = this.originPoint[e1] + n[e1];\n        this.constraints && this.constraints[e1] && (i = function(e1, { min: t, max: n }, o) {\n            return void 0 !== t && e1 < t ? e1 = o ? wl(t, e1, o.min) : Math.max(e1, t) : void 0 !== n && e1 > n && (e1 = o ? wl(n, e1, o.max) : Math.min(e1, n)), e1;\n        }(i, this.constraints[e1], this.elastic[e1])), r.set(i);\n    }\n    resolveConstraints() {\n        var e1;\n        const { dragConstraints: t, dragElastic: n } = this.getProps(), o = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(!1) : null === (e1 = this.visualElement.projection) || void 0 === e1 ? void 0 : e1.layout, r = this.constraints;\n        t && Ni(t) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : this.constraints = !(!t || !o) && function(e1, { top: t, left: n, bottom: o, right: r }) {\n            return {\n                x: wu(e1.x, n, r),\n                y: wu(e1.y, t, o)\n            };\n        }(o.layoutBox, t), this.elastic = function(e1 = ku) {\n            return !1 === e1 ? e1 = 0 : !0 === e1 && (e1 = ku), {\n                x: Su(e1, \"left\", \"right\"),\n                y: Su(e1, \"top\", \"bottom\")\n            };\n        }(n), r !== this.constraints && o && this.constraints && !this.hasMutatedConstraints && Au((e1)=>{\n            this.getAxisMotionValue(e1) && (this.constraints[e1] = function(e1, t) {\n                const n = {};\n                return void 0 !== t.min && (n.min = t.min - e1.min), void 0 !== t.max && (n.max = t.max - e1.min), n;\n            }(o.layoutBox[e1], this.constraints[e1]));\n        });\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: e1, onMeasureDragConstraints: t } = this.getProps();\n        if (!e1 || !Ni(e1)) return !1;\n        const n = e1.current, { projection: o } = this.visualElement;\n        if (!o || !o.layout) return !1;\n        const r = function(e1, t, n) {\n            const o = Wu(e1, n), { scroll: r } = t;\n            return r && ($u(o.x, r.offset.x), $u(o.y, r.offset.y)), o;\n        }(n, o.root, this.visualElement.getTransformPagePoint());\n        let i = function(e1, t) {\n            return {\n                x: xu(e1.x, t.x),\n                y: xu(e1.y, t.y)\n            };\n        }(o.layout.layoutBox, r);\n        if (t) {\n            const e1 = t(function({ x: e1, y: t }) {\n                return {\n                    top: t.min,\n                    right: e1.max,\n                    bottom: t.max,\n                    left: e1.min\n                };\n            }(i));\n            this.hasMutatedConstraints = !!e1, e1 && (i = Ru(e1));\n        }\n        return i;\n    }\n    startAnimation(e1) {\n        const { drag: t, dragMomentum: n, dragElastic: o, dragTransition: r, dragSnapToOrigin: i, onDragTransitionEnd: a } = this.getProps(), s = this.constraints || {}, l = Au((a)=>{\n            if (!Xu(a, t, this.currentDirection)) return;\n            let l = s && s[a] || {};\n            i && (l = {\n                min: 0,\n                max: 0\n            });\n            const c = o ? 200 : 1e6, u = o ? 40 : 1e7, d = {\n                type: \"inertia\",\n                velocity: n ? e1[a] : 0,\n                bounceStiffness: c,\n                bounceDamping: u,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...r,\n                ...l\n            };\n            return this.startAxisValueAnimation(a, d);\n        });\n        return Promise.all(l).then(a);\n    }\n    startAxisValueAnimation(e1, t) {\n        const n = this.getAxisMotionValue(e1);\n        return n.start(Oc(e1, n, 0, t));\n    }\n    stopAnimation() {\n        Au((e1)=>this.getAxisMotionValue(e1).stop());\n    }\n    pauseAnimation() {\n        Au((e1)=>{\n            var t;\n            return null === (t = this.getAxisMotionValue(e1).animation) || void 0 === t ? void 0 : t.pause();\n        });\n    }\n    getAnimationState(e1) {\n        var t;\n        return null === (t = this.getAxisMotionValue(e1).animation) || void 0 === t ? void 0 : t.state;\n    }\n    getAxisMotionValue(e1) {\n        const t = \"_drag\" + e1.toUpperCase(), n = this.visualElement.getProps(), o = n[t];\n        return o || this.visualElement.getValue(e1, (n.initial ? n.initial[e1] : void 0) || 0);\n    }\n    snapToCursor(e1) {\n        Au((t)=>{\n            const { drag: n } = this.getProps();\n            if (!Xu(t, n, this.currentDirection)) return;\n            const { projection: o } = this.visualElement, r = this.getAxisMotionValue(t);\n            if (o && o.layout) {\n                const { min: n, max: i } = o.layout.layoutBox[t];\n                r.set(e1[t] - wl(n, i, .5));\n            }\n        });\n    }\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current) return;\n        const { drag: e1, dragConstraints: t } = this.getProps(), { projection: n } = this.visualElement;\n        if (!Ni(t) || !n || !this.constraints) return;\n        this.stopAnimation();\n        const o = {\n            x: 0,\n            y: 0\n        };\n        Au((e1)=>{\n            const t = this.getAxisMotionValue(e1);\n            if (t) {\n                const n = t.get();\n                o[e1] = function(e1, t) {\n                    let n = .5;\n                    const o = fu(e1), r = fu(t);\n                    return r > o ? n = Fl(t.min, t.max - o, e1.min) : o > r && (n = Fl(e1.min, e1.max - r, t.min)), ya(0, 1, n);\n                }({\n                    min: n,\n                    max: n\n                }, this.constraints[e1]);\n            }\n        });\n        const { transformTemplate: r } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = r ? r({}, \"\") : \"none\", n.root && n.root.updateScroll(), n.updateLayout(), this.resolveConstraints(), Au((t)=>{\n            if (!Xu(t, e1, null)) return;\n            const n = this.getAxisMotionValue(t), { min: r, max: i } = this.constraints[t];\n            n.set(wl(r, i, o[t]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current) return;\n        Yu.set(this.visualElement, this);\n        const e1 = Ps(this.visualElement.current, \"pointerdown\", (e1)=>{\n            const { drag: t, dragListener: n = !0 } = this.getProps();\n            t && n && this.start(e1);\n        }), t = ()=>{\n            const { dragConstraints: e1 } = this.getProps();\n            Ni(e1) && (this.constraints = this.resolveRefConstraints());\n        }, { projection: n } = this.visualElement, o = n.addEventListener(\"measure\", t);\n        n && !n.layout && (n.root && n.root.updateScroll(), n.updateLayout()), t();\n        const r = ws(window, \"resize\", ()=>this.scalePositionWithinConstraints()), i = n.addEventListener(\"didUpdate\", ({ delta: e1, hasLayoutChanged: t })=>{\n            this.isDragging && t && (Au((t)=>{\n                const n = this.getAxisMotionValue(t);\n                n && (this.originPoint[t] += e1[t].translate, n.set(n.get() + e1[t].translate));\n            }), this.visualElement.render());\n        });\n        return ()=>{\n            r(), e1(), o(), i && i();\n        };\n    }\n    getProps() {\n        const e1 = this.visualElement.getProps(), { drag: t = !1, dragDirectionLock: n = !1, dragPropagation: o = !1, dragConstraints: r = !1, dragElastic: i = ku, dragMomentum: a = !0 } = e1;\n        return {\n            ...e1,\n            drag: t,\n            dragDirectionLock: n,\n            dragPropagation: o,\n            dragConstraints: r,\n            dragElastic: i,\n            dragMomentum: a\n        };\n    }\n}\nfunction Xu(e1, t, n) {\n    return !(!0 !== t && t !== e1 || null !== n && n !== e1);\n}\nconst qu = (e1)=>(t, n)=>{\n        e1 && ps.update(()=>e1(t, n));\n    };\nconst Ku = {\n    hasAnimatedSinceResize: !0,\n    hasEverUpdated: !1\n};\nfunction Zu(e1, t) {\n    return t.max === t.min ? 0 : e1 / (t.max - t.min) * 100;\n}\nconst Ju = {\n    correct: (e1, t)=>{\n        if (!t.target) return e1;\n        if (\"string\" == typeof e1) {\n            if (!Oa.test(e1)) return e1;\n            e1 = parseFloat(e1);\n        }\n        return `${Zu(e1, t.target.x)}% ${Zu(e1, t.target.y)}%`;\n    }\n}, Qu = {\n    correct: (e1, { treeScale: t, projectionDelta: n })=>{\n        const o = e1, r = zl.parse(e1);\n        if (r.length > 5) return o;\n        const i = zl.createTransformer(e1), a = \"number\" != typeof r[0] ? 1 : 0, s = n.x.scale * t.x, l = n.y.scale * t.y;\n        r[0 + a] /= s, r[1 + a] /= l;\n        const c = wl(s, l, .5);\n        return \"number\" == typeof r[2 + a] && (r[2 + a] /= c), \"number\" == typeof r[3 + a] && (r[3 + a] /= c), i(r);\n    }\n};\nclass ed extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n    componentDidMount() {\n        const { visualElement: e1, layoutGroup: t, switchLayoutGroup: n, layoutId: o } = this.props, { projection: r } = e1;\n        var i;\n        i = nd, Object.assign(la, i), r && (t.group && t.group.add(r), n && n.register && o && n.register(r), r.root.didUpdate(), r.addEventListener(\"animationComplete\", ()=>{\n            this.safeToRemove();\n        }), r.setOptions({\n            ...r.options,\n            onExitComplete: ()=>this.safeToRemove()\n        })), Ku.hasEverUpdated = !0;\n    }\n    getSnapshotBeforeUpdate(e1) {\n        const { layoutDependency: t, visualElement: n, drag: o, isPresent: r } = this.props, i = n.projection;\n        return i ? (i.isPresent = r, o || e1.layoutDependency !== t || void 0 === t ? i.willUpdate() : this.safeToRemove(), e1.isPresent !== r && (r ? i.promote() : i.relegate() || ps.postRender(()=>{\n            const e1 = i.getStack();\n            e1 && e1.members.length || this.safeToRemove();\n        })), null) : null;\n    }\n    componentDidUpdate() {\n        const { projection: e1 } = this.props.visualElement;\n        e1 && (e1.root.didUpdate(), Ii.postRender(()=>{\n            !e1.currentAnimation && e1.isLead() && this.safeToRemove();\n        }));\n    }\n    componentWillUnmount() {\n        const { visualElement: e1, layoutGroup: t, switchLayoutGroup: n } = this.props, { projection: o } = e1;\n        o && (o.scheduleCheckAfterUnmount(), t && t.group && t.group.remove(o), n && n.deregister && n.deregister(o));\n    }\n    safeToRemove() {\n        const { safeToRemove: e1 } = this.props;\n        e1 && e1();\n    }\n    render() {\n        return null;\n    }\n}\nfunction td(e1) {\n    const [t, n] = function() {\n        const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Mi);\n        if (null === e1) return [\n            !0,\n            null\n        ];\n        const { isPresent: t, onExitComplete: n, register: o } = e1, r = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>o(r), []), !t && n ? [\n            !1,\n            ()=>n && n(r)\n        ] : [\n            !0\n        ];\n    }(), o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ea);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ed, {\n        ...e1,\n        layoutGroup: o,\n        switchLayoutGroup: (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ta),\n        isPresent: t,\n        safeToRemove: n\n    });\n}\nconst nd = {\n    borderRadius: {\n        ...Ju,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\"\n        ]\n    },\n    borderTopLeftRadius: Ju,\n    borderTopRightRadius: Ju,\n    borderBottomLeftRadius: Ju,\n    borderBottomRightRadius: Ju,\n    boxShadow: Qu\n}, od = [\n    \"TopLeft\",\n    \"TopRight\",\n    \"BottomLeft\",\n    \"BottomRight\"\n], rd = od.length, id = (e1)=>\"string\" == typeof e1 ? parseFloat(e1) : e1, ad = (e1)=>\"number\" == typeof e1 || Oa.test(e1);\nfunction sd(e1, t) {\n    return void 0 !== e1[t] ? e1[t] : e1.borderRadius;\n}\nconst ld = ud(0, .5, al), cd = ud(.5, .95, fs);\nfunction ud(e1, t, n) {\n    return (o)=>o < e1 ? 0 : o > t ? 1 : n(Fl(e1, t, o));\n}\nfunction dd(e1, t) {\n    e1.min = t.min, e1.max = t.max;\n}\nfunction hd(e1, t) {\n    dd(e1.x, t.x), dd(e1.y, t.y);\n}\nfunction fd(e1, t, n, o, r) {\n    return e1 = zu(e1 -= t, 1 / n, o), void 0 !== r && (e1 = zu(e1, 1 / r, o)), e1;\n}\nfunction pd(e1, t, [n, o, r], i, a) {\n    !function(e1, t = 0, n = 1, o = .5, r, i = e1, a = e1) {\n        Ma.test(t) && (t = parseFloat(t), t = wl(a.min, a.max, t / 100) - a.min);\n        if (\"number\" != typeof t) return;\n        let s = wl(i.min, i.max, o);\n        e1 === i && (s -= t), e1.min = fd(e1.min, t, n, s, r), e1.max = fd(e1.max, t, n, s, r);\n    }(e1, t[n], t[o], t[r], t.scale, i, a);\n}\nconst gd = [\n    \"x\",\n    \"scaleX\",\n    \"originX\"\n], md = [\n    \"y\",\n    \"scaleY\",\n    \"originY\"\n];\nfunction vd(e1, t, n, o) {\n    pd(e1.x, t, gd, n ? n.x : void 0, o ? o.x : void 0), pd(e1.y, t, md, n ? n.y : void 0, o ? o.y : void 0);\n}\nfunction bd(e1) {\n    return 0 === e1.translate && 1 === e1.scale;\n}\nfunction yd(e1) {\n    return bd(e1.x) && bd(e1.y);\n}\nfunction wd(e1, t) {\n    return Math.round(e1.x.min) === Math.round(t.x.min) && Math.round(e1.x.max) === Math.round(t.x.max) && Math.round(e1.y.min) === Math.round(t.y.min) && Math.round(e1.y.max) === Math.round(t.y.max);\n}\nfunction xd(e1) {\n    return fu(e1.x) / fu(e1.y);\n}\nclass kd {\n    constructor(){\n        this.members = [];\n    }\n    add(e1) {\n        zc(this.members, e1), e1.scheduleRender();\n    }\n    remove(e1) {\n        if (Lc(this.members, e1), e1 === this.prevLead && (this.prevLead = void 0), e1 === this.lead) {\n            const e1 = this.members[this.members.length - 1];\n            e1 && this.promote(e1);\n        }\n    }\n    relegate(e1) {\n        const t = this.members.findIndex((t)=>e1 === t);\n        if (0 === t) return !1;\n        let n;\n        for(let e1 = t; e1 >= 0; e1--){\n            const t = this.members[e1];\n            if (!1 !== t.isPresent) {\n                n = t;\n                break;\n            }\n        }\n        return !!n && (this.promote(n), !0);\n    }\n    promote(e1, t) {\n        const n = this.lead;\n        if (e1 !== n && (this.prevLead = n, this.lead = e1, e1.show(), n)) {\n            n.instance && n.scheduleRender(), e1.scheduleRender(), e1.resumeFrom = n, t && (e1.resumeFrom.preserveOpacity = !0), n.snapshot && (e1.snapshot = n.snapshot, e1.snapshot.latestValues = n.animationValues || n.latestValues), e1.root && e1.root.isUpdating && (e1.isLayoutDirty = !0);\n            const { crossfade: o } = e1.options;\n            !1 === o && n.hide();\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((e1)=>{\n            const { options: t, resumingFrom: n } = e1;\n            t.onExitComplete && t.onExitComplete(), n && n.options.onExitComplete && n.options.onExitComplete();\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((e1)=>{\n            e1.instance && e1.scheduleRender(!1);\n        });\n    }\n    removeLeadSnapshot() {\n        this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);\n    }\n}\nfunction Sd(e1, t, n) {\n    let o = \"\";\n    const r = e1.x.translate / t.x, i = e1.y.translate / t.y;\n    if ((r || i) && (o = `translate3d(${r}px, ${i}px, 0) `), 1 === t.x && 1 === t.y || (o += `scale(${1 / t.x}, ${1 / t.y}) `), n) {\n        const { rotate: e1, rotateX: t, rotateY: r } = n;\n        e1 && (o += `rotate(${e1}deg) `), t && (o += `rotateX(${t}deg) `), r && (o += `rotateY(${r}deg) `);\n    }\n    const a = e1.x.scale * t.x, s = e1.y.scale * t.y;\n    return 1 === a && 1 === s || (o += `scale(${a}, ${s})`), o || \"none\";\n}\nconst Pd = (e1, t)=>e1.depth - t.depth;\nclass Ed {\n    constructor(){\n        this.children = [], this.isDirty = !1;\n    }\n    add(e1) {\n        zc(this.children, e1), this.isDirty = !0;\n    }\n    remove(e1) {\n        Lc(this.children, e1), this.isDirty = !0;\n    }\n    forEach(e1) {\n        this.isDirty && this.children.sort(Pd), this.isDirty = !1, this.children.forEach(e1);\n    }\n}\nconst Td = [\n    \"\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n], Ad = {\n    visibility: \"hidden\"\n};\nlet Rd = 0;\nconst Cd = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0\n};\nfunction Md({ attachResizeListener: e1, defaultParent: t, measureScroll: n, checkIsScrollRoot: o, resetTransform: r }) {\n    return class {\n        constructor(e1 = {}, n = null == t ? void 0 : t()){\n            this.id = Rd++, this.animationId = 0, this.children = new Set, this.options = {}, this.isTreeAnimating = !1, this.isAnimationBlocked = !1, this.isLayoutDirty = !1, this.isProjectionDirty = !1, this.isSharedProjectionDirty = !1, this.isTransformDirty = !1, this.updateManuallyBlocked = !1, this.updateBlockedByResize = !1, this.isUpdating = !1, this.isSVG = !1, this.needsReset = !1, this.shouldResetTransform = !1, this.treeScale = {\n                x: 1,\n                y: 1\n            }, this.eventHandlers = new Map, this.hasTreeAnimated = !1, this.updateScheduled = !1, this.projectionUpdateScheduled = !1, this.checkUpdateFailed = ()=>{\n                this.isUpdating && (this.isUpdating = !1, this.clearAllSnapshots());\n            }, this.updateProjection = ()=>{\n                var e1;\n                this.projectionUpdateScheduled = !1, Cd.totalNodes = Cd.resolvedTargetDeltas = Cd.recalculatedProjection = 0, this.nodes.forEach(jd), this.nodes.forEach(Fd), this.nodes.forEach(Id), this.nodes.forEach(zd), e1 = Cd, window.MotionDebug && window.MotionDebug.record(e1);\n            }, this.hasProjected = !1, this.isVisible = !0, this.animationProgress = 0, this.sharedNodes = new Map, this.latestValues = e1, this.root = n ? n.root || n : this, this.path = n ? [\n                ...n.path,\n                n\n            ] : [], this.parent = n, this.depth = n ? n.depth + 1 : 0;\n            for(let e1 = 0; e1 < this.path.length; e1++)this.path[e1].shouldResetTransform = !0;\n            this.root === this && (this.nodes = new Ed);\n        }\n        addEventListener(e1, t) {\n            return this.eventHandlers.has(e1) || this.eventHandlers.set(e1, new Vc), this.eventHandlers.get(e1).add(t);\n        }\n        notifyListeners(e1, ...t) {\n            const n = this.eventHandlers.get(e1);\n            n && n.notify(...t);\n        }\n        hasListeners(e1) {\n            return this.eventHandlers.has(e1);\n        }\n        mount(t, n = this.root.hasTreeAnimated) {\n            if (this.instance) return;\n            var o;\n            this.isSVG = (o = t) instanceof SVGElement && \"svg\" !== o.tagName, this.instance = t;\n            const { layoutId: r, layout: i, visualElement: a } = this.options;\n            if (a && !a.current && a.mount(t), this.root.nodes.add(this), this.parent && this.parent.children.add(this), n && (i || r) && (this.isLayoutDirty = !0), e1) {\n                let n;\n                const o = ()=>this.root.updateBlockedByResize = !1;\n                e1(t, ()=>{\n                    this.root.updateBlockedByResize = !0, n && n(), n = function(e1, t) {\n                        const n = uc.now(), o = ({ timestamp: r })=>{\n                            const i = r - n;\n                            i >= t && (gs(o), e1(i - t));\n                        };\n                        return ps.read(o, !0), ()=>gs(o);\n                    }(o, 250), Ku.hasAnimatedSinceResize && (Ku.hasAnimatedSinceResize = !1, this.nodes.forEach($d));\n                });\n            }\n            r && this.root.registerSharedNode(r, this), !1 !== this.options.animate && a && (r || i) && this.addEventListener(\"didUpdate\", ({ delta: e1, hasLayoutChanged: t, hasRelativeTargetChanged: n, layout: o })=>{\n                if (this.isTreeAnimationBlocked()) return this.target = void 0, void (this.relativeTarget = void 0);\n                const r = this.options.transition || a.getDefaultTransition() || Gd, { onLayoutAnimationStart: i, onLayoutAnimationComplete: s } = a.getProps(), l = !this.targetLayout || !wd(this.targetLayout, o) || n, c = !t && n;\n                if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || c || t && (l || !this.currentAnimation)) {\n                    this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0), this.setAnimationOrigin(e1, c);\n                    const t = {\n                        ...Mc(r, \"layout\"),\n                        onPlay: i,\n                        onComplete: s\n                    };\n                    (a.shouldReduceMotion || this.options.layoutRoot) && (t.delay = 0, t.type = !1), this.startAnimation(t);\n                } else t || $d(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();\n                this.targetLayout = o;\n            });\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);\n            const e1 = this.getStack();\n            e1 && e1.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, gs(this.updateProjection);\n        }\n        blockUpdate() {\n            this.updateManuallyBlocked = !0;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = !1;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || !1;\n        }\n        startUpdate() {\n            this.isUpdateBlocked() || (this.isUpdating = !0, this.nodes && this.nodes.forEach(Hd), this.animationId++);\n        }\n        getTransformTemplate() {\n            const { visualElement: e1 } = this.options;\n            return e1 && e1.getProps().transformTemplate;\n        }\n        willUpdate(e1 = !0) {\n            if (this.root.hasTreeAnimated = !0, this.root.isUpdateBlocked()) return void (this.options.onExitComplete && this.options.onExitComplete());\n            if (!this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty) return;\n            this.isLayoutDirty = !0;\n            for(let e1 = 0; e1 < this.path.length; e1++){\n                const t = this.path[e1];\n                t.shouldResetTransform = !0, t.updateScroll(\"snapshot\"), t.options.layoutRoot && t.willUpdate(!1);\n            }\n            const { layoutId: t, layout: n } = this.options;\n            if (void 0 === t && !n) return;\n            const o = this.getTransformTemplate();\n            this.prevTransformTemplateValue = o ? o(this.latestValues, \"\") : void 0, this.updateSnapshot(), e1 && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = !1;\n            if (this.isUpdateBlocked()) return this.unblockUpdate(), this.clearAllSnapshots(), void this.nodes.forEach(Vd);\n            this.isUpdating || this.nodes.forEach(Dd), this.isUpdating = !1, this.nodes.forEach(_d), this.nodes.forEach(Od), this.nodes.forEach(Bd), this.clearAllSnapshots();\n            const e1 = uc.now();\n            ms.delta = ya(0, 1e3 / 60, e1 - ms.timestamp), ms.timestamp = e1, ms.isProcessing = !0, vs.update.process(ms), vs.preRender.process(ms), vs.render.process(ms), ms.isProcessing = !1;\n        }\n        didUpdate() {\n            this.updateScheduled || (this.updateScheduled = !0, Ii.read(()=>this.update()));\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(Ld), this.sharedNodes.forEach(Nd);\n        }\n        scheduleUpdateProjection() {\n            this.projectionUpdateScheduled || (this.projectionUpdateScheduled = !0, ps.preRender(this.updateProjection, !1, !0));\n        }\n        scheduleCheckAfterUnmount() {\n            ps.postRender(()=>{\n                this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();\n            });\n        }\n        updateSnapshot() {\n            !this.snapshot && this.instance && (this.snapshot = this.measure());\n        }\n        updateLayout() {\n            if (!this.instance) return;\n            if (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead() || this.isLayoutDirty)) return;\n            if (this.resumeFrom && !this.resumeFrom.instance) for(let e1 = 0; e1 < this.path.length; e1++){\n                this.path[e1].updateScroll();\n            }\n            const e1 = this.layout;\n            this.layout = this.measure(!1), this.layoutCorrected = Tu(), this.isLayoutDirty = !1, this.projectionDelta = void 0, this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement: t } = this.options;\n            t && t.notify(\"LayoutMeasure\", this.layout.layoutBox, e1 ? e1.layoutBox : void 0);\n        }\n        updateScroll(e1 = \"measure\") {\n            let t = Boolean(this.options.layoutScroll && this.instance);\n            this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === e1 && (t = !1), t && (this.scroll = {\n                animationId: this.root.animationId,\n                phase: e1,\n                isRoot: o(this.instance),\n                offset: n(this.instance)\n            });\n        }\n        resetTransform() {\n            if (!r) return;\n            const e1 = this.isLayoutDirty || this.shouldResetTransform, t = this.projectionDelta && !yd(this.projectionDelta), n = this.getTransformTemplate(), o = n ? n(this.latestValues, \"\") : void 0, i = o !== this.prevTransformTemplateValue;\n            e1 && (t || Ou(this.latestValues) || i) && (r(this.instance, o), this.shouldResetTransform = !1, this.scheduleRender());\n        }\n        measure(e1 = !0) {\n            const t = this.measurePageBox();\n            let n = this.removeElementScroll(t);\n            var o;\n            return e1 && (n = this.removeTransform(n)), Kd((o = n).x), Kd(o.y), {\n                animationId: this.root.animationId,\n                measuredBox: t,\n                layoutBox: n,\n                latestValues: {},\n                source: this.id\n            };\n        }\n        measurePageBox() {\n            const { visualElement: e1 } = this.options;\n            if (!e1) return Tu();\n            const t = e1.measureViewportBox(), { scroll: n } = this.root;\n            return n && ($u(t.x, n.offset.x), $u(t.y, n.offset.y)), t;\n        }\n        removeElementScroll(e1) {\n            const t = Tu();\n            hd(t, e1);\n            for(let n = 0; n < this.path.length; n++){\n                const o = this.path[n], { scroll: r, options: i } = o;\n                if (o !== this.root && r && i.layoutScroll) {\n                    if (r.isRoot) {\n                        hd(t, e1);\n                        const { scroll: n } = this.root;\n                        n && ($u(t.x, -n.offset.x), $u(t.y, -n.offset.y));\n                    }\n                    $u(t.x, r.offset.x), $u(t.y, r.offset.y);\n                }\n            }\n            return t;\n        }\n        applyTransform(e1, t = !1) {\n            const n = Tu();\n            hd(n, e1);\n            for(let e1 = 0; e1 < this.path.length; e1++){\n                const o = this.path[e1];\n                !t && o.options.layoutScroll && o.scroll && o !== o.root && Nu(n, {\n                    x: -o.scroll.offset.x,\n                    y: -o.scroll.offset.y\n                }), Ou(o.latestValues) && Nu(n, o.latestValues);\n            }\n            return Ou(this.latestValues) && Nu(n, this.latestValues), n;\n        }\n        removeTransform(e1) {\n            const t = Tu();\n            hd(t, e1);\n            for(let e1 = 0; e1 < this.path.length; e1++){\n                const n = this.path[e1];\n                if (!n.instance) continue;\n                if (!Ou(n.latestValues)) continue;\n                Mu(n.latestValues) && n.updateSnapshot();\n                const o = Tu();\n                hd(o, n.measurePageBox()), vd(t, n.latestValues, n.snapshot ? n.snapshot.layoutBox : void 0, o);\n            }\n            return Ou(this.latestValues) && vd(t, this.latestValues), t;\n        }\n        setTargetDelta(e1) {\n            this.targetDelta = e1, this.root.scheduleUpdateProjection(), this.isProjectionDirty = !0;\n        }\n        setOptions(e1) {\n            this.options = {\n                ...this.options,\n                ...e1,\n                crossfade: void 0 === e1.crossfade || e1.crossfade\n            };\n        }\n        clearMeasurements() {\n            this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = !1;\n        }\n        forceRelativeParentToResolveTarget() {\n            this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== ms.timestamp && this.relativeParent.resolveTargetDelta(!0);\n        }\n        resolveTargetDelta(e1 = !1) {\n            var t;\n            const n = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = n.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = n.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = n.isSharedProjectionDirty);\n            const o = Boolean(this.resumingFrom) || this !== n;\n            if (!(e1 || o && this.isSharedProjectionDirty || this.isProjectionDirty || (null === (t = this.parent) || void 0 === t ? void 0 : t.isProjectionDirty) || this.attemptToResolveRelativeTarget)) return;\n            const { layout: r, layoutId: i } = this.options;\n            if (this.layout && (r || i)) {\n                if (this.resolvedRelativeTargetAt = ms.timestamp, !this.targetDelta && !this.relativeTarget) {\n                    const e1 = this.getClosestProjectingParent();\n                    e1 && e1.layout && 1 !== this.animationProgress ? (this.relativeParent = e1, this.forceRelativeParentToResolveTarget(), this.relativeTarget = Tu(), this.relativeTargetOrigin = Tu(), yu(this.relativeTargetOrigin, this.layout.layoutBox, e1.layout.layoutBox), hd(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;\n                }\n                if (this.relativeTarget || this.targetDelta) {\n                    var a, s, l;\n                    if (this.target || (this.target = Tu(), this.targetWithTransforms = Tu()), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), a = this.target, s = this.relativeTarget, l = this.relativeParent.target, vu(a.x, s.x, l.x), vu(a.y, s.y, l.y)) : this.targetDelta ? (Boolean(this.resumingFrom) ? this.target = this.applyTransform(this.layout.layoutBox) : hd(this.target, this.layout.layoutBox), Du(this.target, this.targetDelta)) : hd(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget) {\n                        this.attemptToResolveRelativeTarget = !1;\n                        const e1 = this.getClosestProjectingParent();\n                        e1 && Boolean(e1.resumingFrom) === Boolean(this.resumingFrom) && !e1.options.layoutScroll && e1.target && 1 !== this.animationProgress ? (this.relativeParent = e1, this.forceRelativeParentToResolveTarget(), this.relativeTarget = Tu(), this.relativeTargetOrigin = Tu(), yu(this.relativeTargetOrigin, this.target, e1.target), hd(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;\n                    }\n                    Cd.resolvedTargetDeltas++;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (this.parent && !Mu(this.parent.latestValues) && !Bu(this.parent.latestValues)) return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n        }\n        calcProjection() {\n            var e1;\n            const t = this.getLead(), n = Boolean(this.resumingFrom) || this !== t;\n            let o = !0;\n            if ((this.isProjectionDirty || (null === (e1 = this.parent) || void 0 === e1 ? void 0 : e1.isProjectionDirty)) && (o = !1), n && (this.isSharedProjectionDirty || this.isTransformDirty) && (o = !1), this.resolvedRelativeTargetAt === ms.timestamp && (o = !1), o) return;\n            const { layout: r, layoutId: i } = this.options;\n            if (this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !r && !i) return;\n            hd(this.layoutCorrected, this.layout.layoutBox);\n            const a = this.treeScale.x, s = this.treeScale.y;\n            !function(e1, t, n, o = !1) {\n                const r = n.length;\n                if (!r) return;\n                let i, a;\n                t.x = t.y = 1;\n                for(let s = 0; s < r; s++){\n                    i = n[s], a = i.projectionDelta;\n                    const r = i.instance;\n                    r && r.style && \"contents\" === r.style.display || (o && i.options.layoutScroll && i.scroll && i !== i.root && Nu(e1, {\n                        x: -i.scroll.offset.x,\n                        y: -i.scroll.offset.y\n                    }), a && (t.x *= a.x.scale, t.y *= a.y.scale, Du(e1, a)), o && Ou(i.latestValues) && Nu(e1, i.latestValues));\n                }\n                t.x = _u(t.x), t.y = _u(t.y);\n            }(this.layoutCorrected, this.treeScale, this.path, n), !t.layout || t.target || 1 === this.treeScale.x && 1 === this.treeScale.y || (t.target = t.layout.layoutBox, t.targetWithTransforms = Tu());\n            const { target: l } = t;\n            if (!l) return void (this.projectionTransform && (this.projectionDelta = Eu(), this.projectionTransform = \"none\", this.scheduleRender()));\n            this.projectionDelta || (this.projectionDelta = Eu(), this.projectionDeltaWithTransform = Eu());\n            const c = this.projectionTransform;\n            mu(this.projectionDelta, this.layoutCorrected, l, this.latestValues), this.projectionTransform = Sd(this.projectionDelta, this.treeScale), this.projectionTransform === c && this.treeScale.x === a && this.treeScale.y === s || (this.hasProjected = !0, this.scheduleRender(), this.notifyListeners(\"projectionUpdate\", l)), Cd.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = !1;\n        }\n        show() {\n            this.isVisible = !0;\n        }\n        scheduleRender(e1 = !0) {\n            if (this.options.scheduleRender && this.options.scheduleRender(), e1) {\n                const e1 = this.getStack();\n                e1 && e1.scheduleRender();\n            }\n            this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);\n        }\n        setAnimationOrigin(e1, t = !1) {\n            const n = this.snapshot, o = n ? n.latestValues : {}, r = {\n                ...this.latestValues\n            }, i = Eu();\n            this.relativeParent && this.relativeParent.options.layoutRoot || (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !t;\n            const a = Tu(), s = (n ? n.source : void 0) !== (this.layout ? this.layout.source : void 0), l = this.getStack(), c = !l || l.members.length <= 1, u = Boolean(s && !c && !0 === this.options.crossfade && !this.path.some(Yd));\n            let d;\n            this.animationProgress = 0, this.mixTargetDelta = (t)=>{\n                const n = t / 1e3;\n                var l, h;\n                Wd(i.x, e1.x, n), Wd(i.y, e1.y, n), this.setTargetDelta(i), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (yu(a, this.layout.layoutBox, this.relativeParent.layout.layoutBox), function(e1, t, n, o) {\n                    Ud(e1.x, t.x, n.x, o), Ud(e1.y, t.y, n.y, o);\n                }(this.relativeTarget, this.relativeTargetOrigin, a, n), d && (l = this.relativeTarget, h = d, l.x.min === h.x.min && l.x.max === h.x.max && l.y.min === h.y.min && l.y.max === h.y.max) && (this.isProjectionDirty = !1), d || (d = Tu()), hd(d, this.relativeTarget)), s && (this.animationValues = r, function(e1, t, n, o, r, i) {\n                    r ? (e1.opacity = wl(0, void 0 !== n.opacity ? n.opacity : 1, ld(o)), e1.opacityExit = wl(void 0 !== t.opacity ? t.opacity : 1, 0, cd(o))) : i && (e1.opacity = wl(void 0 !== t.opacity ? t.opacity : 1, void 0 !== n.opacity ? n.opacity : 1, o));\n                    for(let r = 0; r < rd; r++){\n                        const i = `border${od[r]}Radius`;\n                        let a = sd(t, i), s = sd(n, i);\n                        void 0 === a && void 0 === s || (a || (a = 0), s || (s = 0), 0 === a || 0 === s || ad(a) === ad(s) ? (e1[i] = Math.max(wl(id(a), id(s), o), 0), (Ma.test(s) || Ma.test(a)) && (e1[i] += \"%\")) : e1[i] = s);\n                    }\n                    (t.rotate || n.rotate) && (e1.rotate = wl(t.rotate || 0, n.rotate || 0, o));\n                }(r, o, this.latestValues, n, u, c)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = n;\n            }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);\n        }\n        startAnimation(e1) {\n            this.notifyListeners(\"animationStart\"), this.currentAnimation && this.currentAnimation.stop(), this.resumingFrom && this.resumingFrom.currentAnimation && this.resumingFrom.currentAnimation.stop(), this.pendingAnimation && (gs(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = ps.update(()=>{\n                Ku.hasAnimatedSinceResize = !0, this.currentAnimation = function(e1, t, n) {\n                    const o = ha(e1) ? e1 : _c(e1);\n                    return o.start(Oc(\"\", o, t, n)), o.animation;\n                }(0, 1e3, {\n                    ...e1,\n                    onUpdate: (t)=>{\n                        this.mixTargetDelta(t), e1.onUpdate && e1.onUpdate(t);\n                    },\n                    onComplete: ()=>{\n                        e1.onComplete && e1.onComplete(), this.completeAnimation();\n                    }\n                }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;\n            });\n        }\n        completeAnimation() {\n            this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);\n            const e1 = this.getStack();\n            e1 && e1.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(1e3), this.currentAnimation.stop()), this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const e1 = this.getLead();\n            let { targetWithTransforms: t, target: n, layout: o, latestValues: r } = e1;\n            if (t && n && o) {\n                if (this !== e1 && this.layout && o && Zd(this.options.animationType, this.layout.layoutBox, o.layoutBox)) {\n                    n = this.target || Tu();\n                    const t = fu(this.layout.layoutBox.x);\n                    n.x.min = e1.target.x.min, n.x.max = n.x.min + t;\n                    const o = fu(this.layout.layoutBox.y);\n                    n.y.min = e1.target.y.min, n.y.max = n.y.min + o;\n                }\n                hd(t, n), Nu(t, r), mu(this.projectionDeltaWithTransform, this.layoutCorrected, t, r);\n            }\n        }\n        registerSharedNode(e1, t) {\n            this.sharedNodes.has(e1) || this.sharedNodes.set(e1, new kd);\n            this.sharedNodes.get(e1).add(t);\n            const n = t.options.initialPromotionConfig;\n            t.promote({\n                transition: n ? n.transition : void 0,\n                preserveFollowOpacity: n && n.shouldPreserveFollowOpacity ? n.shouldPreserveFollowOpacity(t) : void 0\n            });\n        }\n        isLead() {\n            const e1 = this.getStack();\n            return !e1 || e1.lead === this;\n        }\n        getLead() {\n            var e1;\n            const { layoutId: t } = this.options;\n            return t && (null === (e1 = this.getStack()) || void 0 === e1 ? void 0 : e1.lead) || this;\n        }\n        getPrevLead() {\n            var e1;\n            const { layoutId: t } = this.options;\n            return t ? null === (e1 = this.getStack()) || void 0 === e1 ? void 0 : e1.prevLead : void 0;\n        }\n        getStack() {\n            const { layoutId: e1 } = this.options;\n            if (e1) return this.root.sharedNodes.get(e1);\n        }\n        promote({ needsReset: e1, transition: t, preserveFollowOpacity: n } = {}) {\n            const o = this.getStack();\n            o && o.promote(this, n), e1 && (this.projectionDelta = void 0, this.needsReset = !0), t && this.setOptions({\n                transition: t\n            });\n        }\n        relegate() {\n            const e1 = this.getStack();\n            return !!e1 && e1.relegate(this);\n        }\n        resetRotation() {\n            const { visualElement: e1 } = this.options;\n            if (!e1) return;\n            let t = !1;\n            const { latestValues: n } = e1;\n            if ((n.rotate || n.rotateX || n.rotateY || n.rotateZ) && (t = !0), !t) return;\n            const o = {};\n            for(let t = 0; t < Td.length; t++){\n                const r = \"rotate\" + Td[t];\n                n[r] && (o[r] = n[r], e1.setStaticValue(r, 0));\n            }\n            e1.render();\n            for(const t in o)e1.setStaticValue(t, o[t]);\n            e1.scheduleRender();\n        }\n        getProjectionStyles(e1) {\n            var t, n;\n            if (!this.instance || this.isSVG) return;\n            if (!this.isVisible) return Ad;\n            const o = {\n                visibility: \"\"\n            }, r = this.getTransformTemplate();\n            if (this.needsReset) return this.needsReset = !1, o.opacity = \"\", o.pointerEvents = us(null == e1 ? void 0 : e1.pointerEvents) || \"\", o.transform = r ? r(this.latestValues, \"\") : \"none\", o;\n            const i = this.getLead();\n            if (!this.projectionDelta || !this.layout || !i.target) {\n                const t = {};\n                return this.options.layoutId && (t.opacity = void 0 !== this.latestValues.opacity ? this.latestValues.opacity : 1, t.pointerEvents = us(null == e1 ? void 0 : e1.pointerEvents) || \"\"), this.hasProjected && !Ou(this.latestValues) && (t.transform = r ? r({}, \"\") : \"none\", this.hasProjected = !1), t;\n            }\n            const a = i.animationValues || i.latestValues;\n            this.applyTransformsToTarget(), o.transform = Sd(this.projectionDeltaWithTransform, this.treeScale, a), r && (o.transform = r(a, o.transform));\n            const { x: s, y: l } = this.projectionDelta;\n            o.transformOrigin = `${100 * s.origin}% ${100 * l.origin}% 0`, i.animationValues ? o.opacity = i === this ? null !== (n = null !== (t = a.opacity) && void 0 !== t ? t : this.latestValues.opacity) && void 0 !== n ? n : 1 : this.preserveOpacity ? this.latestValues.opacity : a.opacityExit : o.opacity = i === this ? void 0 !== a.opacity ? a.opacity : \"\" : void 0 !== a.opacityExit ? a.opacityExit : 0;\n            for(const e1 in la){\n                if (void 0 === a[e1]) continue;\n                const { correct: t, applyTo: n } = la[e1], r = \"none\" === o.transform ? a[e1] : t(a[e1], i);\n                if (n) {\n                    const e1 = n.length;\n                    for(let t = 0; t < e1; t++)o[n[t]] = r;\n                } else o[e1] = r;\n            }\n            return this.options.layoutId && (o.pointerEvents = i === this ? us(null == e1 ? void 0 : e1.pointerEvents) || \"\" : \"none\"), o;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = void 0;\n        }\n        resetTree() {\n            this.root.nodes.forEach((e1)=>{\n                var t;\n                return null === (t = e1.currentAnimation) || void 0 === t ? void 0 : t.stop();\n            }), this.root.nodes.forEach(Vd), this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction Od(e1) {\n    e1.updateLayout();\n}\nfunction Bd(e1) {\n    var t;\n    const n = (null === (t = e1.resumeFrom) || void 0 === t ? void 0 : t.snapshot) || e1.snapshot;\n    if (e1.isLead() && e1.layout && n && e1.hasListeners(\"didUpdate\")) {\n        const { layoutBox: t, measuredBox: o } = e1.layout, { animationType: r } = e1.options, i = n.source !== e1.layout.source;\n        \"size\" === r ? Au((e1)=>{\n            const o = i ? n.measuredBox[e1] : n.layoutBox[e1], r = fu(o);\n            o.min = t[e1].min, o.max = o.min + r;\n        }) : Zd(r, n.layoutBox, t) && Au((o)=>{\n            const r = i ? n.measuredBox[o] : n.layoutBox[o], a = fu(t[o]);\n            r.max = r.min + a, e1.relativeTarget && !e1.currentAnimation && (e1.isProjectionDirty = !0, e1.relativeTarget[o].max = e1.relativeTarget[o].min + a);\n        });\n        const a = Eu();\n        mu(a, t, n.layoutBox);\n        const s = Eu();\n        i ? mu(s, e1.applyTransform(o, !0), n.measuredBox) : mu(s, t, n.layoutBox);\n        const l = !yd(a);\n        let c = !1;\n        if (!e1.resumeFrom) {\n            const o = e1.getClosestProjectingParent();\n            if (o && !o.resumeFrom) {\n                const { snapshot: r, layout: i } = o;\n                if (r && i) {\n                    const a = Tu();\n                    yu(a, n.layoutBox, r.layoutBox);\n                    const s = Tu();\n                    yu(s, t, i.layoutBox), wd(a, s) || (c = !0), o.options.layoutRoot && (e1.relativeTarget = s, e1.relativeTargetOrigin = a, e1.relativeParent = o);\n                }\n            }\n        }\n        e1.notifyListeners(\"didUpdate\", {\n            layout: t,\n            snapshot: n,\n            delta: s,\n            layoutDelta: a,\n            hasLayoutChanged: l,\n            hasRelativeTargetChanged: c\n        });\n    } else if (e1.isLead()) {\n        const { onExitComplete: t } = e1.options;\n        t && t();\n    }\n    e1.options.transition = void 0;\n}\nfunction jd(e1) {\n    Cd.totalNodes++, e1.parent && (e1.isProjecting() || (e1.isProjectionDirty = e1.parent.isProjectionDirty), e1.isSharedProjectionDirty || (e1.isSharedProjectionDirty = Boolean(e1.isProjectionDirty || e1.parent.isProjectionDirty || e1.parent.isSharedProjectionDirty)), e1.isTransformDirty || (e1.isTransformDirty = e1.parent.isTransformDirty));\n}\nfunction zd(e1) {\n    e1.isProjectionDirty = e1.isSharedProjectionDirty = e1.isTransformDirty = !1;\n}\nfunction Ld(e1) {\n    e1.clearSnapshot();\n}\nfunction Vd(e1) {\n    e1.clearMeasurements();\n}\nfunction Dd(e1) {\n    e1.isLayoutDirty = !1;\n}\nfunction _d(e1) {\n    const { visualElement: t } = e1.options;\n    t && t.getProps().onBeforeLayoutMeasure && t.notify(\"BeforeLayoutMeasure\"), e1.resetTransform();\n}\nfunction $d(e1) {\n    e1.finishAnimation(), e1.targetDelta = e1.relativeTarget = e1.target = void 0, e1.isProjectionDirty = !0;\n}\nfunction Fd(e1) {\n    e1.resolveTargetDelta();\n}\nfunction Id(e1) {\n    e1.calcProjection();\n}\nfunction Hd(e1) {\n    e1.resetRotation();\n}\nfunction Nd(e1) {\n    e1.removeLeadSnapshot();\n}\nfunction Wd(e1, t, n) {\n    e1.translate = wl(t.translate, 0, n), e1.scale = wl(t.scale, 1, n), e1.origin = t.origin, e1.originPoint = t.originPoint;\n}\nfunction Ud(e1, t, n, o) {\n    e1.min = wl(t.min, n.min, o), e1.max = wl(t.max, n.max, o);\n}\nfunction Yd(e1) {\n    return e1.animationValues && void 0 !== e1.animationValues.opacityExit;\n}\nconst Gd = {\n    duration: .45,\n    ease: [\n        .4,\n        0,\n        .1,\n        1\n    ]\n}, Xd = (e1)=>\"undefined\" != typeof navigator && navigator.userAgent.toLowerCase().includes(e1), qd = Xd(\"applewebkit/\") && !Xd(\"chrome/\") ? Math.round : fs;\nfunction Kd(e1) {\n    e1.min = qd(e1.min), e1.max = qd(e1.max);\n}\nfunction Zd(e1, t, n) {\n    return \"position\" === e1 || \"preserve-aspect\" === e1 && !pu(xd(t), xd(n), .2);\n}\nconst Jd = Md({\n    attachResizeListener: (e1, t)=>ws(e1, \"resize\", t),\n    measureScroll: ()=>({\n            x: document.documentElement.scrollLeft || document.body.scrollLeft,\n            y: document.documentElement.scrollTop || document.body.scrollTop\n        }),\n    checkIsScrollRoot: ()=>!0\n}), Qd = {\n    current: void 0\n}, eh = Md({\n    measureScroll: (e1)=>({\n            x: e1.scrollLeft,\n            y: e1.scrollTop\n        }),\n    defaultParent: ()=>{\n        if (!Qd.current) {\n            const e1 = new Jd({});\n            e1.mount(window), e1.setOptions({\n                layoutScroll: !0\n            }), Qd.current = e1;\n        }\n        return Qd.current;\n    },\n    resetTransform: (e1, t)=>{\n        e1.style.transform = void 0 !== t ? t : \"none\";\n    },\n    checkIsScrollRoot: (e1)=>Boolean(\"fixed\" === window.getComputedStyle(e1).position)\n}), th = {\n    pan: {\n        Feature: class extends Bs {\n            constructor(){\n                super(...arguments), this.removePointerDownListener = fs;\n            }\n            onPointerDown(e1) {\n                this.session = new au(e1, this.createPanHandlers(), {\n                    transformPagePoint: this.node.getTransformPagePoint(),\n                    contextWindow: Uu(this.node)\n                });\n            }\n            createPanHandlers() {\n                const { onPanSessionStart: e1, onPanStart: t, onPan: n, onPanEnd: o } = this.node.getProps();\n                return {\n                    onSessionStart: qu(e1),\n                    onStart: qu(t),\n                    onMove: n,\n                    onEnd: (e1, t)=>{\n                        delete this.session, o && ps.update(()=>o(e1, t));\n                    }\n                };\n            }\n            mount() {\n                this.removePointerDownListener = Ps(this.node.current, \"pointerdown\", (e1)=>this.onPointerDown(e1));\n            }\n            update() {\n                this.session && this.session.updateHandlers(this.createPanHandlers());\n            }\n            unmount() {\n                this.removePointerDownListener(), this.session && this.session.end();\n            }\n        }\n    },\n    drag: {\n        Feature: class extends Bs {\n            constructor(e1){\n                super(e1), this.removeGroupControls = fs, this.removeListeners = fs, this.controls = new Gu(e1);\n            }\n            mount() {\n                const { dragControls: e1 } = this.node.getProps();\n                e1 && (this.removeGroupControls = e1.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || fs;\n            }\n            unmount() {\n                this.removeGroupControls(), this.removeListeners();\n            }\n        },\n        ProjectionNode: eh,\n        MeasureLayout: td\n    }\n}, nh = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction oh(e1, t, n = 1) {\n    const [o, r] = function(e1) {\n        const t = nh.exec(e1);\n        if (!t) return [\n            , \n        ];\n        const [, n, o] = t;\n        return [\n            n,\n            o\n        ];\n    }(e1);\n    if (!o) return;\n    const i = window.getComputedStyle(t).getPropertyValue(o);\n    if (i) {\n        const e1 = i.trim();\n        return jc(e1) ? parseFloat(e1) : e1;\n    }\n    return va(r) ? oh(r, t, n + 1) : r;\n}\nconst rh = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\"\n]), ih = (e1)=>rh.has(e1), ah = (e1)=>e1 === wa || e1 === Oa, sh = (e1, t)=>parseFloat(e1.split(\", \")[t]), lh = (e1, t)=>(n, { transform: o })=>{\n        if (\"none\" === o || !o) return 0;\n        const r = o.match(/^matrix3d\\((.+)\\)$/);\n        if (r) return sh(r[1], t);\n        {\n            const t = o.match(/^matrix\\((.+)\\)$/);\n            return t ? sh(t[1], e1) : 0;\n        }\n    }, ch = new Set([\n    \"x\",\n    \"y\",\n    \"z\"\n]), uh = ca.filter((e1)=>!ch.has(e1));\nconst dh = {\n    width: ({ x: e1 }, { paddingLeft: t = \"0\", paddingRight: n = \"0\" })=>e1.max - e1.min - parseFloat(t) - parseFloat(n),\n    height: ({ y: e1 }, { paddingTop: t = \"0\", paddingBottom: n = \"0\" })=>e1.max - e1.min - parseFloat(t) - parseFloat(n),\n    top: (e1, { top: t })=>parseFloat(t),\n    left: (e1, { left: t })=>parseFloat(t),\n    bottom: ({ y: e1 }, { top: t })=>parseFloat(t) + (e1.max - e1.min),\n    right: ({ x: e1 }, { left: t })=>parseFloat(t) + (e1.max - e1.min),\n    x: lh(4, 13),\n    y: lh(5, 14)\n};\ndh.translateX = dh.x, dh.translateY = dh.y;\nconst hh = (e1, t, n = {}, o = {})=>{\n    t = {\n        ...t\n    }, o = {\n        ...o\n    };\n    const r = Object.keys(t).filter(ih);\n    let i = [], a = !1;\n    const s = [];\n    if (r.forEach((r)=>{\n        const l = e1.getValue(r);\n        if (!e1.hasValue(r)) return;\n        let c = n[r], u = Ic(c);\n        const d = t[r];\n        let h;\n        if (ss(d)) {\n            const e1 = d.length, t = null === d[0] ? 1 : 0;\n            c = d[t], u = Ic(c);\n            for(let n = t; n < e1 && null !== d[n]; n++)h ? Us(Ic(d[n]) === h) : h = Ic(d[n]);\n        } else h = Ic(d);\n        if (u !== h) if (ah(u) && ah(h)) {\n            const e1 = l.get();\n            \"string\" == typeof e1 && l.set(parseFloat(e1)), \"string\" == typeof d ? t[r] = parseFloat(d) : Array.isArray(d) && h === Oa && (t[r] = d.map(parseFloat));\n        } else (null == u ? void 0 : u.transform) && (null == h ? void 0 : h.transform) && (0 === c || 0 === d) ? 0 === c ? l.set(h.transform(c)) : t[r] = u.transform(d) : (a || (i = function(e1) {\n            const t = [];\n            return uh.forEach((n)=>{\n                const o = e1.getValue(n);\n                void 0 !== o && (t.push([\n                    n,\n                    o.get()\n                ]), o.set(n.startsWith(\"scale\") ? 1 : 0));\n            }), t.length && e1.render(), t;\n        }(e1), a = !0), s.push(r), o[r] = void 0 !== o[r] ? o[r] : t[r], l.jump(d));\n    }), s.length) {\n        const n = s.indexOf(\"height\") >= 0 ? window.pageYOffset : null, r = ((e1, t, n)=>{\n            const o = t.measureViewportBox(), r = t.current, i = getComputedStyle(r), { display: a } = i, s = {};\n            \"none\" === a && t.setStaticValue(\"display\", e1.display || \"block\"), n.forEach((e1)=>{\n                s[e1] = dh[e1](o, i);\n            }), t.render();\n            const l = t.measureViewportBox();\n            return n.forEach((n)=>{\n                const o = t.getValue(n);\n                o && o.jump(s[n]), e1[n] = dh[n](l, i);\n            }), e1;\n        })(t, e1, s);\n        return i.length && i.forEach(([t, n])=>{\n            e1.getValue(t).set(n);\n        }), e1.render(), Oi && null !== n && window.scrollTo({\n            top: n\n        }), {\n            target: r,\n            transitionEnd: o\n        };\n    }\n    return {\n        target: t,\n        transitionEnd: o\n    };\n};\nfunction fh(e1, t, n, o) {\n    return ((e1)=>Object.keys(e1).some(ih))(t) ? hh(e1, t, n, o) : {\n        target: t,\n        transitionEnd: o\n    };\n}\nconst ph = (e1, t, n, o)=>{\n    const r = function(e1, { ...t }, n) {\n        const o = e1.current;\n        if (!(o instanceof Element)) return {\n            target: t,\n            transitionEnd: n\n        };\n        n && (n = {\n            ...n\n        }), e1.values.forEach((e1)=>{\n            const t = e1.get();\n            if (!va(t)) return;\n            const n = oh(t, o);\n            n && e1.set(n);\n        });\n        for(const e1 in t){\n            const r = t[e1];\n            if (!va(r)) continue;\n            const i = oh(r, o);\n            i && (t[e1] = i, n || (n = {}), void 0 === n[e1] && (n[e1] = r));\n        }\n        return {\n            target: t,\n            transitionEnd: n\n        };\n    }(e1, t, o);\n    return fh(e1, t = r.target, n, o = r.transitionEnd);\n}, gh = {\n    current: null\n}, mh = {\n    current: !1\n};\nconst vh = new WeakMap, bh = Object.keys(Qi), yh = bh.length, wh = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\"\n], xh = Gi.length;\nclass kh {\n    constructor({ parent: e1, props: t, presenceContext: n, reducedMotionConfig: o, visualState: r }, i = {}){\n        this.current = null, this.children = new Set, this.isVariantNode = !1, this.isControllingVariants = !1, this.shouldReduceMotion = null, this.values = new Map, this.features = {}, this.valueSubscriptions = new Map, this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = ()=>this.notify(\"Update\", this.latestValues), this.render = ()=>{\n            this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));\n        }, this.scheduleRender = ()=>ps.render(this.render, !1, !0);\n        const { latestValues: a, renderState: s } = r;\n        this.latestValues = a, this.baseTarget = {\n            ...a\n        }, this.initialValues = t.initial ? {\n            ...a\n        } : {}, this.renderState = s, this.parent = e1, this.props = t, this.presenceContext = n, this.depth = e1 ? e1.depth + 1 : 0, this.reducedMotionConfig = o, this.options = i, this.isControllingVariants = Xi(t), this.isVariantNode = qi(t), this.isVariantNode && (this.variantChildren = new Set), this.manuallyAnimateOnMount = Boolean(e1 && e1.current);\n        const { willChange: l, ...c } = this.scrapeMotionValuesFromProps(t, {});\n        for(const e1 in c){\n            const t = c[e1];\n            void 0 !== a[e1] && ha(t) && (t.set(a[e1], !1), Bc(l) && l.add(e1));\n        }\n    }\n    scrapeMotionValuesFromProps(e1, t) {\n        return {};\n    }\n    mount(e1) {\n        this.current = e1, vh.set(e1, this), this.projection && !this.projection.instance && this.projection.mount(e1), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((e1, t)=>this.bindToMotionValue(t, e1)), mh.current || function() {\n            if (mh.current = !0, Oi) if (window.matchMedia) {\n                const e1 = window.matchMedia(\"(prefers-reduced-motion)\"), t = ()=>gh.current = e1.matches;\n                e1.addListener(t), t();\n            } else gh.current = !1;\n        }(), this.shouldReduceMotion = \"never\" !== this.reducedMotionConfig && (\"always\" === this.reducedMotionConfig || gh.current), this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        vh.delete(this.current), this.projection && this.projection.unmount(), gs(this.notifyUpdate), gs(this.render), this.valueSubscriptions.forEach((e1)=>e1()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);\n        for(const e1 in this.events)this.events[e1].clear();\n        for(const e1 in this.features)this.features[e1].unmount();\n        this.current = null;\n    }\n    bindToMotionValue(e1, t) {\n        const n = ua.has(e1), o = t.on(\"change\", (t)=>{\n            this.latestValues[e1] = t, this.props.onUpdate && ps.update(this.notifyUpdate, !1, !0), n && this.projection && (this.projection.isTransformDirty = !0);\n        }), r = t.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(e1, ()=>{\n            o(), r();\n        });\n    }\n    sortNodePosition(e1) {\n        return this.current && this.sortInstanceNodePosition && this.type === e1.type ? this.sortInstanceNodePosition(this.current, e1.current) : 0;\n    }\n    loadFeatures({ children: e1, ...t }, n, o, r) {\n        let i, a;\n        for(let e1 = 0; e1 < yh; e1++){\n            const n = bh[e1], { isEnabled: o, Feature: r, ProjectionNode: s, MeasureLayout: l } = Qi[n];\n            s && (i = s), o(t) && (!this.features[n] && r && (this.features[n] = new r(this)), l && (a = l));\n        }\n        if ((\"html\" === this.type || \"svg\" === this.type) && !this.projection && i) {\n            this.projection = new i(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId: e1, layout: n, drag: o, dragConstraints: a, layoutScroll: s, layoutRoot: l } = t;\n            this.projection.setOptions({\n                layoutId: e1,\n                layout: n,\n                alwaysMeasureLayout: Boolean(o) || a && Ni(a),\n                visualElement: this,\n                scheduleRender: ()=>this.scheduleRender(),\n                animationType: \"string\" == typeof n ? n : \"both\",\n                initialPromotionConfig: r,\n                layoutScroll: s,\n                layoutRoot: l\n            });\n        }\n        return a;\n    }\n    updateFeatures() {\n        for(const e1 in this.features){\n            const t = this.features[e1];\n            t.isMounted ? t.update() : (t.mount(), t.isMounted = !0);\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    measureViewportBox() {\n        return this.current ? this.measureInstanceViewportBox(this.current, this.props) : Tu();\n    }\n    getStaticValue(e1) {\n        return this.latestValues[e1];\n    }\n    setStaticValue(e1, t) {\n        this.latestValues[e1] = t;\n    }\n    makeTargetAnimatable(e1, t = !0) {\n        return this.makeTargetAnimatableFromInstance(e1, t);\n    }\n    update(e1, t) {\n        (e1.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = e1, this.prevPresenceContext = this.presenceContext, this.presenceContext = t;\n        for(let t = 0; t < wh.length; t++){\n            const n = wh[t];\n            this.propEventSubscriptions[n] && (this.propEventSubscriptions[n](), delete this.propEventSubscriptions[n]);\n            const o = e1[\"on\" + n];\n            o && (this.propEventSubscriptions[n] = this.on(n, o));\n        }\n        this.prevMotionValues = function(e1, t, n) {\n            const { willChange: o } = t;\n            for(const r in t){\n                const i = t[r], a = n[r];\n                if (ha(i)) e1.addValue(r, i), Bc(o) && o.add(r);\n                else if (ha(a)) e1.addValue(r, _c(i, {\n                    owner: e1\n                })), Bc(o) && o.remove(r);\n                else if (a !== i) if (e1.hasValue(r)) {\n                    const t = e1.getValue(r);\n                    !t.hasAnimated && t.set(i);\n                } else {\n                    const t = e1.getStaticValue(r);\n                    e1.addValue(r, _c(void 0 !== t ? t : i, {\n                        owner: e1\n                    }));\n                }\n            }\n            for(const o in n)void 0 === t[o] && e1.removeValue(o);\n            return t;\n        }(this, this.scrapeMotionValuesFromProps(e1, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();\n    }\n    getProps() {\n        return this.props;\n    }\n    getVariant(e1) {\n        return this.props.variants ? this.props.variants[e1] : void 0;\n    }\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;\n    }\n    getVariantContext(e1 = !1) {\n        if (e1) return this.parent ? this.parent.getVariantContext() : void 0;\n        if (!this.isControllingVariants) {\n            const e1 = this.parent && this.parent.getVariantContext() || {};\n            return void 0 !== this.props.initial && (e1.initial = this.props.initial), e1;\n        }\n        const t = {};\n        for(let e1 = 0; e1 < xh; e1++){\n            const n = Gi[e1], o = this.props[n];\n            (Wi(o) || !1 === o) && (t[n] = o);\n        }\n        return t;\n    }\n    addVariantChild(e1) {\n        const t = this.getClosestVariantNode();\n        if (t) return t.variantChildren && t.variantChildren.add(e1), ()=>t.variantChildren.delete(e1);\n    }\n    addValue(e1, t) {\n        t !== this.values.get(e1) && (this.removeValue(e1), this.bindToMotionValue(e1, t)), this.values.set(e1, t), this.latestValues[e1] = t.get();\n    }\n    removeValue(e1) {\n        this.values.delete(e1);\n        const t = this.valueSubscriptions.get(e1);\n        t && (t(), this.valueSubscriptions.delete(e1)), delete this.latestValues[e1], this.removeValueFromRenderState(e1, this.renderState);\n    }\n    hasValue(e1) {\n        return this.values.has(e1);\n    }\n    getValue(e1, t) {\n        if (this.props.values && this.props.values[e1]) return this.props.values[e1];\n        let n = this.values.get(e1);\n        return void 0 === n && void 0 !== t && (n = _c(t, {\n            owner: this\n        }), this.addValue(e1, n)), n;\n    }\n    readValue(e1) {\n        var t;\n        return void 0 === this.latestValues[e1] && this.current ? null !== (t = this.getBaseTargetFromProps(this.props, e1)) && void 0 !== t ? t : this.readValueFromInstance(this.current, e1, this.options) : this.latestValues[e1];\n    }\n    setBaseTarget(e1, t) {\n        this.baseTarget[e1] = t;\n    }\n    getBaseTarget(e1) {\n        var t;\n        const { initial: n } = this.props, o = \"string\" == typeof n || \"object\" == typeof n ? null === (t = is(this.props, n)) || void 0 === t ? void 0 : t[e1] : void 0;\n        if (n && void 0 !== o) return o;\n        const r = this.getBaseTargetFromProps(this.props, e1);\n        return void 0 === r || ha(r) ? void 0 !== this.initialValues[e1] && void 0 === o ? void 0 : this.baseTarget[e1] : r;\n    }\n    on(e1, t) {\n        return this.events[e1] || (this.events[e1] = new Vc), this.events[e1].add(t);\n    }\n    notify(e1, ...t) {\n        this.events[e1] && this.events[e1].notify(...t);\n    }\n}\nclass Sh extends kh {\n    sortInstanceNodePosition(e1, t) {\n        return 2 & e1.compareDocumentPosition(t) ? 1 : -1;\n    }\n    getBaseTargetFromProps(e1, t) {\n        return e1.style ? e1.style[t] : void 0;\n    }\n    removeValueFromRenderState(e1, { vars: t, style: n }) {\n        delete t[e1], delete n[e1];\n    }\n    makeTargetAnimatableFromInstance({ transition: e1, transitionEnd: t, ...n }, o) {\n        const r = function(e1, t, n) {\n            const o = {};\n            for(const r in e1){\n                const e1 = Uc(r, t);\n                if (void 0 !== e1) o[r] = e1;\n                else {\n                    const e1 = n.getValue(r);\n                    e1 && (o[r] = e1.get());\n                }\n            }\n            return o;\n        }(n, e1 || {}, this);\n        if (o) {\n            !function(e1, t, n) {\n                var o, r;\n                const i = Object.keys(t).filter((t)=>!e1.hasValue(t)), a = i.length;\n                if (a) for(let s = 0; s < a; s++){\n                    const a = i[s], l = t[a];\n                    let c = null;\n                    Array.isArray(l) && (c = l[0]), null === c && (c = null !== (r = null !== (o = n[a]) && void 0 !== o ? o : e1.readValue(a)) && void 0 !== r ? r : t[a]), null != c && (\"string\" == typeof c && (jc(c) || Rc(c)) ? c = parseFloat(c) : !Nc(c) && zl.test(l) && (c = Ac(a, l)), e1.addValue(a, _c(c, {\n                        owner: e1\n                    })), void 0 === n[a] && (n[a] = c), null !== c && e1.setBaseTarget(a, c));\n                }\n            }(this, n, r);\n            const e1 = ph(this, n, r, t);\n            t = e1.transitionEnd, n = e1.target;\n        }\n        return {\n            transition: e1,\n            transitionEnd: t,\n            ...n\n        };\n    }\n}\nclass Ph extends Sh {\n    constructor(){\n        super(...arguments), this.type = \"html\";\n    }\n    readValueFromInstance(e1, t) {\n        if (ua.has(t)) {\n            const e1 = Tc(t);\n            return e1 && e1.default || 0;\n        }\n        {\n            const o = (n = e1, window.getComputedStyle(n)), r = (ma(t) ? o.getPropertyValue(t) : o[t]) || 0;\n            return \"string\" == typeof r ? r.trim() : r;\n        }\n        var n;\n    }\n    measureInstanceViewportBox(e1, { transformPagePoint: t }) {\n        return Wu(e1, t);\n    }\n    build(e1, t, n, o) {\n        Da(e1, t, n, o.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(e1, t) {\n        return os(e1, t);\n    }\n    handleChildMotionValue() {\n        this.childSubscription && (this.childSubscription(), delete this.childSubscription);\n        const { children: e1 } = this.props;\n        ha(e1) && (this.childSubscription = e1.on(\"change\", (e1)=>{\n            this.current && (this.current.textContent = `${e1}`);\n        }));\n    }\n    renderInstance(e1, t, n, o) {\n        es(e1, t, n, o);\n    }\n}\nclass Eh extends Sh {\n    constructor(){\n        super(...arguments), this.type = \"svg\", this.isSVGTag = !1;\n    }\n    getBaseTargetFromProps(e1, t) {\n        return e1[t];\n    }\n    readValueFromInstance(e1, t) {\n        if (ua.has(t)) {\n            const e1 = Tc(t);\n            return e1 && e1.default || 0;\n        }\n        return t = ts.has(t) ? t : zi(t), e1.getAttribute(t);\n    }\n    measureInstanceViewportBox() {\n        return Tu();\n    }\n    scrapeMotionValuesFromProps(e1, t) {\n        return rs(e1, t);\n    }\n    build(e1, t, n, o) {\n        qa(e1, t, n, this.isSVGTag, o.transformTemplate);\n    }\n    renderInstance(e1, t, n, o) {\n        ns(e1, t, 0, o);\n    }\n    mount(e1) {\n        this.isSVGTag = Za(e1.tagName), super.mount(e1);\n    }\n}\nconst Th = (e1, t)=>sa(e1) ? new Eh(t, {\n        enableHardwareAcceleration: !1\n    }) : new Ph(t, {\n        enableHardwareAcceleration: !0\n    }), Ah = {\n    ...ru,\n    ...Hs,\n    ...th,\n    ...{\n        layout: {\n            ProjectionNode: eh,\n            MeasureLayout: td\n        }\n    }\n}, Rh = ia((e1, t)=>(function(e1, { forwardMotionProps: t = !1 }, n, o) {\n        return {\n            ...sa(e1) ? bs : ys,\n            preloadedFeatures: n,\n            useRender: Qa(t),\n            createVisualElement: o,\n            Component: e1\n        };\n    })(e1, t, Ah, Th));\nfunction Ch() {\n    const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!1);\n    return Bi(()=>(e1.current = !0, ()=>{\n            e1.current = !1;\n        }), []), e1;\n}\nclass Mh extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n    getSnapshotBeforeUpdate(e1) {\n        const t = this.props.childRef.current;\n        if (t && e1.isPresent && !this.props.isPresent) {\n            const e1 = this.props.sizeRef.current;\n            e1.height = t.offsetHeight || 0, e1.width = t.offsetWidth || 0, e1.top = t.offsetTop, e1.left = t.offsetLeft;\n        }\n        return null;\n    }\n    componentDidUpdate() {}\n    render() {\n        return this.props.children;\n    }\n}\nfunction Oh({ children: e1, isPresent: t }) {\n    const n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)(), r = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useInsertionEffect)(()=>{\n        const { width: e1, height: o, top: a, left: s } = i.current;\n        if (t || !r.current || !e1 || !o) return;\n        r.current.dataset.motionPopId = n;\n        const l = document.createElement(\"style\");\n        return document.head.appendChild(l), l.sheet && l.sheet.insertRule(`\\n          [data-motion-pop-id=\"${n}\"] {\\n            position: absolute !important;\\n            width: ${e1}px !important;\\n            height: ${o}px !important;\\n            top: ${a}px !important;\\n            left: ${s}px !important;\\n          }\\n        `), ()=>{\n            document.head.removeChild(l);\n        };\n    }, [\n        t\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Mh, {\n        isPresent: t,\n        childRef: r,\n        sizeRef: i\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(e1, {\n        ref: r\n    }));\n}\nconst Bh = ({ children: e1, initial: t, isPresent: n, onExitComplete: r, custom: a, presenceAffectsLayout: s, mode: l })=>{\n    const c = as(jh), u = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)(), d = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            id: u,\n            initial: t,\n            isPresent: n,\n            custom: a,\n            onExitComplete: (e1)=>{\n                c.set(e1, !0);\n                for (const e1 of c.values())if (!e1) return;\n                r && r();\n            },\n            register: (e1)=>(c.set(e1, !1), ()=>c.delete(e1))\n        }), s ? void 0 : [\n        n\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        c.forEach((e1, t)=>c.set(t, !1));\n    }, [\n        n\n    ]), react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        !n && !c.size && r && r();\n    }, [\n        n\n    ]), \"popLayout\" === l && (e1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Oh, {\n        isPresent: n\n    }, e1)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Mi.Provider, {\n        value: d\n    }, e1);\n};\nfunction jh() {\n    return new Map;\n}\nconst zh = (e1)=>e1.key || \"\";\nconst Lh = ({ children: e1, custom: t, initial: n = !0, onExitComplete: r, exitBeforeEnter: i, presenceAffectsLayout: s = !0, mode: l = \"sync\" })=>{\n    const c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ea).forceRender || function() {\n        const e1 = Ch(), [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0), o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n            e1.current && n(t + 1);\n        }, [\n            t\n        ]);\n        return [\n            (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>ps.postRender(o), [\n                o\n            ]),\n            t\n        ];\n    }()[0], d = Ch(), f = function(e1) {\n        const t = [];\n        return react__WEBPACK_IMPORTED_MODULE_1__.Children.forEach(e1, (e1)=>{\n            /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(e1) && t.push(e1);\n        }), t;\n    }(e1);\n    let g = f;\n    const w = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map).current, x = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(g), k = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map).current, S = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!0);\n    var P;\n    if (Bi(()=>{\n        S.current = !1, function(e1, t) {\n            e1.forEach((e1)=>{\n                const n = zh(e1);\n                t.set(n, e1);\n            });\n        }(f, k), x.current = g;\n    }), P = ()=>{\n        S.current = !0, k.clear(), w.clear();\n    }, (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>()=>P(), []), S.current) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, g.map((e1)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Bh, {\n            key: zh(e1),\n            isPresent: !0,\n            initial: !!n && void 0,\n            presenceAffectsLayout: s,\n            mode: l\n        }, e1)));\n    g = [\n        ...g\n    ];\n    const E = x.current.map(zh), T = f.map(zh), A = E.length;\n    for(let e1 = 0; e1 < A; e1++){\n        const t = E[e1];\n        -1 !== T.indexOf(t) || w.has(t) || w.set(t, void 0);\n    }\n    return \"wait\" === l && w.size && (g = []), w.forEach((e1, n)=>{\n        if (-1 !== T.indexOf(n)) return;\n        const i = k.get(n);\n        if (!i) return;\n        const a = E.indexOf(n);\n        let u = e1;\n        if (!u) {\n            const e1 = ()=>{\n                w.delete(n);\n                const e1 = Array.from(k.keys()).filter((e1)=>!T.includes(e1));\n                if (e1.forEach((e1)=>k.delete(e1)), x.current = f.filter((t)=>{\n                    const o = zh(t);\n                    return o === n || e1.includes(o);\n                }), !w.size) {\n                    if (!1 === d.current) return;\n                    c(), r && r();\n                }\n            };\n            u = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Bh, {\n                key: zh(i),\n                isPresent: !1,\n                onExitComplete: e1,\n                custom: t,\n                presenceAffectsLayout: s,\n                mode: l\n            }, i), w.set(n, u);\n        }\n        g.splice(a, 0, u);\n    }), g = g.map((e1)=>{\n        const t = e1.key;\n        return w.has(t) ? e1 : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Bh, {\n            key: zh(e1),\n            isPresent: !0,\n            presenceAffectsLayout: s,\n            mode: l\n        }, e1);\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, w.size ? g : g.map((e1)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(e1)));\n}, Vh = function(e1) {\n    var t, n, o, r, i, a, s, l, c, u, d, h;\n    const f = function(e1) {\n        const t = {\n            ...e1,\n            color: ve(null == e1 ? void 0 : e1.color)\n        };\n        return {\n            light: Me({\n                scheme: \"light\"\n            }, t),\n            dark: Me({\n                scheme: \"dark\"\n            }, t)\n        };\n    }(e1);\n    return K({\n        _version: 2,\n        avatar: null != (t = null == e1 ? void 0 : e1.avatar) ? t : D.avatar,\n        button: null != (n = null == e1 ? void 0 : e1.button) ? n : D.button,\n        card: null != (o = null == e1 ? void 0 : e1.card) ? o : D.card,\n        color: dt(f, e1),\n        container: null != (r = null == e1 ? void 0 : e1.container) ? r : D.container,\n        font: null != (i = null == e1 ? void 0 : e1.font) ? i : _,\n        input: null != (a = null == e1 ? void 0 : e1.input) ? a : D.input,\n        layer: null != (s = null == e1 ? void 0 : e1.layer) ? s : D.layer,\n        media: null != (l = null == e1 ? void 0 : e1.media) ? l : D.media,\n        radius: null != (c = null == e1 ? void 0 : e1.radius) ? c : D.radius,\n        shadow: null != (u = null == e1 ? void 0 : e1.shadow) ? u : D.shadow,\n        space: null != (d = null == e1 ? void 0 : e1.space) ? d : D.space,\n        style: null != (h = null == e1 ? void 0 : e1.style) ? h : D.style\n    });\n}(), Dh = [], _h = {}, $h = \"--motion-content-opacity\", Fh = {\n    initial: {\n        opacity: .5,\n        [$h]: 0,\n        scale: .97,\n        willChange: \"transform\"\n    },\n    animate: {\n        opacity: [\n            null,\n            1,\n            1\n        ],\n        [$h]: [\n            null,\n            null,\n            1\n        ],\n        scale: 1\n    },\n    exit: {\n        opacity: [\n            null,\n            null,\n            0\n        ],\n        [$h]: [\n            null,\n            0,\n            0\n        ],\n        scale: .97\n    },\n    transition: {\n        duration: .4,\n        type: \"spring\"\n    }\n};\nfunction Ih(e1) {\n    return 0 === e1 ? 0 : \"\".concat(e1 / 16, \"rem\");\n}\nfunction Hh(e1, t, n) {\n    return ((null == t ? void 0 : t.map(n)) || []).map((t, n)=>0 === n ? t : {\n            [\"@media screen and (min-width: \".concat(e1[n - 1], \"px)\")]: t\n        });\n}\nfunction Nh(e1, t) {\n    let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Dh;\n    if (!Array.isArray(n)) throw new Error(\"the property must be array of numbers\");\n    if (0 === n.length) return null;\n    const { media: o, space: r } = Y(e1);\n    return Hh(o, n, (e1)=>{\n        return n = t, o = Ih(r[e1]), n.reduce((e1, t)=>(e1[t] = o, e1), {});\n        var n, o;\n    });\n}\nfunction Wh(e1, t) {\n    const { $size: n, $weight: o } = t, { font: r, media: i } = Y(t.theme), { family: a, sizes: s, weights: l } = r[e1], c = o && l[o] || l.regular, u = s[2], d = {\n        position: \"relative\",\n        fontFamily: a,\n        fontWeight: c,\n        padding: \"1px 0\",\n        margin: 0,\n        \"&:before\": {\n            content: '\"\"',\n            display: \"block\",\n            height: 0\n        },\n        \"&:after\": {\n            content: '\"\"',\n            display: \"block\",\n            height: 0\n        },\n        \"& > code, & > span\": {\n            display: \"block\"\n        },\n        \"&:not([hidden])\": {\n            display: \"block\"\n        }\n    };\n    if (!n) return Wh.warned || (console.warn(\"No size specified for responsive font\", {\n        fontKey: e1,\n        $size: n,\n        props: t,\n        base: d\n    }), Wh.warned = !0), [\n        d\n    ];\n    const h = Hh(i, n, (e1)=>(function(e1) {\n            const { ascenderHeight: t, descenderHeight: n, fontSize: o, iconSize: r, letterSpacing: i, lineHeight: a } = e1, s = t + n, l = a - s, c = (l - r) / 2, u = 2 * Math.floor(1.125 * o / 2) + 1, d = (l - u) / 2;\n            return {\n                fontSize: Ih(o),\n                lineHeight: \"calc(\".concat(a, \" / \").concat(o, \")\"),\n                letterSpacing: Ih(i),\n                transform: \"translateY(\".concat(Ih(n), \")\"),\n                \"&:before\": {\n                    marginTop: \"calc(\".concat(Ih(0 - s), \" - 1px)\")\n                },\n                \"&:after\": {\n                    marginBottom: \"-1px\"\n                },\n                \"& svg:not([data-sanity-icon])\": {\n                    fontSize: \"calc(\".concat(u, \" / 16 * 1rem)\"),\n                    margin: Ih(d)\n                },\n                \"& [data-sanity-icon]\": {\n                    fontSize: \"calc(\".concat(r, \" / 16 * 1rem)\"),\n                    margin: Ih(c)\n                }\n            };\n        })(s[e1] || u));\n    return [\n        d,\n        ...h\n    ];\n}\nfunction Uh(e1, t) {\n    const n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>JSON.stringify(null != e1 ? e1 : t), [\n        t,\n        e1\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(function(e1, t) {\n            return void 0 === e1 ? t || Dh : Array.isArray(e1) ? e1 : [\n                e1\n            ];\n        })(e1, t), [\n        n\n    ]);\n}\nvar Yh, Gh = [], Xh = \"ResizeObserver loop completed with undelivered notifications.\";\n!function(e1) {\n    e1.BORDER_BOX = \"border-box\", e1.CONTENT_BOX = \"content-box\", e1.DEVICE_PIXEL_CONTENT_BOX = \"device-pixel-content-box\";\n}(Yh || (Yh = {}));\nvar qh, Kh = function(e1) {\n    return Object.freeze(e1);\n}, Zh = function(e1, t) {\n    this.inlineSize = e1, this.blockSize = t, Kh(this);\n}, Jh = function() {\n    function e1(e1, t, n, o) {\n        return this.x = e1, this.y = t, this.width = n, this.height = o, this.top = this.y, this.left = this.x, this.bottom = this.top + this.height, this.right = this.left + this.width, Kh(this);\n    }\n    return e1.prototype.toJSON = function() {\n        var e1 = this;\n        return {\n            x: e1.x,\n            y: e1.y,\n            top: e1.top,\n            right: e1.right,\n            bottom: e1.bottom,\n            left: e1.left,\n            width: e1.width,\n            height: e1.height\n        };\n    }, e1.fromRect = function(t) {\n        return new e1(t.x, t.y, t.width, t.height);\n    }, e1;\n}(), Qh = function(e1) {\n    return e1 instanceof SVGElement && \"getBBox\" in e1;\n}, ef = function(e1) {\n    if (Qh(e1)) {\n        var t = e1.getBBox(), n = t.width, o = t.height;\n        return !n && !o;\n    }\n    var r = e1, i = r.offsetWidth, a = r.offsetHeight;\n    return !(i || a || e1.getClientRects().length);\n}, tf = function(e1) {\n    var t;\n    if (e1 instanceof Element) return !0;\n    var n = null === (t = null == e1 ? void 0 : e1.ownerDocument) || void 0 === t ? void 0 : t.defaultView;\n    return !!(n && e1 instanceof n.Element);\n}, nf =  false ? 0 : {}, of = new WeakMap, rf = /auto|scroll/, af = /^tb|vertical/, sf = /msie|trident/i.test(nf.navigator && nf.navigator.userAgent), lf = function(e1) {\n    return parseFloat(e1 || \"0\");\n}, cf = function(e1, t, n) {\n    return void 0 === e1 && (e1 = 0), void 0 === t && (t = 0), void 0 === n && (n = !1), new Zh((n ? t : e1) || 0, (n ? e1 : t) || 0);\n}, uf = Kh({\n    devicePixelContentBoxSize: cf(),\n    borderBoxSize: cf(),\n    contentBoxSize: cf(),\n    contentRect: new Jh(0, 0, 0, 0)\n}), df = function(e1, t) {\n    if (void 0 === t && (t = !1), of.has(e1) && !t) return of.get(e1);\n    if (ef(e1)) return of.set(e1, uf), uf;\n    var n = getComputedStyle(e1), o = Qh(e1) && e1.ownerSVGElement && e1.getBBox(), r = !sf && \"border-box\" === n.boxSizing, i = af.test(n.writingMode || \"\"), a = !o && rf.test(n.overflowY || \"\"), s = !o && rf.test(n.overflowX || \"\"), l = o ? 0 : lf(n.paddingTop), c = o ? 0 : lf(n.paddingRight), u = o ? 0 : lf(n.paddingBottom), d = o ? 0 : lf(n.paddingLeft), h = o ? 0 : lf(n.borderTopWidth), f = o ? 0 : lf(n.borderRightWidth), p = o ? 0 : lf(n.borderBottomWidth), g = d + c, m = l + u, v = (o ? 0 : lf(n.borderLeftWidth)) + f, b = h + p, y = s ? e1.offsetHeight - b - e1.clientHeight : 0, w = a ? e1.offsetWidth - v - e1.clientWidth : 0, x = r ? g + v : 0, k = r ? m + b : 0, S = o ? o.width : lf(n.width) - x - w, P = o ? o.height : lf(n.height) - k - y, E = S + g + w + v, T = P + m + y + b, A = Kh({\n        devicePixelContentBoxSize: cf(Math.round(S * devicePixelRatio), Math.round(P * devicePixelRatio), i),\n        borderBoxSize: cf(E, T, i),\n        contentBoxSize: cf(S, P, i),\n        contentRect: new Jh(d, l, S, P)\n    });\n    return of.set(e1, A), A;\n}, hf = function(e1, t, n) {\n    var o = df(e1, n), r = o.borderBoxSize, i = o.contentBoxSize, a = o.devicePixelContentBoxSize;\n    switch(t){\n        case Yh.DEVICE_PIXEL_CONTENT_BOX:\n            return a;\n        case Yh.BORDER_BOX:\n            return r;\n        default:\n            return i;\n    }\n}, ff = function(e1) {\n    var t = df(e1);\n    this.target = e1, this.contentRect = t.contentRect, this.borderBoxSize = Kh([\n        t.borderBoxSize\n    ]), this.contentBoxSize = Kh([\n        t.contentBoxSize\n    ]), this.devicePixelContentBoxSize = Kh([\n        t.devicePixelContentBoxSize\n    ]);\n}, pf = function(e1) {\n    if (ef(e1)) return 1 / 0;\n    for(var t = 0, n = e1.parentNode; n;)t += 1, n = n.parentNode;\n    return t;\n}, gf = function() {\n    var e1 = 1 / 0, t = [];\n    Gh.forEach(function(n) {\n        if (0 !== n.activeTargets.length) {\n            var o = [];\n            n.activeTargets.forEach(function(t) {\n                var n = new ff(t.target), r = pf(t.target);\n                o.push(n), t.lastReportedSize = hf(t.target, t.observedBox), r < e1 && (e1 = r);\n            }), t.push(function() {\n                n.callback.call(n.observer, o, n.observer);\n            }), n.activeTargets.splice(0, n.activeTargets.length);\n        }\n    });\n    for(var n = 0, o = t; n < o.length; n++){\n        (0, o[n])();\n    }\n    return e1;\n}, mf = function(e1) {\n    Gh.forEach(function(t) {\n        t.activeTargets.splice(0, t.activeTargets.length), t.skippedTargets.splice(0, t.skippedTargets.length), t.observationTargets.forEach(function(n) {\n            n.isActive() && (pf(n.target) > e1 ? t.activeTargets.push(n) : t.skippedTargets.push(n));\n        });\n    });\n}, vf = function() {\n    var e1, t = 0;\n    for(mf(t); Gh.some(function(e1) {\n        return e1.activeTargets.length > 0;\n    });)t = gf(), mf(t);\n    return Gh.some(function(e1) {\n        return e1.skippedTargets.length > 0;\n    }) && (\"function\" == typeof ErrorEvent ? e1 = new ErrorEvent(\"error\", {\n        message: Xh\n    }) : ((e1 = document.createEvent(\"Event\")).initEvent(\"error\", !1, !1), e1.message = Xh), window.dispatchEvent(e1)), t > 0;\n}, bf = [], yf = function(e1) {\n    if (!qh) {\n        var t = 0, n = document.createTextNode(\"\");\n        new MutationObserver(function() {\n            return bf.splice(0).forEach(function(e1) {\n                return e1();\n            });\n        }).observe(n, {\n            characterData: !0\n        }), qh = function() {\n            n.textContent = \"\".concat(t ? t-- : t++);\n        };\n    }\n    bf.push(e1), qh();\n}, wf = 0, xf = {\n    attributes: !0,\n    characterData: !0,\n    childList: !0,\n    subtree: !0\n}, kf = [\n    \"resize\",\n    \"load\",\n    \"transitionend\",\n    \"animationend\",\n    \"animationstart\",\n    \"animationiteration\",\n    \"keyup\",\n    \"keydown\",\n    \"mouseup\",\n    \"mousedown\",\n    \"mouseover\",\n    \"mouseout\",\n    \"blur\",\n    \"focus\"\n], Sf = function(e1) {\n    return void 0 === e1 && (e1 = 0), Date.now() + e1;\n}, Pf = !1, Ef = new (function() {\n    function e1() {\n        var e1 = this;\n        this.stopped = !0, this.listener = function() {\n            return e1.schedule();\n        };\n    }\n    return e1.prototype.run = function(e1) {\n        var t = this;\n        if (void 0 === e1 && (e1 = 250), !Pf) {\n            Pf = !0;\n            var n, o = Sf(e1);\n            n = function() {\n                var n = !1;\n                try {\n                    n = vf();\n                } finally{\n                    if (Pf = !1, e1 = o - Sf(), !wf) return;\n                    n ? t.run(1e3) : e1 > 0 ? t.run(e1) : t.start();\n                }\n            }, yf(function() {\n                requestAnimationFrame(n);\n            });\n        }\n    }, e1.prototype.schedule = function() {\n        this.stop(), this.run();\n    }, e1.prototype.observe = function() {\n        var e1 = this, t = function() {\n            return e1.observer && e1.observer.observe(document.body, xf);\n        };\n        document.body ? t() : nf.addEventListener(\"DOMContentLoaded\", t);\n    }, e1.prototype.start = function() {\n        var e1 = this;\n        this.stopped && (this.stopped = !1, this.observer = new MutationObserver(this.listener), this.observe(), kf.forEach(function(t) {\n            return nf.addEventListener(t, e1.listener, !0);\n        }));\n    }, e1.prototype.stop = function() {\n        var e1 = this;\n        this.stopped || (this.observer && this.observer.disconnect(), kf.forEach(function(t) {\n            return nf.removeEventListener(t, e1.listener, !0);\n        }), this.stopped = !0);\n    }, e1;\n}()), Tf = function(e1) {\n    !wf && e1 > 0 && Ef.start(), !(wf += e1) && Ef.stop();\n}, Af = function() {\n    function e1(e1, t) {\n        this.target = e1, this.observedBox = t || Yh.CONTENT_BOX, this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    return e1.prototype.isActive = function() {\n        var e1, t = hf(this.target, this.observedBox, !0);\n        return e1 = this.target, Qh(e1) || function(e1) {\n            switch(e1.tagName){\n                case \"INPUT\":\n                    if (\"image\" !== e1.type) break;\n                case \"VIDEO\":\n                case \"AUDIO\":\n                case \"EMBED\":\n                case \"OBJECT\":\n                case \"CANVAS\":\n                case \"IFRAME\":\n                case \"IMG\":\n                    return !0;\n            }\n            return !1;\n        }(e1) || \"inline\" !== getComputedStyle(e1).display || (this.lastReportedSize = t), this.lastReportedSize.inlineSize !== t.inlineSize || this.lastReportedSize.blockSize !== t.blockSize;\n    }, e1;\n}(), Rf = function(e1, t) {\n    this.activeTargets = [], this.skippedTargets = [], this.observationTargets = [], this.observer = e1, this.callback = t;\n}, Cf = new WeakMap, Mf = function(e1, t) {\n    for(var n = 0; n < e1.length; n += 1)if (e1[n].target === t) return n;\n    return -1;\n}, Of = function() {\n    function e1() {}\n    return e1.connect = function(e1, t) {\n        var n = new Rf(e1, t);\n        Cf.set(e1, n);\n    }, e1.observe = function(e1, t, n) {\n        var o = Cf.get(e1), r = 0 === o.observationTargets.length;\n        Mf(o.observationTargets, t) < 0 && (r && Gh.push(o), o.observationTargets.push(new Af(t, n && n.box)), Tf(1), Ef.schedule());\n    }, e1.unobserve = function(e1, t) {\n        var n = Cf.get(e1), o = Mf(n.observationTargets, t), r = 1 === n.observationTargets.length;\n        o >= 0 && (r && Gh.splice(Gh.indexOf(n), 1), n.observationTargets.splice(o, 1), Tf(-1));\n    }, e1.disconnect = function(e1) {\n        var t = this, n = Cf.get(e1);\n        n.observationTargets.slice().forEach(function(n) {\n            return t.unobserve(e1, n.target);\n        }), n.activeTargets.splice(0, n.activeTargets.length);\n    }, e1;\n}(), Bf = function() {\n    function e1(e1) {\n        if (0 === arguments.length) throw new TypeError(\"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.\");\n        if (\"function\" != typeof e1) throw new TypeError(\"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.\");\n        Of.connect(this, e1);\n    }\n    return e1.prototype.observe = function(e1, t) {\n        if (0 === arguments.length) throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        if (!tf(e1)) throw new TypeError(\"Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        Of.observe(this, e1, t);\n    }, e1.prototype.unobserve = function(e1) {\n        if (0 === arguments.length) throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.\");\n        if (!tf(e1)) throw new TypeError(\"Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element\");\n        Of.unobserve(this, e1);\n    }, e1.prototype.disconnect = function() {\n        Of.disconnect(this);\n    }, e1.toString = function() {\n        return \"function ResizeObserver () { [polyfill code] }\";\n    }, e1;\n}();\nconst jf = \"undefined\" != typeof document && \"undefined\" != \"undefined\" && 0 ? 0 : Bf, zf = function() {\n    const e1 = new WeakMap, t = new WeakMap;\n    return {\n        subscribe (n, o) {\n            const r = t.get(n) || [];\n            let i = e1.get(n);\n            if (!t.has(n)) {\n                t.set(n, r);\n                const e1 = {\n                    subscribe (e1, t) {\n                        const n = new jf((e1)=>{\n                            let [n] = e1;\n                            t({\n                                _contentRect: n.contentRect,\n                                border: {\n                                    width: n.borderBoxSize[0].inlineSize,\n                                    height: n.borderBoxSize[0].blockSize\n                                },\n                                content: {\n                                    width: n.contentRect.width,\n                                    height: n.contentRect.height\n                                }\n                            });\n                        });\n                        return n.observe(e1), ()=>{\n                            n.unobserve(e1), n.disconnect();\n                        };\n                    }\n                };\n                i = e1.subscribe(n, (e1)=>{\n                    for (const t of r)t(e1);\n                });\n            }\n            return r.push(o), ()=>{\n                const e1 = r.indexOf(o);\n                e1 > -1 && r.splice(e1, 1), 0 === r.length && i && i();\n            };\n        }\n    };\n}();\nconst Lf = function() {\n    if (\"undefined\" != typeof globalThis) return globalThis;\n    if (false) {}\n    if (\"undefined\" != typeof self) return self;\n    if (\"undefined\" != typeof global) return global;\n    throw new Error(\"@sanity/ui: could not locate global scope\");\n}(), Vf = Symbol.for(\"@sanity/ui/context/theme\");\nLf[Vf] = Lf[Vf] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst Df = Lf[Vf];\nfunction _f(t) {\n    const n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Df), { children: o, scheme: r = (null == n ? void 0 : n.scheme) || \"light\", theme: s = (null == n ? void 0 : n.theme) || null, tone: l = (null == n ? void 0 : n.tone) || \"default\" } = t, c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>s ? {\n            version: 0,\n            theme: s,\n            scheme: r,\n            tone: l\n        } : null, [\n        s,\n        r,\n        l\n    ]), u = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>s ? Rt(s, r, l) : null, [\n        r,\n        s,\n        l\n    ]);\n    return u ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Df.Provider, {\n        value: c,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(nr, {\n            theme: u,\n            children: o\n        })\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"pre\", {\n        children: 'ThemeProvider: no \"theme\" property provided'\n    });\n}\nfunction $f() {\n    const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Df);\n    if (!e1) throw new Error(\"useRootTheme(): missing context value\");\n    return e1;\n}\nfunction Ff(t) {\n    const { children: n, scheme: o, tone: r } = t, i = $f();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_f, {\n        scheme: o || i.scheme,\n        theme: i.theme,\n        tone: r,\n        children: n\n    });\n}\nfunction If() {\n    return Y(function() {\n        var e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(tr);\n        if (!e1) throw ko(18);\n        return e1;\n    }());\n}\nconst Hf = new WeakMap;\nfunction Nf(e1, t) {\n    return 0 === t ? \"screen and (max-width: \".concat(e1[t] - 1, \"px)\") : t === e1.length ? \"screen and (min-width: \".concat(e1[t - 1], \"px)\") : \"screen and (min-width: \".concat(e1[t - 1], \"px) and (max-width: \").concat(e1[t] - 1, \"px)\");\n}\nfunction Wf() {\n    return 0;\n}\nfunction Uf() {\n    const { media: e1 } = If();\n    let t = Hf.get(e1);\n    return t || (t = function(e1) {\n        const t = e1.length;\n        let n;\n        const o = ()=>{\n            if (!n) {\n                n = [];\n                for(let o = t; o > -1; o -= 1){\n                    const t = Nf(e1, o);\n                    n.push({\n                        index: o,\n                        mq: window.matchMedia(t)\n                    });\n                }\n            }\n            return n;\n        };\n        return {\n            getSnapshot: ()=>{\n                for (const { index: e1, mq: t } of o())if (t.matches) return e1;\n                return 0;\n            },\n            subscribe: (e1)=>{\n                const t = [];\n                for (const { mq: n } of o()){\n                    const o = ()=>{\n                        n.matches && e1();\n                    };\n                    n.addEventListener(\"change\", o), t.push(()=>n.removeEventListener(\"change\", o));\n                }\n                return ()=>{\n                    for (const e1 of t)e1();\n                };\n            }\n        };\n    }(e1), Hf.set(e1, t)), (0,react__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStore)(t.subscribe, t.getSnapshot, Wf);\n}\nconst Yf =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nfunction Gf(e1) {\n    const t = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    return Yf(()=>{\n        e1 && (\"function\" == typeof e1 ? e1(t.current) : e1.current = t.current);\n    }), t;\n}\nfunction Xf(e1) {\n    var t, n;\n    const { card: o, media: r } = Y(e1.theme), i = \"\".concat(null != (n = null == (t = o.border) ? void 0 : t.width) ? n : 1, \"px solid var(--card-border-color)\");\n    return Hh(r, e1.$border, (e1)=>e1 ? {\n            \"&&\": {\n                border: i\n            }\n        } : {\n            \"&&\": {\n                border: 0\n            }\n        });\n}\nfunction qf(e1) {\n    var t, n;\n    const { card: o, media: r } = Y(e1.theme), i = \"\".concat(null != (n = null == (t = o.border) ? void 0 : t.width) ? n : 1, \"px solid var(--card-border-color)\");\n    return Hh(r, e1.$borderTop, (e1)=>e1 ? {\n            \"&&\": {\n                borderTop: i\n            }\n        } : {\n            \"&&\": {\n                borderTop: 0\n            }\n        });\n}\nfunction Kf(e1) {\n    var t, n;\n    const { card: o, media: r } = Y(e1.theme), i = \"\".concat(null != (n = null == (t = o.border) ? void 0 : t.width) ? n : 1, \"px solid var(--card-border-color)\");\n    return Hh(r, e1.$borderRight, (e1)=>e1 ? {\n            \"&&\": {\n                borderRight: i\n            }\n        } : {\n            \"&&\": {\n                borderRight: 0\n            }\n        });\n}\nfunction Zf(e1) {\n    var t, n;\n    const { card: o, media: r } = Y(e1.theme), i = \"\".concat(null != (n = null == (t = o.border) ? void 0 : t.width) ? n : 1, \"px solid var(--card-border-color)\");\n    return Hh(r, e1.$borderBottom, (e1)=>e1 ? {\n            \"&&\": {\n                borderBottom: i\n            }\n        } : {\n            \"&&\": {\n                borderBottom: 0\n            }\n        });\n}\nfunction Jf(e1) {\n    var t, n;\n    const { card: o, media: r } = Y(e1.theme), i = \"\".concat(null != (n = null == (t = o.border) ? void 0 : t.width) ? n : 1, \"px solid var(--card-border-color)\");\n    return Hh(r, e1.$borderLeft, (e1)=>e1 ? {\n            \"&&\": {\n                borderLeft: i\n            }\n        } : {\n            \"&&\": {\n                borderLeft: 0\n            }\n        });\n}\nconst Qf = {\n    '&[data-as=\"ul\"],&[data-as=\"ol\"]': {\n        listStyle: \"none\"\n    }\n}, ep = {\n    content: \"content-box\",\n    border: \"border-box\"\n}, tp = {\n    stretch: \"stretch\",\n    fill: \"100%\"\n};\nfunction np(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$display, (e1)=>({\n            \"&:not([hidden])\": {\n                display: e1\n            }\n        }));\n}\nfunction op(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$sizing, (e1)=>({\n            boxSizing: ep[e1]\n        }));\n}\nfunction rp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$height, (e1)=>({\n            height: tp[e1]\n        }));\n}\nfunction ip(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$overflow, (e1)=>({\n            overflow: e1\n        }));\n}\nconst ap = {\n    \"&&:not([hidden])\": {\n        display: \"flex\"\n    }\n};\nfunction sp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$align, (e1)=>({\n            alignItems: e1\n        }));\n}\nfunction lp(e1) {\n    const { media: t, space: n } = Y(e1.theme);\n    return Hh(t, e1.$gap, (e1)=>({\n            gap: e1 ? Ih(n[e1]) : void 0\n        }));\n}\nfunction cp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$wrap, (e1)=>({\n            flexWrap: e1\n        }));\n}\nfunction up(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$justify, (e1)=>({\n            justifyContent: e1\n        }));\n}\nfunction dp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$direction, (e1)=>({\n            flexDirection: e1\n        }));\n}\nconst hp = {\n    minWidth: 0,\n    minHeight: 0\n};\nfunction fp() {\n    return [\n        hp,\n        pp\n    ];\n}\nfunction pp(e1) {\n    const { media: t } = Y(e1.theme);\n    return e1.$flex ? Hh(t, e1.$flex, (e1)=>({\n            flex: e1\n        })) : Dh;\n}\nfunction gp(e1) {\n    return \"inset 0 0 0 \".concat(e1.width, \"px \").concat(e1.color);\n}\nfunction mp(e1) {\n    const { base: t, border: n, focusRing: o } = e1, r = o.offset + o.width, i = 0 - o.offset, a = t ? t.bg : \"var(--card-bg-color)\";\n    return [\n        i > 0 && \"inset 0 0 0 \".concat(i, \"px var(--card-focus-ring-color)\"),\n        n && gp(n),\n        i < 0 && \"0 0 0 \".concat(0 - i, \"px \").concat(a),\n        r > 0 && \"0 0 0 \".concat(r, \"px var(--card-focus-ring-color)\")\n    ].filter(Boolean).join(\",\");\n}\nconst vp = {\n    auto: \"auto\",\n    full: \"1 / -1\"\n}, bp = {\n    auto: \"auto\",\n    full: \"1 / -1\"\n};\nfunction yp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$row, (e1)=>\"number\" == typeof e1 ? {\n            gridRow: \"span \".concat(e1, \" / span \").concat(e1)\n        } : {\n            gridRow: vp[e1]\n        });\n}\nfunction wp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$rowStart, (e1)=>({\n            gridRowStart: e1\n        }));\n}\nfunction xp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$rowEnd, (e1)=>({\n            gridRowEnd: e1\n        }));\n}\nfunction kp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$column, (e1)=>\"number\" == typeof e1 ? {\n            gridColumn: \"span \".concat(e1, \" / span \").concat(e1)\n        } : {\n            gridColumn: bp[e1]\n        });\n}\nfunction Sp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$columnStart, (e1)=>({\n            gridColumnStart: e1\n        }));\n}\nfunction Pp(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$columnEnd, (e1)=>({\n            gridColumnEnd: e1\n        }));\n}\nvar Ep, Tp, Ap, Rp = Object.freeze, Cp = Object.defineProperty;\nfunction Mp(e1) {\n    const { media: t, radius: n } = Y(e1.theme);\n    return Hh(t, e1.$radius, (e1)=>{\n        let t = 0;\n        return \"number\" == typeof e1 && (t = Ih(n[e1])), \"full\" === e1 && (t = \"9999px\"), {\n            borderRadius: t\n        };\n    });\n}\nfunction Op(e1, t) {\n    return \"\".concat(e1.map(Ih).join(\" \"), \" \").concat(t);\n}\nsr(Ep || (Ep = Rp(Cp(Tp = [\n    \"\\n  &:not([hidden]) {\\n    display: flex;\\n  }\\n\\n  align-items: center;\\n\"\n], \"raw\", {\n    value: Rp(Ap || Tp.slice())\n}))));\nvar Bp, jp = Object.freeze, zp = Object.defineProperty;\nur.span(Bp || (Bp = ((e1, t)=>jp(zp(e1, \"raw\", {\n        value: jp(t || e1.slice())\n    })))([\n    \"\\n  display: block;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  overflow: clip;\\n\"\n])));\nvar Lp, Vp = Object.freeze, Dp = Object.defineProperty;\nsr(Lp || (Lp = ((e1, t)=>Vp(Dp(e1, \"raw\", {\n        value: Vp(t || e1.slice())\n    })))([\n    \"\\n  white-space: nowrap;\\n\\n  & > div {\\n    vertical-align: top;\\n\\n    &:not([hidden]) {\\n      display: inline-block;\\n    }\\n  }\\n\"\n])));\nconst _p = ur.div(function() {\n    return Qf;\n}, fp, function() {\n    return [\n        op,\n        rp,\n        ip,\n        np\n    ];\n}, function() {\n    return [\n        yp,\n        wp,\n        xp,\n        kp,\n        Sp,\n        Pp\n    ];\n}, function(e1) {\n    const { theme: t } = e1;\n    return [\n        Nh(t, [\n            \"margin\"\n        ], e1.$margin),\n        Nh(t, [\n            \"marginLeft\",\n            \"marginRight\"\n        ], e1.$marginX),\n        Nh(t, [\n            \"marginTop\",\n            \"marginBottom\"\n        ], e1.$marginY),\n        Nh(t, [\n            \"marginTop\"\n        ], e1.$marginTop),\n        Nh(t, [\n            \"marginRight\"\n        ], e1.$marginRight),\n        Nh(t, [\n            \"marginBottom\"\n        ], e1.$marginBottom),\n        Nh(t, [\n            \"marginLeft\"\n        ], e1.$marginLeft)\n    ].filter(Boolean);\n}, function(e1) {\n    const { theme: t } = e1;\n    return [\n        Nh(t, [\n            \"padding\"\n        ], e1.$padding),\n        Nh(t, [\n            \"paddingLeft\",\n            \"paddingRight\"\n        ], e1.$paddingX),\n        Nh(t, [\n            \"paddingTop\",\n            \"paddingBottom\"\n        ], e1.$paddingY),\n        Nh(t, [\n            \"paddingTop\"\n        ], e1.$paddingTop),\n        Nh(t, [\n            \"paddingRight\"\n        ], e1.$paddingRight),\n        Nh(t, [\n            \"paddingBottom\"\n        ], e1.$paddingBottom),\n        Nh(t, [\n            \"paddingLeft\"\n        ], e1.$paddingLeft)\n    ].filter(Boolean);\n}), $p = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { as: o = \"div\", column: r, columnStart: i, columnEnd: a, display: s = \"block\", flex: l, height: c, margin: u = 0, marginX: d, marginY: h, marginTop: f, marginRight: p, marginBottom: g, marginLeft: m, overflow: v, padding: b = 0, paddingX: y, paddingY: w, paddingTop: x, paddingRight: k, paddingBottom: S, paddingLeft: P, row: E, rowStart: T, rowEnd: A, sizing: R, ...C } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_p, {\n        \"data-as\": \"string\" == typeof o ? o : void 0,\n        \"data-ui\": \"Box\",\n        ...C,\n        $column: Uh(r),\n        $columnStart: Uh(i),\n        $columnEnd: Uh(a),\n        $display: Uh(s),\n        $flex: Uh(l),\n        $height: Uh(c),\n        $margin: Uh(u),\n        $marginX: Uh(d),\n        $marginY: Uh(h),\n        $marginTop: Uh(f),\n        $marginRight: Uh(p),\n        $marginBottom: Uh(g),\n        $marginLeft: Uh(m),\n        $overflow: Uh(v),\n        $padding: Uh(b),\n        $paddingX: Uh(y),\n        $paddingY: Uh(w),\n        $paddingTop: Uh(x),\n        $paddingRight: Uh(k),\n        $paddingBottom: Uh(S),\n        $paddingLeft: Uh(P),\n        $row: Uh(E),\n        $rowStart: Uh(T),\n        $rowEnd: Uh(A),\n        $sizing: Uh(R),\n        as: o,\n        ref: n,\n        children: t.children\n    });\n});\nvar Fp, Ip, Hp, Np = Object.freeze, Wp = Object.defineProperty, Up = (e1, t)=>Np(Wp(e1, \"raw\", {\n        value: Np(t || e1.slice())\n    }));\nvar Yp, Gp = Object.freeze, Xp = Object.defineProperty;\nconst qp = ur.div(function(e1) {\n    return Wh(\"text\", e1);\n}, function(e1) {\n    const { media: t } = Y(e1.theme);\n    return Hh(t, e1.$align, (e1)=>({\n            textAlign: e1\n        }));\n}, function(e1) {\n    const { $accent: t, $muted: n } = e1, { font: o } = Y(e1.theme);\n    return sr(Hp || (Hp = Up([\n        \"\\n    color: var(--card-fg-color);\\n\\n    \",\n        \"\\n\\n    \",\n        \"\\n\\n    & code {\\n      font-family: \",\n        \";\\n      border-radius: 1px;\\n      background-color: var(--card-code-bg-color);\\n      color: var(--card-code-fg-color);\\n    }\\n\\n    & a {\\n      text-decoration: none;\\n      border-radius: 1px;\\n      color: var(--card-link-color);\\n      outline: none;\\n\\n      @media (hover: hover) {\\n        &:hover {\\n          text-decoration: underline;\\n        }\\n      }\\n\\n      &:focus {\\n        box-shadow:\\n          0 0 0 1px var(--card-bg-color),\\n          0 0 0 3px var(--card-focus-ring-color);\\n      }\\n\\n      &:focus:not(:focus-visible) {\\n        box-shadow: none;\\n      }\\n    }\\n\\n    & strong {\\n      font-weight: \",\n        \";\\n    }\\n\\n    & svg {\\n      /* Certain popular CSS libraries changes the defaults for SVG display */\\n      /* Make sure SVGs are rendered as inline elements */\\n      display: inline;\\n    }\\n\\n    & [data-sanity-icon] {\\n      vertical-align: baseline;\\n      color: var(--card-icon-color);\\n\\n      & path {\\n        vector-effect: non-scaling-stroke !important;\\n      }\\n    }\\n  \"\n    ])), t && sr(Fp || (Fp = Up([\n        \"\\n      color: var(--card-accent-fg-color);\\n    \"\n    ]))), n && sr(Ip || (Ip = Up([\n        \"\\n      color: var(--card-muted-fg-color);\\n    \"\n    ]))), o.code.family, o.text.weights.bold);\n}), Kp = ur.span(Yp || (Yp = ((e1, t)=>Gp(Xp(e1, \"raw\", {\n        value: Gp(t || e1.slice())\n    })))([\n    \"\\n  display: block;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  overflow: clip;\\n\"\n]))), Zp = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { accent: o = !1, align: r, children: i, muted: a = !1, size: s = 2, textOverflow: l, weight: c, ...u } = t;\n    let d = i;\n    return \"ellipsis\" === l && (d = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Kp, {\n        children: d\n    })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(qp, {\n        \"data-ui\": \"Text\",\n        ...u,\n        $accent: o,\n        $align: Uh(r),\n        $muted: a,\n        ref: n,\n        $size: Uh(s),\n        $weight: c,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            children: d\n        })\n    });\n}), Jp = ur($p)(fp, function() {\n    return [\n        ap,\n        sp,\n        lp,\n        cp,\n        up,\n        dp\n    ];\n}), Qp = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { align: o, as: r, direction: i = \"row\", gap: a, justify: s, wrap: l, ...c } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Jp, {\n        \"data-ui\": \"Flex\",\n        ...c,\n        $align: Uh(o),\n        $direction: Uh(i),\n        $gap: Uh(a),\n        $justify: Uh(s),\n        $wrap: Uh(l),\n        forwardedAs: r,\n        ref: n\n    });\n});\nvar eg, tg, ng = Object.freeze, og = Object.defineProperty, rg = (e1, t)=>ng(og(e1, \"raw\", {\n        value: ng(t || e1.slice())\n    }));\nconst ig = dr(eg || (eg = rg([\n    \"\\n  from {\\n    transform: rotate(0deg);\\n  }\\n\\n  to {\\n    transform: rotate(360deg);\\n  }\\n\"\n]))), ag = ur(Zp)(tg || (tg = rg([\n    \"\\n  & > span > svg {\\n    animation: \",\n    \" 500ms linear infinite;\\n  }\\n\"\n])), ig), sg = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ag, {\n        \"data-ui\": \"Spinner\",\n        ...t,\n        ref: n,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(hr, {})\n    });\n});\nfunction lg(e1, t) {\n    let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n    return {\n        \"--card-backdrop-color\": e1.backdrop,\n        \"--card-focus-ring-color\": e1.focusRing,\n        \"--card-shadow-outline-color\": e1.shadow.outline,\n        \"--card-shadow-umbra-color\": e1.shadow.umbra,\n        \"--card-shadow-penumbra-color\": e1.shadow.penumbra,\n        \"--card-shadow-ambient-color\": e1.shadow.ambient,\n        \"--card-accent-fg-color\": t.accent.fg,\n        \"--card-avatar-gray-bg-color\": t.avatar.gray.bg,\n        \"--card-avatar-gray-fg-color\": t.avatar.gray.fg,\n        \"--card-avatar-blue-bg-color\": t.avatar.blue.bg,\n        \"--card-avatar-blue-fg-color\": t.avatar.blue.fg,\n        \"--card-avatar-purple-bg-color\": t.avatar.purple.bg,\n        \"--card-avatar-purple-fg-color\": t.avatar.purple.fg,\n        \"--card-avatar-magenta-bg-color\": t.avatar.magenta.bg,\n        \"--card-avatar-magenta-fg-color\": t.avatar.magenta.fg,\n        \"--card-avatar-red-bg-color\": t.avatar.red.bg,\n        \"--card-avatar-red-fg-color\": t.avatar.red.fg,\n        \"--card-avatar-orange-bg-color\": t.avatar.orange.bg,\n        \"--card-avatar-orange-fg-color\": t.avatar.orange.fg,\n        \"--card-avatar-yellow-bg-color\": t.avatar.yellow.bg,\n        \"--card-avatar-yellow-fg-color\": t.avatar.yellow.fg,\n        \"--card-avatar-green-bg-color\": t.avatar.green.bg,\n        \"--card-avatar-green-fg-color\": t.avatar.green.fg,\n        \"--card-avatar-cyan-bg-color\": t.avatar.cyan.bg,\n        \"--card-avatar-cyan-fg-color\": t.avatar.cyan.fg,\n        \"--card-bg-color\": t.bg,\n        \"--card-bg-image\": n ? \"repeating-conic-gradient(\".concat(t.bg, \" 0% 25%, \").concat(t.muted.bg, \" 0% 50%)\") : void 0,\n        \"--card-border-color\": t.border,\n        \"--card-badge-default-bg-color\": t.badge.default.bg,\n        \"--card-badge-default-dot-color\": t.badge.default.dot,\n        \"--card-badge-default-fg-color\": t.badge.default.fg,\n        \"--card-badge-default-icon-color\": t.badge.default.icon,\n        \"--card-badge-primary-bg-color\": t.badge.primary.bg,\n        \"--card-badge-primary-dot-color\": t.badge.primary.dot,\n        \"--card-badge-primary-fg-color\": t.badge.primary.fg,\n        \"--card-badge-primary-icon-color\": t.badge.primary.icon,\n        \"--card-badge-positive-bg-color\": t.badge.positive.bg,\n        \"--card-badge-positive-dot-color\": t.badge.positive.dot,\n        \"--card-badge-positive-fg-color\": t.badge.positive.fg,\n        \"--card-badge-positive-icon-color\": t.badge.positive.icon,\n        \"--card-badge-caution-bg-color\": t.badge.caution.bg,\n        \"--card-badge-caution-dot-color\": t.badge.caution.dot,\n        \"--card-badge-caution-fg-color\": t.badge.caution.fg,\n        \"--card-badge-caution-icon-color\": t.badge.caution.icon,\n        \"--card-badge-critical-bg-color\": t.badge.critical.bg,\n        \"--card-badge-critical-dot-color\": t.badge.critical.dot,\n        \"--card-badge-critical-fg-color\": t.badge.critical.fg,\n        \"--card-badge-critical-icon-color\": t.badge.critical.icon,\n        \"--card-code-bg-color\": t.code.bg,\n        \"--card-code-fg-color\": t.code.fg,\n        \"--card-fg-color\": t.fg,\n        \"--card-icon-color\": t.icon,\n        \"--card-kbd-bg-color\": t.kbd.bg,\n        \"--card-kbd-border-color\": t.kbd.border,\n        \"--card-kbd-fg-color\": t.kbd.fg,\n        \"--card-link-fg-color\": t.link.fg,\n        \"--card-muted-bg-color\": t.muted.bg,\n        \"--card-muted-fg-color\": t.muted.fg,\n        \"--card-skeleton-color-from\": t.skeleton.from,\n        \"--card-skeleton-color-to\": t.skeleton.to,\n        \"--card-bg2-color\": t.muted.bg,\n        \"--card-link-color\": t.link.fg,\n        \"--card-hairline-soft-color\": t.border,\n        \"--card-hairline-hard-color\": t.border\n    };\n}\nvar cg, ug, dg = Object.freeze, hg = Object.defineProperty, fg = (e1, t)=>dg(hg(e1, \"raw\", {\n        value: dg(t || e1.slice())\n    }));\nfunction pg() {\n    for(var e1 = arguments.length, t = new Array(e1), n = 0; n < e1; n++)t[n] = arguments[n];\n    return t.filter(Boolean).join(\",\");\n}\nvar gg, mg = Object.freeze, vg = Object.defineProperty;\nconst bg = ur.button(Mp, function(e1) {\n    const { $width: t } = e1, { style: n } = Y(e1.theme);\n    return sr(ug || (ug = fg([\n        \"\\n    \",\n        \";\\n\\n    -webkit-font-smoothing: inherit;\\n    appearance: none;\\n    display: inline-flex;\\n    align-items: center;\\n    font: inherit;\\n    border: 0;\\n    outline: none;\\n    user-select: none;\\n    text-decoration: none;\\n    border: 0;\\n    box-sizing: border-box;\\n    padding: 0;\\n    margin: 0;\\n    white-space: nowrap;\\n    text-align: left;\\n    position: relative;\\n    vertical-align: top;\\n\\n    \",\n        \"\\n\\n    & > span {\\n      display: block;\\n      flex: 1;\\n      min-width: 0;\\n      border-radius: inherit;\\n    }\\n\\n    &::-moz-focus-inner {\\n      border: 0;\\n      padding: 0;\\n    }\\n  \"\n    ])), null == n ? void 0 : n.button, \"fill\" === t && sr(cg || (cg = fg([\n        \"\\n      width: -moz-available;\\n      width: -webkit-fill-available;\\n      width: stretch;\\n    \"\n    ]))));\n}, function(e1) {\n    var t;\n    const { $mode: n } = e1, { button: o, color: r, style: i } = Y(e1.theme), a = \"ghost\" === e1.$mode, s = r.button[n] || r.button.default, l = s[e1.$tone] || s.default, c = {\n        width: o.border.width,\n        color: \"var(--card-border-color)\"\n    }, u = void 0;\n    return [\n        lg(r, l.enabled),\n        {\n            backgroundColor: \"var(--card-bg-color)\",\n            color: \"var(--card-fg-color)\",\n            boxShadow: gp(c),\n            '&:disabled, &[data-disabled=\"true\"]': lg(r, l.disabled),\n            \"&:not([data-disabled='true'])\": {\n                boxShadow: pg(gp(c), a ? u : void 0),\n                \"&:focus\": {\n                    boxShadow: mp({\n                        base: r,\n                        border: {\n                            width: 2,\n                            color: r.bg\n                        },\n                        focusRing: o.focusRing\n                    })\n                },\n                \"&:focus:not(:focus-visible)\": {\n                    boxShadow: pg(gp(c), a ? u : void 0)\n                },\n                \"@media (hover: hover)\": {\n                    \"&:hover\": lg(r, l.hovered),\n                    \"&:active\": lg(r, l.pressed),\n                    \"&[data-hovered]\": lg(r, l.hovered)\n                },\n                \"&[data-selected]\": lg(r, l.pressed)\n            }\n        },\n        null == (t = null == i ? void 0 : i.button) ? void 0 : t.root\n    ].filter(Boolean);\n}), yg = ur.div(gg || (gg = ((e1, t)=>mg(vg(e1, \"raw\", {\n        value: mg(t || e1.slice())\n    })))([\n    \"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  background-color: var(--card-bg-color);\\n  border-radius: inherit;\\n  z-index: 1;\\n  box-shadow: inherit;\\n\"\n]))), wg = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(n, o) {\n    const { children: r, disabled: a, fontSize: l = 1, icon: c, iconRight: u, justify: d = \"center\", loading: h, mode: f = \"default\", padding: p = 3, paddingX: g, paddingY: m, paddingTop: v, paddingBottom: b, paddingLeft: w, paddingRight: x, radius: k = 2, selected: P, space: E = 3, text: T, textAlign: A, tone: R = \"default\", type: C = \"button\", muted: M = !1, width: O, ...B } = n, { button: j } = If(), z = Uh(d), L = Uh(p), V = Uh(g), D = Uh(m), _ = Uh(v), $ = Uh(b), F = Uh(w), I = Uh(x), H = Uh(k), N = Uh(E), W = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            padding: L,\n            paddingX: V,\n            paddingY: D,\n            paddingTop: _,\n            paddingBottom: $,\n            paddingLeft: F,\n            paddingRight: I\n        }), [\n        L,\n        V,\n        D,\n        _,\n        $,\n        F,\n        I\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(bg, {\n        \"data-ui\": \"Button\",\n        ...B,\n        $mode: f,\n        $radius: H,\n        $tone: R,\n        \"data-disabled\": Boolean(h || a),\n        \"data-selected\": P ? \"\" : void 0,\n        disabled: Boolean(h || a),\n        ref: o,\n        type: C,\n        $width: O,\n        children: [\n            Boolean(h) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(yg, {\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(sg, {})\n            }),\n            (c || T || u) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($p, {\n                as: \"span\",\n                ...W,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Qp, {\n                    as: \"span\",\n                    justify: z,\n                    gap: N,\n                    children: [\n                        c && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Zp, {\n                            size: l,\n                            children: [\n                                /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(c) && c,\n                                (0,react_is__WEBPACK_IMPORTED_MODULE_2__.isValidElementType)(c) && /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(c)\n                            ]\n                        }),\n                        T && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Zp, {\n                            muted: M,\n                            align: A,\n                            size: l,\n                            textOverflow: \"ellipsis\",\n                            weight: j.textWeight,\n                            children: T\n                        }),\n                        u && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Zp, {\n                            size: l,\n                            children: [\n                                /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(u) && u,\n                                (0,react_is__WEBPACK_IMPORTED_MODULE_2__.isValidElementType)(u) && /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(u)\n                            ]\n                        })\n                    ]\n                })\n            }),\n            r && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($p, {\n                as: \"span\",\n                ...W,\n                children: r\n            })\n        ]\n    });\n});\nvar xg, kg, Sg, Pg = Object.freeze, Eg = Object.defineProperty, Tg = (e1, t)=>Pg(Eg(e1, \"raw\", {\n        value: Pg(t || e1.slice())\n    }));\nfunction Ag(e1) {\n    const { $checkered: t } = e1, { space: n } = Y(e1.theme);\n    return sr(kg || (kg = Tg([\n        \"\\n    \",\n        \"\\n\\n    &[data-as='button'] {\\n      -webkit-font-smoothing: inherit;\\n      appearance: none;\\n      outline: none;\\n      font: inherit;\\n      text-align: inherit;\\n      border: 0;\\n      width: -moz-available;\\n      width: -webkit-fill-available;\\n      width: stretch;\\n    }\\n\\n    /* &:is(a) */\\n    &[data-as='a'] {\\n      outline: none;\\n      text-decoration: none;\\n    }\\n\\n    /* &:is(pre) */\\n    &[data-as='pre'] {\\n      font: inherit;\\n    }\\n  \"\n    ])), t && sr(xg || (xg = Tg([\n        \"\\n      background-size: \",\n        \"px \",\n        \"px;\\n      background-position: 50% 50%;\\n      background-image: var(--card-bg-image);\\n    \"\n    ])), n[3], n[3]));\n}\nfunction Rg(e1) {\n    var t;\n    const { $checkered: n, $focusRing: o } = e1, { card: r, color: i, style: a } = Y(e1.theme), s = {\n        width: r.border.width,\n        color: \"var(--card-border-color)\"\n    };\n    return sr(Sg || (Sg = Tg([\n        \"\\n    color-scheme: \",\n        \";\\n\\n    \",\n        \"\\n\\n    background-color: var(--card-bg-color);\\n    color: var(--card-fg-color);\\n\\n    /* &:is(button) */\\n    &[data-as='button'] {\\n      --card-focus-ring-box-shadow: none;\\n\\n      cursor: default;\\n      box-shadow: var(--card-focus-ring-box-shadow);\\n\\n      &:disabled {\\n        \",\n        \"\\n      }\\n\\n      &:not(:disabled) {\\n        &[data-pressed] {\\n          \",\n        \"\\n        }\\n\\n        &[data-selected] {\\n          \",\n        \"\\n        }\\n\\n        @media (hover: hover) {\\n          &:not([data-pressed]):not([data-selected]) {\\n            &[data-hovered],\\n            &:hover {\\n              \",\n        \"\\n            }\\n\\n            &:active {\\n              \",\n        \"\\n            }\\n          }\\n        }\\n\\n        &:focus-visible {\\n          --card-focus-ring-box-shadow: \",\n        \";\\n        }\\n      }\\n    }\\n\\n    /* &:is(a) */\\n    &[data-as='a'] {\\n      cursor: pointer;\\n      box-shadow: var(--card-focus-ring-box-shadow);\\n\\n      &[data-disabled] {\\n        \",\n        \"\\n      }\\n\\n      &:not([data-disabled]) {\\n        &[data-pressed] {\\n          \",\n        \"\\n        }\\n\\n        &[data-selected] {\\n          \",\n        \"\\n        }\\n\\n        @media (hover: hover) {\\n          &:not([data-pressed]):not([data-selected]) {\\n            &[data-hovered],\\n            &:hover {\\n              \",\n        \"\\n            }\\n\\n            &:active {\\n              \",\n        \"\\n            }\\n          }\\n        }\\n\\n        &:focus-visible {\\n          --card-focus-ring-box-shadow: \",\n        \";\\n        }\\n      }\\n    }\\n\\n    \",\n        \"\\n  \"\n    ])), i._dark ? \"dark\" : \"light\", lg(i, i, n), lg(i, i.selectable.default.disabled, n), lg(i, i.selectable.default.pressed, n), lg(i, i.selectable.default.selected, n), lg(i, i.selectable.default.hovered, n), lg(i, i.selectable.default.pressed, n), o ? mp({\n        base: i,\n        border: s,\n        focusRing: r.focusRing\n    }) : void 0, lg(i, i.selectable.default.disabled, n), lg(i, i.selectable.default.pressed, n), lg(i, i.selectable.default.selected, n), lg(i, i.selectable.default.hovered, n), lg(i, i.selectable.default.pressed, n), o ? mp({\n        base: i,\n        border: s,\n        focusRing: r.focusRing\n    }) : void 0, null == (t = null == a ? void 0 : a.card) ? void 0 : t.root);\n}\nconst Cg = ur($p)(function() {\n    return [\n        Xf,\n        qf,\n        Kf,\n        Zf,\n        Jf\n    ];\n}, Mp, function(e1) {\n    const { card: t, media: n, shadow: o } = Y(e1.theme);\n    return Hh(n, e1.$shadow, (e1)=>(function(e1) {\n            if (!e1) return _h;\n            const t = \"0 0 0 \".concat(Ih(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1), \" var(--card-shadow-outline-color)\"), n = Op(e1.umbra, \"var(--card-shadow-umbra-color)\"), o = Op(e1.penumbra, \"var(--card-shadow-penumbra-color)\"), r = Op(e1.ambient, \"var(--card-shadow-ambient-color)\");\n            return {\n                boxShadow: \"\".concat(t, \", \").concat(n, \", \").concat(o, \", \").concat(r)\n            };\n        })(o[e1], t.shadow.outline));\n}, function(e1) {\n    return [\n        Ag(e1),\n        Rg(e1)\n    ];\n}), Mg = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { __unstable_checkered: o = !1, __unstable_focusRing: r = !1, as: i, border: a, borderTop: s, borderRight: l, borderBottom: c, borderLeft: u, pressed: d, radius: h = 0, scheme: f, selected: p, shadow: g, tone: m = \"default\", ...v } = t, b = (0,react_is__WEBPACK_IMPORTED_MODULE_2__.isValidElementType)(i) ? i : \"div\", y = $f(), w = \"inherit\" === m ? y.tone : m;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ff, {\n        scheme: f,\n        tone: w,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Cg, {\n            \"data-as\": \"string\" == typeof b ? b : void 0,\n            \"data-scheme\": y.scheme,\n            \"data-ui\": \"Card\",\n            \"data-tone\": w,\n            ...v,\n            $border: Uh(a),\n            $borderTop: Uh(s),\n            $borderRight: Uh(l),\n            $borderBottom: Uh(c),\n            $borderLeft: Uh(u),\n            $checkered: o,\n            $focusRing: r,\n            $radius: Uh(h),\n            $shadow: Uh(g),\n            $tone: w,\n            \"data-checkered\": o ? \"\" : void 0,\n            \"data-pressed\": d ? \"\" : void 0,\n            \"data-selected\": p ? \"\" : void 0,\n            forwardedAs: b,\n            ref: n,\n            selected: p\n        })\n    });\n}), Og = {\n    width: \"100%\",\n    margin: \"0 auto\"\n};\nconst Bg = ur($p)(function() {\n    return Og;\n}, function(e1) {\n    const { container: t, media: n } = Y(e1.theme);\n    return Hh(n, e1.$width, (e1)=>({\n            maxWidth: \"auto\" === e1 ? \"none\" : Ih(t[e1])\n        }));\n}), jg = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { as: o, width: r = 2, ...i } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Bg, {\n        \"data-ui\": \"Container\",\n        ...i,\n        $width: Uh(r),\n        forwardedAs: o,\n        ref: n\n    });\n});\nvar zg, Lg = Object.freeze, Vg = Object.defineProperty;\nur.span(zg || (zg = ((e1, t)=>Lg(Vg(e1, \"raw\", {\n        value: Lg(t || e1.slice())\n    })))([\n    \"\\n  display: block;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  overflow: clip;\\n\"\n])));\nconst Dg = ur($p)(function() {\n    return {\n        lineHeight: 0,\n        \"&&:not([hidden])\": {\n            display: \"block\"\n        },\n        \"& > div\": {\n            display: \"inline-block\",\n            verticalAlign: \"middle\"\n        }\n    };\n}, function(e1) {\n    const { media: t, space: n } = Y(e1.theme);\n    return Hh(t, e1.$space, (e1)=>{\n        const t = Ih(.5 === e1 ? n[1] / 2 : n[e1]);\n        return {\n            margin: \"-\".concat(t, \" 0 0 -\").concat(t),\n            \"& > div\": {\n                padding: \"\".concat(t, \" 0 0 \").concat(t)\n            }\n        };\n    });\n}), _g = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { as: o, children: r, space: a, ...s } = t, l = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(function(e1) {\n            return (Array.isArray(e1) ? e1 : [\n                e1\n            ]).filter((e1)=>(0,react_is__WEBPACK_IMPORTED_MODULE_2__.isElement)(e1) || (0,react_is__WEBPACK_IMPORTED_MODULE_2__.isFragment)(e1) || \"string\" == typeof e1);\n        })(r).filter(Boolean).map((t, n)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n                children: t\n            }, n)), [\n        r\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Dg, {\n        \"data-ui\": \"Inline\",\n        ...s,\n        $space: Uh(a),\n        forwardedAs: o,\n        ref: n,\n        children: l\n    });\n});\nvar $g, Fg = Object.freeze, Ig = Object.defineProperty;\nconst Hg = ur.kbd(Mp, function() {\n    return sr($g || ($g = ((e1, t)=>Fg(Ig(e1, \"raw\", {\n            value: Fg(t || e1.slice())\n        })))([\n        \"\\n    --card-bg-color: var(--card-kbd-bg-color);\\n    --card-border-color: var(--card-kbd-border-color);\\n    --card-fg-color: var(--card-kbd-fg-color);\\n\\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\\n    background: var(--card-bg-color);\\n    font: inherit;\\n\\n    vertical-align: top;\\n\\n    &:not([hidden]) {\\n      display: inline-block;\\n    }\\n  \"\n    ])));\n}), Ng = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { children: o, fontSize: r = 0, padding: i = 1, radius: a = 2, ...s } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Hg, {\n        \"data-ui\": \"KBD\",\n        ...s,\n        $radius: Uh(a),\n        ref: n,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($p, {\n            as: \"span\",\n            padding: i,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Zp, {\n                as: \"span\",\n                size: r,\n                weight: \"semibold\",\n                children: o\n            })\n        })\n    });\n}), Wg = {\n    name: \"@sanity/ui/origin\",\n    fn (e1) {\n        let { middlewareData: t, placement: n, rects: o } = e1;\n        var r, i;\n        const [a] = n.split(\"-\"), s = o.floating.width, l = o.floating.height, c = (null == (r = t.shift) ? void 0 : r.x) || 0, u = (null == (i = t.shift) ? void 0 : i.y) || 0;\n        if (s <= 0 || l <= 0) return {};\n        const d = [\n            \"bottom\",\n            \"top\"\n        ].includes(a), { originX: h, originY: f } = d ? {\n            originX: Ug(.5 - c / s, 0, 1),\n            originY: \"bottom\" === a ? 0 : 1\n        } : {\n            originX: \"left\" === a ? 1 : 0,\n            originY: Ug(.5 - u / l, 0, 1)\n        };\n        return {\n            data: {\n                originX: h,\n                originY: f\n            }\n        };\n    }\n};\nfunction Ug(e1, t, n) {\n    return Math.min(Math.max(e1, t), n);\n}\nfunction Yg(e1, t, n) {\n    const o = t.x - e1.x, r = t.y - e1.y, i = Math.sqrt(o * o + r * r);\n    return Gg(e1, t, Math.min(1, n / i));\n}\nfunction Gg(e1, t, n) {\n    return {\n        x: e1.x + (t.x - e1.x) * n,\n        y: e1.y + (t.y - e1.y) * n\n    };\n}\nvar Xg, qg, Kg, Zg = Object.freeze, Jg = Object.defineProperty, Qg = (e1, t)=>Zg(Jg(e1, \"raw\", {\n        value: Zg(t || e1.slice())\n    }));\nconst em = ur.div((e1)=>{\n    let { $w: t } = e1;\n    return sr(Xg || (Xg = Qg([\n        \"\\n    position: absolute;\\n    width: \",\n        \"px;\\n    height: \",\n        \"px;\\n\\n    :empty + & {\\n      display: none;\\n    }\\n\\n    & > svg {\\n      display: block;\\n      line-height: 0;\\n      transform-origin: \",\n        \"px \",\n        \"px;\\n    }\\n\\n    [data-placement^='top'] > & {\\n      bottom: -\",\n        \"px;\\n\\n      & > svg {\\n        transform: rotate(0);\\n      }\\n    }\\n\\n    [data-placement^='right'] > & {\\n      left: -\",\n        \"px;\\n\\n      & > svg {\\n        transform: rotate(90deg);\\n      }\\n    }\\n\\n    [data-placement^='left'] > & {\\n      right: -\",\n        \"px;\\n\\n      & > svg {\\n        transform: rotate(-90deg);\\n      }\\n    }\\n\\n    [data-placement^='bottom'] > & {\\n      top: -\",\n        \"px;\\n\\n      & > svg {\\n        transform: rotate(180deg);\\n      }\\n    }\\n  \"\n    ])), t, t, t / 2, t / 2, t, t, t, t);\n}), tm = ur.path(qg || (qg = Qg([\n    \"\\n  stroke: var(--card-shadow-outline-color);\\n\"\n]))), nm = ur.path(Kg || (Kg = Qg([\n    \"\\n  fill: var(--card-bg-color);\\n\"\n]))), om = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(n, o) {\n    const { width: r, height: i, radius: a = 0, ...s } = n, { card: l } = If(), c = l.shadow.outline, u = function(e1) {\n        const t = e1.length, n = [];\n        for(let o = 0; o < t; o += 1){\n            const t = e1[o], r = e1[o - 1], i = e1[o + 1];\n            if (r && t.radius) {\n                const e1 = Yg(t, r, t.radius), o = Yg(t, i, t.radius), a = Gg(e1, t, .5), s = Gg(t, o, .5);\n                n.push({\n                    type: \"point\",\n                    ...e1\n                }), n.push({\n                    type: \"curve\",\n                    curveEnd: o,\n                    startControl: a,\n                    endControl: s\n                });\n            } else n.push({\n                type: \"point\",\n                ...t\n            });\n        }\n        return n;\n    }([\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: a,\n            y: 0,\n            radius: a\n        },\n        {\n            x: r / 2,\n            y: i - 1,\n            radius: a\n        },\n        {\n            x: r - a,\n            y: 0,\n            radius: a\n        },\n        {\n            x: r,\n            y: 0\n        }\n    ]), d = function(e1) {\n        return e1.map((e1, t)=>\"point\" === e1.type ? \"\".concat(0 === t ? \"M\" : \"L\", \" \").concat(e1.x, \" \").concat(e1.y) : \"curve\" === e1.type ? \"C \".concat(e1.startControl.x, \" \").concat(e1.startControl.y, \" \").concat(e1.endControl.x, \" \").concat(e1.endControl.y, \" \").concat(e1.curveEnd.x, \" \").concat(e1.curveEnd.y) : \"\").join(\" \");\n    }(u), h = \"\".concat(d), f = \"\".concat(d, \" M \").concat(r, \" -1 M 0 -1 Z\");\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(em, {\n        ...s,\n        $w: r,\n        ref: o,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n            width: r,\n            height: r,\n            viewBox: \"0 0 \".concat(r, \" \").concat(r),\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"mask\", {\n                    id: \"stroke-mask\",\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"rect\", {\n                        x: 0,\n                        y: c,\n                        width: r,\n                        height: r,\n                        fill: \"white\"\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tm, {\n                    d: h,\n                    mask: \"url(#stroke-mask)\",\n                    strokeWidth: 2 * c\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(nm, {\n                    d: f\n                })\n            ]\n        })\n    });\n}), rm = Symbol.for(\"@sanity/ui/context/boundaryElement\");\nLf[rm] = Lf[rm] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst im = Lf[rm];\nfunction am(e1) {\n    return Boolean(e1 && \"object\" == typeof e1 && !Array.isArray(e1));\n}\nconst sm = {\n    version: 0,\n    element: null\n};\nfunction lm(e1) {\n    let { children: t, condition: n, wrapper: o } = e1;\n    return n ? o(t) : t;\n}\nfunction cm(e1) {\n    if (!am(e1) || 0 !== e1.version) throw new Error(\"the context value is not compatible\");\n    if (!e1) throw new Error(\"components using `useLayer()` should be wrapped in a <LayerProvider>.\");\n    if (0 === e1.version) return e1;\n    throw new Error(\"could not get layer context\");\n}\nconst um = Symbol.for(\"@sanity/ui/context/layer\");\nLf[um] = Lf[um] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst dm = Lf[um];\nfunction hm() {\n    const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(dm);\n    if (!e1) throw new Error(\"useLayer(): missing context value\");\n    try {\n        return cm(e1);\n    } catch (e1) {\n        throw e1 instanceof Error ? new Error(\"useLayer(): \".concat(e1.message)) : new Error(\"useLayer(): \".concat(e1));\n    }\n}\nfunction fm(e1) {\n    return e1 instanceof Node && e1.nodeType === Node.ELEMENT_NODE;\n}\nfunction pm(t) {\n    var n;\n    const { children: o, zOffset: r = 0 } = t, s = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(dm), l = s && cm(s), c = null == l ? void 0 : l.registerChild, d = (null != (n = null == l ? void 0 : l.level) ? n : 0) + 1, h = Uh(r), f = h.length - 1, g = Math.min(Uf(), f), v = l ? l.zIndex + h[g] : h[g], [, b] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({}), [y, w] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0), x = 0 === y, k = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        const t = null == c ? void 0 : c(e1);\n        return void 0 !== e1 ? b((t)=>{\n            var n;\n            const o = null != (n = t[e1]) ? n : 0, r = {\n                ...t,\n                [e1]: o + 1\n            };\n            return w(Object.keys(r).length), r;\n        }) : w((e1)=>e1 + 1), ()=>{\n            void 0 !== e1 ? b((t)=>{\n                const n = {\n                    ...t\n                };\n                return 1 === n[e1] ? (delete n[e1], w(Object.keys(n).length)) : n[e1] -= 1, n;\n            }) : w((e1)=>e1 - 1), null == t || t();\n        };\n    }, [\n        c\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>null == c ? void 0 : c(d), [\n        d,\n        c\n    ]);\n    const S = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            version: 0,\n            isTopLayer: x,\n            level: d,\n            registerChild: k,\n            size: y,\n            zIndex: v\n        }), [\n        x,\n        d,\n        k,\n        y,\n        v\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(dm.Provider, {\n        value: S,\n        children: o\n    });\n}\nconst gm = ur.div({\n    position: \"relative\"\n}), mm = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { children: o, onActivate: r, onFocus: i, style: a = _h, ...s } = t, { zIndex: l, isTopLayer: c } = hm(), d = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), f = Gf(n), g = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(c);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        g.current !== c && c && (null == r || r({\n            activeElement: d.current\n        })), g.current = c;\n    }, [\n        c,\n        r\n    ]);\n    const m = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        null == i || i(e1);\n        const t = f.current, n = document.activeElement;\n        c && t && n && fm(n) && function(e1, t) {\n            return e1.contains(t) || e1 === t;\n        }(t, n) && (d.current = n);\n    }, [\n        f,\n        c,\n        i\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(gm, {\n        ...s,\n        \"data-ui\": \"Layer\",\n        onFocus: m,\n        ref: f,\n        style: {\n            ...a,\n            zIndex: l\n        },\n        children: o\n    });\n}), vm = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { children: o, zOffset: r = 1, ...i } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(pm, {\n        zOffset: r,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(mm, {\n            ...i,\n            ref: n,\n            children: o\n        })\n    });\n}), bm = Symbol.for(\"@sanity/ui/context/portal\"), ym = Symbol.for(\"@sanity/ui/context/portal/element\");\nLf[ym] = null;\nconst wm = {\n    version: 0,\n    boundaryElement: null,\n    get element () {\n        return \"undefined\" == typeof document ? null : (Lf[ym] || (Lf[ym] = document.createElement(\"div\"), Lf[ym].setAttribute(\"data-portal\", \"\"), document.body.appendChild(Lf[ym])), Lf[ym]);\n    }\n};\nLf[bm] = Lf[bm] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(wm);\nconst xm = Lf[bm];\nfunction km(e1) {\n    var t;\n    const { children: n, __unstable_name: o } = e1, r = function() {\n        const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(xm);\n        if (!e1) throw new Error(\"usePortal(): missing context value\");\n        if (!am(e1) || 0 !== e1.version) throw new Error(\"usePortal(): the context value is not compatible\");\n        return e1;\n    }(), i = (o ? r.elements && r.elements[o] : r.element) || (null == (t = r.elements) ? void 0 : t.default);\n    return i ? /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal)(n, i) : null;\n}\nvar Sm, Pm = Object.freeze, Em = Object.defineProperty;\nur.div(Sm || (Sm = ((e1, t)=>Pm(Em(e1, \"raw\", {\n        value: Pm(t || e1.slice())\n    })))([\n    \"\\n  display: block;\\n  width: 0;\\n  height: 0;\\n  position: absolute;\\n  overflow: hidden;\\n  overflow: clip;\\n\"\n])));\nvar Tm, Am, Rm = Object.freeze, Cm = Object.defineProperty, Mm = (e1, t)=>Rm(Cm(e1, \"raw\", {\n        value: Rm(t || e1.slice())\n    }));\nur.div(Tm || (Tm = Mm([\n    \"\\n  position: relative;\\n\"\n]))), ur.div(Am || (Am = Mm([\n    \"\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n\"\n])));\nconst Om = [\n    0,\n    0,\n    0,\n    0\n], Bm = {\n    top: [\n        \"bottom\",\n        \"left\",\n        \"right\"\n    ],\n    \"top-start\": [\n        \"bottom-start\",\n        \"left-start\",\n        \"right-start\"\n    ],\n    \"top-end\": [\n        \"bottom-end\",\n        \"left-end\",\n        \"right-end\"\n    ],\n    bottom: [\n        \"top\",\n        \"left\",\n        \"right\"\n    ],\n    \"bottom-start\": [\n        \"top-start\",\n        \"left-start\",\n        \"right-start\"\n    ],\n    \"bottom-end\": [\n        \"top-end\",\n        \"left-end\",\n        \"right-end\"\n    ],\n    left: [\n        \"right\",\n        \"top\",\n        \"bottom\"\n    ],\n    \"left-start\": [\n        \"right-start\",\n        \"top-start\",\n        \"bottom-start\"\n    ],\n    \"left-end\": [\n        \"right-end\",\n        \"top-end\",\n        \"bottom-end\"\n    ],\n    right: [\n        \"left\",\n        \"top\",\n        \"bottom\"\n    ],\n    \"right-start\": [\n        \"left-start\",\n        \"top-start\",\n        \"bottom-start\"\n    ],\n    \"right-end\": [\n        \"left-end\",\n        \"top-end\",\n        \"bottom-end\"\n    ]\n};\nvar jm, zm = Object.freeze, Lm = Object.defineProperty;\nconst Vm = ur(Rh(Mg))(jm || (jm = ((e1, t)=>zm(Lm(e1, \"raw\", {\n        value: zm(t || e1.slice())\n    })))([\n    \"\\n  &:not([hidden]) {\\n    display: flex;\\n  }\\n  flex-direction: column;\\n  width: max-content;\\n  min-width: min-content;\\n  & > * {\\n    opacity: var(\",\n    \", 1);\\n    will-change: opacity;\\n  }\\n\"\n])), $h), Dm = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(n, o) {\n    const { __unstable_margins: r, animate: a, arrow: s, arrowRef: l, arrowX: c, arrowY: u, children: d, padding: h, placement: f, originX: p, originY: g, overflow: m, radius: v, scheme: b, shadow: y, strategy: w, style: x, tone: k, width: S, x: P, y: E, ...T } = n, { zIndex: A } = hm(), R = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>r || Om, [\n        r\n    ]), C = (null != P ? P : 0) + R[3], M = (null != E ? E : 0) + R[0], O = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            left: C,\n            originX: p,\n            originY: g,\n            position: w,\n            top: M,\n            width: S,\n            zIndex: A,\n            willChange: a ? \"transform\" : void 0,\n            ...x\n        }), [\n        a,\n        p,\n        g,\n        w,\n        x,\n        S,\n        C,\n        M,\n        A\n    ]), B = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            left: null !== c ? c : void 0,\n            top: null !== u ? u : void 0,\n            right: void 0,\n            bottom: void 0\n        }), [\n        c,\n        u\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(Vm, {\n        \"data-ui\": \"Popover\",\n        ...T,\n        \"data-placement\": f,\n        radius: v,\n        ref: o,\n        scheme: b,\n        shadow: y,\n        sizing: \"border\",\n        style: O,\n        tone: k,\n        ...a ? Fh : {},\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Qp, {\n                \"data-ui\": \"Popover__wrapper\",\n                direction: \"column\",\n                flex: 1,\n                overflow: m,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Qp, {\n                    direction: \"column\",\n                    flex: 1,\n                    padding: h,\n                    children: d\n                })\n            }),\n            s && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(om, {\n                ref: l,\n                style: B,\n                width: 19,\n                height: 8,\n                radius: 2\n            })\n        ]\n    });\n}));\nDm.displayName = \"PopoverCard\";\nconst _m = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(r, s) {\n    var l, c, d, f, g, b, y, w, x, k;\n    const { container: S, layer: P } = If(), E = function() {\n        const e1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(im);\n        if (e1 && (!am(e1) || 0 !== e1.version)) throw new Error(\"useBoundaryElement(): the context value is not compatible\");\n        return e1 || sm;\n    }(), { __unstable_margins: A = Om, animate: R = !1, arrow: C = !1, boundaryElement: M = E.element, children: O, constrainSize: B = !1, content: j, disabled: z, fallbackPlacements: L = null != (c = r.fallbackPlacements) ? c : Bm[null != (l = r.placement) ? l : \"bottom\"], matchReferenceWidth: V, floatingBoundary: D = null != (d = r.boundaryElement) ? d : E.element, onActivate: _, open: $, overflow: F = \"hidden\", padding: I, placement: H = \"bottom\", portal: N, preventOverflow: W = !0, radius: U = 3, referenceBoundary: Y = null != (f = r.boundaryElement) ? f : E.element, referenceElement: G, scheme: X, shadow: q = 3, tone: K = \"inherit\", width: Z = \"auto\", zOffset: J = P.popover.zOffset, updateRef: Q, ...ee } = r, te = null == (g = function(e1) {\n        const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n            if (e1) return zf.subscribe(e1, n);\n        }, [\n            e1\n        ]), t;\n    }(M)) ? void 0 : g.border, ne = Uh(I), oe = Uh(U), re = Uh(q), ie = Uh(Z), ae = Uh(J), se = Gf(s), le = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), ce = \"viewport\", ue = Uf(), de = B || W ? null == te ? void 0 : te.width : void 0, he = function(e1) {\n        const { container: t, mediaIndex: n, width: o } = e1, r = o[n], i = void 0 === r ? o[o.length - 1] : r;\n        return \"number\" == typeof i ? t[i] : void 0;\n    }({\n        container: S,\n        mediaIndex: ue,\n        width: ie\n    }), fe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(he);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fe.current = he;\n    }, [\n        he\n    ]);\n    const pe = function(e1) {\n        const { boundaryWidth: t, currentWidth: n } = e1;\n        if (void 0 !== n || void 0 !== t) return Math.min(null != n ? n : 1 / 0, (t || 1 / 0) - 8);\n    }({\n        boundaryWidth: de,\n        currentWidth: he\n    }), ge = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(pe);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        ge.current = pe;\n    }, [\n        pe\n    ]);\n    const me = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const e1 = se.current;\n        if (!$ || !e1) return;\n        const t = me.current;\n        V ? void 0 !== t && (e1.style.width = \"\".concat(t, \"px\")) : void 0 !== he && (e1.style.width = \"\".concat(he, \"px\")), \"number\" == typeof pe && (e1.style.maxWidth = \"\".concat(pe, \"px\"));\n    }, [\n        he,\n        se,\n        V,\n        pe,\n        $\n    ]);\n    const ve = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const e1 = [];\n        var t;\n        return (B || W) && e1.push(yi({\n            boundary: D || void 0,\n            fallbackPlacements: L,\n            padding: 4,\n            rootBoundary: ce\n        })), e1.push(Dr({\n            mainAxis: 4\n        })), (B || V) && e1.push(function(e1) {\n            const { apply: t, margins: n, padding: o = 0 } = e1;\n            return {\n                name: \"@sanity/ui/size\",\n                async fn (r) {\n                    const { elements: i, placement: a, platform: s, rects: l } = r, { floating: c, reference: u } = l, d = await zr(r, {\n                        altBoundary: !0,\n                        boundary: e1.boundaryElement || void 0,\n                        elementContext: \"floating\",\n                        padding: o,\n                        rootBoundary: \"viewport\"\n                    });\n                    let h = 1 / 0, f = 1 / 0;\n                    const p = c.width, g = c.height;\n                    a.includes(\"top\") && (h = p - (d.left + d.right), f = g - d.top), a.includes(\"right\") && (h = p - d.right, f = g - (d.top + d.bottom)), a.includes(\"bottom\") && (h = p - (d.left + d.right), f = g - d.bottom), a.includes(\"left\") && (h = p - d.left, f = g - (d.top + d.bottom)), t({\n                        availableWidth: h - n[1] - n[3],\n                        availableHeight: f - n[0] - n[2],\n                        elements: i,\n                        referenceWidth: u.width - n[1] - n[3]\n                    });\n                    const m = await s.getDimensions(i.floating), v = m.height;\n                    return p !== m.width || g !== v ? {\n                        reset: {\n                            rects: !0\n                        }\n                    } : {};\n                }\n            };\n        }({\n            apply (e1) {\n                let { availableWidth: t, availableHeight: n, elements: o, referenceWidth: r } = e1;\n                me.current = r;\n                const i = fe.current, a = ge.current;\n                V ? o.floating.style.width = \"\".concat(r, \"px\") : void 0 !== i && (o.floating.style.width = \"\".concat(i, \"px\")), B && (o.floating.style.maxWidth = \"\".concat(Math.min(t, null != a ? a : 1 / 0), \"px\"), o.floating.style.maxHeight = \"\".concat(n, \"px\"));\n            },\n            boundaryElement: D || void 0,\n            constrainSize: B,\n            margins: A,\n            matchReferenceWidth: V,\n            padding: 4\n        })), W && e1.push(bi({\n            boundary: D || void 0,\n            rootBoundary: ce,\n            padding: 4\n        })), C && e1.push({\n            name: \"arrow\",\n            options: t = {\n                element: le,\n                padding: 4\n            },\n            fn (e1) {\n                const { element: n, padding: o } = \"function\" == typeof t ? t(e1) : t;\n                return n && (r = n, ({}).hasOwnProperty.call(r, \"current\")) ? null != n.current ? xi({\n                    element: n.current,\n                    padding: o\n                }).fn(e1) : {} : n ? xi({\n                    element: n,\n                    padding: o\n                }).fn(e1) : {};\n                var r;\n            }\n        }), R && e1.push(Wg), e1.push(wi({\n            boundary: Y || void 0,\n            padding: 4,\n            strategy: \"referenceHidden\"\n        })), e1;\n    }, [\n        R,\n        C,\n        B,\n        L,\n        D,\n        A,\n        V,\n        W,\n        Y\n    ]), { x: be, y: ye, middlewareData: we, placement: xe, refs: ke, strategy: Se, update: Pe } = function(e1) {\n        void 0 === e1 && (e1 = {});\n        const { placement: t = \"bottom\", strategy: n = \"absolute\", middleware: r = [], platform: i, elements: { reference: a, floating: s } = {}, transform: l = !0, whileElementsMounted: c, open: u } = e1, [d, h] = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n            x: 0,\n            y: 0,\n            strategy: n,\n            placement: t,\n            middlewareData: {},\n            isPositioned: !1\n        }), [f, p] = react__WEBPACK_IMPORTED_MODULE_1__.useState(r);\n        Pi(f, r) || p(r);\n        const [g, m] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), [v, b] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), y = react__WEBPACK_IMPORTED_MODULE_1__.useCallback((e1)=>{\n            e1 !== S.current && (S.current = e1, m(e1));\n        }, []), w = react__WEBPACK_IMPORTED_MODULE_1__.useCallback((e1)=>{\n            e1 !== P.current && (P.current = e1, b(e1));\n        }, []), x = a || g, k = s || v, S = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null), P = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null), E = react__WEBPACK_IMPORTED_MODULE_1__.useRef(d), A = null != c, R = Ai(c), C = Ai(i), M = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(()=>{\n            if (!S.current || !P.current) return;\n            const e1 = {\n                placement: t,\n                strategy: n,\n                middleware: f\n            };\n            C.current && (e1.platform = C.current), ki(S.current, P.current, e1).then((e1)=>{\n                const t = {\n                    ...e1,\n                    isPositioned: !0\n                };\n                O.current && !Pi(E.current, t) && (E.current = t, react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync(()=>{\n                    h(t);\n                }));\n            });\n        }, [\n            f,\n            t,\n            n,\n            C\n        ]);\n        Si(()=>{\n            !1 === u && E.current.isPositioned && (E.current.isPositioned = !1, h((e1)=>({\n                    ...e1,\n                    isPositioned: !1\n                })));\n        }, [\n            u\n        ]);\n        const O = react__WEBPACK_IMPORTED_MODULE_1__.useRef(!1);\n        Si(()=>(O.current = !0, ()=>{\n                O.current = !1;\n            }), []), Si(()=>{\n            if (x && (S.current = x), k && (P.current = k), x && k) {\n                if (R.current) return R.current(x, k, M);\n                M();\n            }\n        }, [\n            x,\n            k,\n            M,\n            R,\n            A\n        ]);\n        const B = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n                reference: S,\n                floating: P,\n                setReference: y,\n                setFloating: w\n            }), [\n            y,\n            w\n        ]), j = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n                reference: x,\n                floating: k\n            }), [\n            x,\n            k\n        ]), z = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>{\n            const e1 = {\n                position: n,\n                left: 0,\n                top: 0\n            };\n            if (!j.floating) return e1;\n            const t = Ti(j.floating, d.x), o = Ti(j.floating, d.y);\n            return l ? {\n                ...e1,\n                transform: \"translate(\" + t + \"px, \" + o + \"px)\",\n                ...Ei(j.floating) >= 1.5 && {\n                    willChange: \"transform\"\n                }\n            } : {\n                position: n,\n                left: t,\n                top: o\n            };\n        }, [\n            n,\n            l,\n            j.floating,\n            d.x,\n            d.y\n        ]);\n        return react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n                ...d,\n                update: M,\n                refs: B,\n                elements: j,\n                floatingStyles: z\n            }), [\n            d,\n            M,\n            B,\n            j,\n            z\n        ]);\n    }({\n        middleware: ve,\n        placement: H,\n        whileElementsMounted: vi\n    }), Ee = null == (b = we.hide) ? void 0 : b.referenceHidden, Te = null == (y = we.arrow) ? void 0 : y.x, Ae = null == (w = we.arrow) ? void 0 : w.y, Re = null == (x = we[\"@sanity/ui/origin\"]) ? void 0 : x.originX, Ce = null == (k = we[\"@sanity/ui/origin\"]) ? void 0 : k.originY, Me = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        le.current = e1;\n    }, []), Oe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        se.current = e1, ke.setFloating(e1);\n    }, [\n        se,\n        ke\n    ]), Be = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        ke.setReference(e1);\n        const t = null == O ? void 0 : O.ref;\n        \"function\" == typeof t ? t(e1) : t && (t.current = e1);\n    }, [\n        O,\n        ke\n    ]), je = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>!O || G ? null : /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(O, {\n            ref: Be\n        }), [\n        O,\n        G,\n        Be\n    ]);\n    if ((0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        Q && (\"function\" == typeof Q ? Q(Pe) : Q && (Q.current = Pe));\n    }, [\n        Pe,\n        Q\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        je || ke.setReference(G || null);\n    }, [\n        G,\n        ke,\n        je\n    ]), z) return O || (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {});\n    const ze = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(pm, {\n        zOffset: ae,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Dm, {\n            ...ee,\n            __unstable_margins: A,\n            animate: R,\n            arrow: C,\n            arrowRef: Me,\n            arrowX: Te,\n            arrowY: Ae,\n            hidden: Ee,\n            overflow: F,\n            padding: ne,\n            placement: xe,\n            radius: oe,\n            ref: Oe,\n            scheme: X,\n            shadow: re,\n            originX: Re,\n            originY: Ce,\n            strategy: Se,\n            tone: K,\n            width: V ? me.current : he,\n            x: be,\n            y: ye,\n            children: j\n        })\n    });\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(lm, {\n                condition: R,\n                wrapper: (t)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Lh, {\n                        children: t\n                    }),\n                children: $ && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(lm, {\n                    condition: !!N,\n                    wrapper: (t)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(km, {\n                            __unstable_name: \"string\" == typeof N ? N : void 0,\n                            children: t\n                        }),\n                    children: ze\n                })\n            }),\n            je\n        ]\n    });\n}));\n_m.displayName = \"Popover\";\nconst $m = {\n    \"&&:not([hidden])\": {\n        display: \"grid\"\n    },\n    '&[data-as=\"ul\"],&[data-as=\"ol\"]': {\n        listStyle: \"none\"\n    },\n    gridTemplateColumns: \"minmax(0, 1fr)\",\n    gridAutoRows: \"min-content\"\n};\nconst Fm = ur($p)(function() {\n    return $m;\n}, function(e1) {\n    const { media: t, space: n } = Y(e1.theme);\n    return Hh(t, e1.$space, (e1)=>({\n            gridGap: Ih(n[e1])\n        }));\n}), Im = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { as: o, space: r, ...i } = t;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Fm, {\n        \"data-as\": \"string\" == typeof o ? o : void 0,\n        \"data-ui\": \"Stack\",\n        ...i,\n        $space: Uh(r),\n        forwardedAs: o,\n        ref: n\n    });\n});\nvar Hm, Nm = Object.freeze, Wm = Object.defineProperty;\nur.span(Hm || (Hm = ((e1, t)=>Nm(Wm(e1, \"raw\", {\n        value: Nm(t || e1.slice())\n    })))([\n    \"\\n  flex: 1;\\n  min-width: 0;\\n  display: block;\\n  position: relative;\\n\"\n])));\nvar Um, Ym, Gm, Xm, qm, Km, Zm = Object.freeze, Jm = Object.defineProperty, Qm = (e1, t)=>Zm(Jm(e1, \"raw\", {\n        value: Zm(t || e1.slice())\n    }));\nur.span(Um || (Um = Qm([\n    \"\\n  flex: 1;\\n  min-width: 0;\\n  display: block;\\n  position: relative;\\n\"\n]))), ur(Mg).attrs({\n    forwardedAs: \"span\"\n})(Ym || (Ym = Qm([\n    \"\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n\\n  & > span {\\n    display: block;\\n    margin: -1px;\\n  }\\n\"\n]))), ur(Mg).attrs({\n    forwardedAs: \"span\"\n})(Gm || (Gm = Qm([\n    \"\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n\\n  & > span {\\n    display: block;\\n    margin: -1px;\\n  }\\n\"\n]))), ur($p)(Xm || (Xm = Qm([\n    \"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n\"\n]))), ur($p)(qm || (qm = Qm([\n    \"\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n\"\n]))), ur(Mg)(Km || (Km = Qm([\n    \"\\n  background-color: transparent;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n\"\n])));\nvar ev, tv = Object.freeze, nv = Object.defineProperty;\nconst ov = ur(Rh(Mg))(ev || (ev = ((e1, t)=>tv(nv(e1, \"raw\", {\n        value: tv(t || e1.slice())\n    })))([\n    \"\\n  & > * {\\n    opacity: var(\",\n    \", 1);\\n    will-change: opacity;\\n  }\\n\"\n])), $h), rv = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(n, o) {\n    const { animate: r, arrow: a, arrowRef: s, arrowX: l, arrowY: c, children: u, originX: d, originY: h, padding: f, placement: p, radius: g, scheme: m, shadow: v, style: b, ...y } = n, w = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            originX: d,\n            originY: h,\n            willChange: r ? \"transform\" : void 0,\n            ...b\n        }), [\n        r,\n        d,\n        h,\n        b\n    ]), x = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            left: null !== l ? l : void 0,\n            top: null !== c ? c : void 0,\n            right: void 0,\n            bottom: void 0\n        }), [\n        l,\n        c\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(ov, {\n        \"data-ui\": \"Tooltip__card\",\n        ...y,\n        \"data-placement\": p,\n        padding: f,\n        radius: g,\n        ref: o,\n        scheme: m,\n        shadow: v,\n        style: w,\n        ...r ? Fh : {},\n        children: [\n            u,\n            a && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(om, {\n                ref: s,\n                style: x,\n                width: 15,\n                height: 6,\n                radius: 2\n            })\n        ]\n    });\n}));\nrv.displayName = \"TooltipCard\";\nconst iv = Symbol.for(\"@sanity/ui/context/tooltipDelayGroup\");\nLf[iv] = Lf[iv] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nvar av, sv = Object.freeze, lv = Object.defineProperty;\nur(vm)(av || (av = ((e1, t)=>sv(lv(e1, \"raw\", {\n        value: sv(t || e1.slice())\n    })))([\n    \"\\n  pointer-events: none;\\n  max-width: \",\n    \"px;\\n\"\n])), (e1)=>{\n    let { $maxWidth: t } = e1;\n    return t;\n});\nvar cv, uv, dv, hv, fv = Object.freeze, pv = Object.defineProperty, gv = (e1, t)=>fv(pv(e1, \"raw\", {\n        value: fv(t || e1.slice())\n    }));\nur.div(cv || (cv = gv([\n    \"\\n  line-height: 0;\\n\"\n]))), ur($p)(uv || (uv = gv([\n    \"\\n  & > ul {\\n    list-style: none;\\n    padding: 0;\\n    margin: 0;\\n  }\\n\"\n])));\nconst mv = dr(dv || (dv = gv([\n    \"\\n  from {\\n    transform: rotate(0deg);\\n  }\\n\\n  to {\\n    transform: rotate(360deg);\\n  }\\n\"\n])));\nur(hr)(hv || (hv = gv([\n    \"\\n  animation: \",\n    \" 500ms linear infinite;\\n\"\n])), mv);\nvar vv, bv, yv = Object.freeze, wv = Object.defineProperty, xv = (e1, t)=>yv(wv(e1, \"raw\", {\n        value: yv(t || e1.slice())\n    }));\nur.ol(vv || (vv = xv([\n    \"\\n  margin: 0;\\n  padding: 0;\\n  display: flex;\\n  list-style: none;\\n  align-items: center;\\n  white-space: nowrap;\\n  line-height: 0;\\n\"\n]))), ur(wg)(bv || (bv = xv([\n    \"\\n  appearance: none;\\n  margin: -4px;\\n\"\n])));\nconst kv = Symbol.for(\"@sanity/ui/context/dialog\");\nLf[kv] = Lf[kv] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    version: 0\n});\nvar Sv, Pv, Ev, Tv, Av, Rv, Cv = Object.freeze, Mv = Object.defineProperty, Ov = (e1, t)=>Cv(Mv(e1, \"raw\", {\n        value: Cv(t || e1.slice())\n    }));\nur(jg)(Sv || (Sv = Ov([\n    \"\\n  &:not([hidden]) {\\n    display: flex;\\n  }\\n  width: 100%;\\n  height: 100%;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n\"\n]))), ur(Mg)(Pv || (Pv = Ov([\n    \"\\n  &:not([hidden]) {\\n    display: flex;\\n  }\\n  width: 100%;\\n  min-height: 0;\\n  max-height: 100%;\\n  overflow: hidden;\\n  overflow: clip;\\n\"\n]))), ur(Qp)(Ev || (Ev = Ov([\n    \"\\n  flex: 1;\\n  min-height: 0;\\n  width: 100%;\\n\"\n]))), ur($p)(Tv || (Tv = Ov([\n    \"\\n  position: relative;\\n  z-index: 2;\\n\"\n]))), ur($p)(Av || (Av = Ov([\n    \"\\n  position: relative;\\n  z-index: 1;\\n  overflow: auto;\\n  outline: none;\\n\"\n]))), ur($p)(Rv || (Rv = Ov([\n    \"\\n  position: relative;\\n  z-index: 3;\\n\"\n])));\nvar Bv, jv, zv = Object.freeze, Lv = Object.defineProperty, Vv = (e1, t)=>zv(Lv(e1, \"raw\", {\n        value: zv(t || e1.slice())\n    }));\nur.kbd(Bv || (Bv = Vv([\n    \"\\n  font: inherit;\\n  padding: 1px;\\n\\n  &:not([hidden]) {\\n    display: block;\\n  }\\n\"\n]))), ur(Ng)(jv || (jv = Vv([\n    \"\\n  &:not([hidden]) {\\n    display: block;\\n  }\\n\"\n])));\nconst Dv = Symbol.for(\"@sanity/ui/context/menu\");\nLf[Dv] = Lf[Dv] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nvar _v, $v = Object.freeze, Fv = Object.defineProperty;\nur($p)(_v || (_v = ((e1, t)=>$v(Fv(e1, \"raw\", {\n        value: $v(t || e1.slice())\n    })))([\n    \"\\n  outline: none;\\n  overflow: auto;\\n\"\n])));\nvar Iv, Hv = Object.freeze, Nv = Object.defineProperty;\nur.hr(Iv || (Iv = ((e1, t)=>Hv(Nv(e1, \"raw\", {\n        value: Hv(t || e1.slice())\n    })))([\n    \"\\n  height: 1px;\\n  border: 0;\\n  background: var(--card-hairline-soft-color);\\n  margin: 0;\\n\"\n])));\nvar Wv, Uv, Yv, Gv, Xv = Object.freeze, qv = Object.defineProperty, Kv = (e1, t)=>Xv(qv(e1, \"raw\", {\n        value: Xv(t || e1.slice())\n    }));\nconst Zv = dr(Wv || (Wv = Kv([\n    \"\\n  0% {\\n    background-position: 100%;\\n  }\\n  100% {\\n    background-position: -100%;\\n  }\\n\"\n]))), Jv = sr(Uv || (Uv = Kv([\n    \"\\n  background-image: linear-gradient(\\n    to right,\\n    var(--card-skeleton-color-from),\\n    var(--card-skeleton-color-to),\\n    var(--card-skeleton-color-from),\\n    var(--card-skeleton-color-from),\\n    var(--card-skeleton-color-from)\\n  );\\n  background-position: 100%;\\n  background-size: 200% 100%;\\n  background-attachment: fixed;\\n  animation-name: \",\n    \";\\n  animation-timing-function: ease-in-out;\\n  animation-iteration-count: infinite;\\n  animation-duration: 2000ms;\\n\"\n])), Zv);\nsr(Gv || (Gv = Kv([\n    \"\\n  opacity: \",\n    \";\\n  transition: opacity 200ms ease-in;\\n\\n  @media screen and (prefers-reduced-motion: no-preference) {\\n    \",\n    \"\\n  }\\n\\n  @media screen and (prefers-reduced-motion: reduce) {\\n    background-color: var(--card-skeleton-color-from);\\n  }\\n\"\n])), (e1)=>{\n    let { $visible: t } = e1;\n    return t ? 1 : 0;\n}, (e1)=>{\n    let { $animated: t } = e1;\n    return t ? Jv : sr(Yv || (Yv = Kv([\n        \"\\n            background-color: var(--card-skeleton-color-from);\\n          \"\n    ])));\n});\nvar Qv, eb = Object.freeze, tb = Object.defineProperty;\nur(wg)(Qv || (Qv = ((e1, t)=>eb(tb(e1, \"raw\", {\n        value: eb(t || e1.slice())\n    })))([\n    \"\\n  max-width: 100%;\\n\"\n])));\nvar nb, ob = Object.freeze, rb = Object.defineProperty;\nur(_g)(nb || (nb = ((e1, t)=>ob(rb(e1, \"raw\", {\n        value: ob(t || e1.slice())\n    })))([\n    \"\\n  & > div {\\n    display: inline-block;\\n    vertical-align: middle;\\n    max-width: 100%;\\n    box-sizing: border-box;\\n  }\\n\"\n])));\nvar ib, ab, sb = Object.freeze, lb = Object.defineProperty, cb = (e1, t)=>sb(lb(e1, \"raw\", {\n        value: sb(t || e1.slice())\n    }));\nur(Mg)(ib || (ib = cb([\n    \"\\n  pointer-events: all;\\n  & > * {\\n    opacity: var(\",\n    \", 1);\\n    will-change: opacity;\\n  }\\n\"\n])), $h), ur(Qp)(ab || (ab = cb([\n    \"\\n  overflow-x: auto;\\n\"\n])));\nconst ub = Symbol.for(\"@sanity/ui/context/toast\");\nLf[ub] = Lf[ub] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nvar db, hb, fb = Object.freeze, pb = Object.defineProperty, gb = (e1, t)=>fb(pb(e1, \"raw\", {\n        value: fb(t || e1.slice())\n    }));\nfunction mb(e1) {\n    if (\"treeitem\" === e1.getAttribute(\"role\") && e1.focus(), \"none\" === e1.getAttribute(\"role\")) {\n        const t = e1.firstChild;\n        t && t instanceof HTMLElement && t.focus();\n    }\n}\nur(vm)(db || (db = gb([\n    \"\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  pointer-events: none;\\n\"\n]))), ur.div(hb || (hb = gb([\n    \"\\n  box-sizing: border-box;\\n  position: absolute;\\n  right: 0;\\n  bottom: 0;\\n  max-width: 420px;\\n  width: 100%;\\n\"\n])));\nconst vb = Symbol.for(\"@sanity/ui/context/tree\");\nLf[vb] = Lf[vb] || /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);\nconst bb = Lf[vb], yb = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(t, n) {\n    const { children: o, space: r = 1, onFocus: a, ...s } = t, l = Gf(n), [c, d] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), f = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(c), g = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>[], []), [v, b] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]), [y, w] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({}), x = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(y);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        f.current = c;\n    }, [\n        c\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        x.current = y;\n    }, [\n        y\n    ]);\n    const k = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1, t, n, o)=>(w((o)=>({\n                ...o,\n                [t]: {\n                    element: e1,\n                    expanded: n\n                }\n            })), o && d(e1), ()=>{\n            w((e1)=>{\n                const n = {\n                    ...e1\n                };\n                return delete n[t], n;\n            });\n        }), []), S = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1, t)=>{\n        w((n)=>{\n            const o = n[e1];\n            return o ? {\n                ...n,\n                [e1]: {\n                    ...o,\n                    expanded: t\n                }\n            } : n;\n        });\n    }, []), P = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            version: 0,\n            focusedElement: c || v[0] || null,\n            level: 0,\n            path: g,\n            registerItem: k,\n            setExpanded: S,\n            setFocusedElement: d,\n            space: r,\n            state: y\n        }), [\n        c,\n        v,\n        g,\n        k,\n        S,\n        r,\n        y\n    ]), E = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        var t;\n        if (f.current) if (\"ArrowDown\" !== e1.key) if (\"ArrowUp\" !== e1.key) if (\"ArrowLeft\" !== e1.key) if (\"ArrowRight\" !== e1.key) ;\n        else {\n            e1.preventDefault();\n            const n = f.current.getAttribute(\"data-tree-key\");\n            if (!n) return;\n            (null == (t = x.current[n]) ? void 0 : t.expanded) || w((e1)=>{\n                const t = e1[n];\n                return t ? {\n                    ...e1,\n                    [n]: {\n                        ...t,\n                        expanded: !0\n                    }\n                } : e1;\n            });\n        }\n        else {\n            e1.preventDefault();\n            const t = f.current.getAttribute(\"data-tree-key\");\n            if (!t) return;\n            const n = x.current[t];\n            if (!n) return;\n            if (n.expanded) w((e1)=>{\n                const n = e1[t];\n                return n ? {\n                    ...e1,\n                    [t]: {\n                        ...n,\n                        expanded: !1\n                    }\n                } : e1;\n            });\n            else {\n                const e1 = t.split(\"/\");\n                e1.pop();\n                const n = e1.join(\"/\"), o = n && x.current[n];\n                o && (o.element.focus(), d(o.element));\n            }\n        }\n        else {\n            e1.preventDefault();\n            const t = function(e1, t, n) {\n                var o;\n                const r = t.indexOf(n), i = t.slice(0, r);\n                for(let t = i.length - 1; t >= 0; t -= 1){\n                    const n = i[t].getAttribute(\"data-tree-key\");\n                    if (!n) continue;\n                    const r = n.split(\"/\");\n                    r.pop();\n                    const a = [];\n                    let s = !0;\n                    for(let t = 0; t < r.length; t += 1)if (a.push(r[t]), !(null == (o = e1[a.join(\"/\")]) ? void 0 : o.expanded)) {\n                        s = !1;\n                        break;\n                    }\n                    if (s) return i[t];\n                }\n                return null;\n            }(x.current, v, f.current);\n            t && (mb(t), d(t));\n        }\n        else {\n            e1.preventDefault();\n            const t = function(e1, t, n) {\n                var o;\n                const r = t.indexOf(n), i = t.slice(r), a = t.length;\n                for(let t = 1; t < a; t += 1){\n                    if (!i[t]) continue;\n                    const n = i[t].getAttribute(\"data-tree-key\");\n                    if (!n) continue;\n                    const r = n.split(\"/\");\n                    r.pop();\n                    const a = [];\n                    let s = !0;\n                    for(let t = 0; t < r.length; t += 1)if (a.push(r[t]), !(null == (o = e1[a.join(\"/\")]) ? void 0 : o.expanded)) {\n                        s = !1;\n                        break;\n                    }\n                    if (s) return i[t];\n                }\n                return null;\n            }(x.current, v, f.current);\n            t && (mb(t), d(t));\n        }\n    }, [\n        v\n    ]), T = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        d(e1.target), null == a || a(e1);\n    }, [\n        a\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!l.current) return;\n        const e1 = Array.from(l.current.querySelectorAll('[data-ui=\"TreeItem\"]'));\n        b(e1);\n    }, [\n        o,\n        l\n    ]), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(bb.Provider, {\n        value: P,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Im, {\n            as: \"ul\",\n            \"data-ui\": \"Tree\",\n            ...s,\n            onFocus: T,\n            onKeyDown: E,\n            ref: l,\n            role: \"tree\",\n            space: r,\n            children: o\n        })\n    });\n}));\nyb.displayName = \"Tree\";\nvar wb, xb = Object.freeze, kb = Object.defineProperty;\nur(Zp)(wb || (wb = ((e1, t)=>xb(kb(e1, \"raw\", {\n        value: xb(t || e1.slice())\n    })))([\n    \"\\n  & > svg {\\n    transition: transform 100ms;\\n  }\\n\"\n])));\nconst Sb = {\n    alt: \"altKey\",\n    ctrl: \"ctrlKey\",\n    mod:  false ? 0 : \"ctrlKey\",\n    shift: \"shiftKey\"\n};\nfunction Pb(e1) {\n    return \"Alt\" === e1.key;\n}\nvar Eb, Tb, Ab, Rb = Object.freeze, Cb = Object.defineProperty, Mb = (e1, t)=>Rb(Cb(e1, \"raw\", {\n        value: Rb(t || e1.slice())\n    }));\nconst Ob = ur(Mg)(Eb || (Eb = Mb([\n    \"\\n  background-color: var(--overlay-bg);\\n  border-radius: 3px;\\n  pointer-events: none;\\n  position: absolute;\\n  will-change: transform;\\n  box-shadow: var(--overlay-box-shadow);\\n  transition: none;\\n\\n  --overlay-bg: transparent;\\n  --overlay-box-shadow: inset 0 0 0 1px transparent;\\n\\n  [data-overlays] & {\\n    --overlay-bg: color-mix(\\n      in srgb,\\n      transparent 95%,\\n      var(--card-focus-ring-color)\\n    );\\n    --overlay-box-shadow: inset 0 0 0 2px\\n      color-mix(in srgb, transparent 50%, var(--card-focus-ring-color));\\n  }\\n\\n  [data-fading-out] & {\\n    transition:\\n      box-shadow 1550ms,\\n      background-color 1550ms;\\n\\n    --overlay-bg: rgba(0, 0, 255, 0);\\n    --overlay-box-shadow: inset 0 0 0 1px transparent;\\n  }\\n\\n  &[data-focused] {\\n    --overlay-box-shadow: inset 0 0 0 1px var(--card-focus-ring-color);\\n  }\\n\\n  &[data-hovered]:not([data-focused]) {\\n    transition: none;\\n    --overlay-box-shadow: inset 0 0 0 2px var(--card-focus-ring-color);\\n  }\\n\\n  /* [data-unmounted] & {\\n    --overlay-box-shadow: inset 0 0 0 1px var(--card-focus-ring-color);\\n  } */\\n\\n  :link {\\n    text-decoration: none;\\n  }\\n\"\n]))), Bb = ur(Qp)(Tb || (Tb = Mb([\n    \"\\n  bottom: 100%;\\n  cursor: pointer;\\n  pointer-events: none;\\n  position: absolute;\\n  right: 0;\\n\\n  [data-hovered] & {\\n    pointer-events: all;\\n  }\\n\"\n]))), jb = ur(Mg)(Ab || (Ab = Mb([\n    \"\\n  background-color: var(--card-focus-ring-color);\\n  right: 0;\\n  border-radius: 3px;\\n\\n  & [data-ui='Text'] {\\n    color: var(--card-bg-color);\\n    white-space: nowrap;\\n  }\\n\"\n])));\nconst zb = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(function(t) {\n    const { focused: n, hovered: o, rect: r, showActions: a, sanity: s, wasMaybeCollapsed: l } = t, c = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), d = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!1);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        d.current || l || !0 !== n || !c.current || (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(c.current, {\n            behavior: \"smooth\",\n            scrollMode: \"if-needed\",\n            block: \"center\",\n            inline: \"nearest\"\n        }), d.current = !0 === n;\n    }, [\n        n,\n        l\n    ]);\n    const f = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            width: \"\".concat(r.w, \"px\"),\n            height: \"\".concat(r.h, \"px\"),\n            transform: \"translate(\".concat(r.x, \"px, \").concat(r.y, \"px)\")\n        }), [\n        r\n    ]), p = \"path\" in s ? function(e1) {\n        const { id: t, type: n, path: o, baseUrl: r, tool: i, workspace: a } = e1;\n        return (0,_index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__.c)({\n            baseUrl: r,\n            workspace: a,\n            tool: i,\n            type: n,\n            id: t,\n            path: (0,_index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__.o)(_index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__.s.fromString(o))\n        });\n    }(s) : s.href;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Ob, {\n        \"data-focused\": n ? \"\" : void 0,\n        \"data-hovered\": o ? \"\" : void 0,\n        ref: c,\n        style: f,\n        children: a && o ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Bb, {\n            gap: 1,\n            paddingBottom: 1,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)($p, {\n                as: \"a\",\n                href: p,\n                target: \"_blank\",\n                rel: \"noopener\",\n                referrerPolicy: \"no-referrer-when-downgrade\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(jb, {\n                    padding: 2,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Zp, {\n                        size: 1,\n                        weight: \"medium\",\n                        children: \"Open in Studio\"\n                    })\n                })\n            })\n        }) : null\n    });\n}), Lb = (e1, t)=>{\n    const { type: n } = t;\n    switch(n){\n        case \"element/register\":\n            {\n                const n = !!e1.find((e1)=>e1.id === t.id);\n                return n ? e1 : [\n                    ...e1,\n                    {\n                        id: t.id,\n                        activated: !1,\n                        focused: !1,\n                        hovered: !1,\n                        rect: t.rect,\n                        sanity: t.sanity\n                    }\n                ];\n            }\n        case \"element/activate\":\n            return e1.map((e1)=>e1.id === t.id ? {\n                    ...e1,\n                    activated: !0\n                } : e1);\n        case \"element/unregister\":\n            return e1.filter((e1)=>e1.id !== t.id);\n        case \"element/deactivate\":\n            return e1.map((e1)=>e1.id === t.id ? {\n                    ...e1,\n                    activated: !1,\n                    hovered: !1\n                } : e1);\n        case \"element/mouseenter\":\n            return e1.map((e1)=>e1.id === t.id ? {\n                    ...e1,\n                    rect: t.rect,\n                    hovered: !0\n                } : {\n                    ...e1,\n                    hovered: !1\n                });\n        case \"element/mouseleave\":\n            return e1.map((e1)=>e1.id === t.id ? {\n                    ...e1,\n                    hovered: !1\n                } : e1);\n        case \"element/updateRect\":\n            return e1.map((e1)=>e1.id === t.id ? {\n                    ...e1,\n                    rect: t.rect\n                } : e1);\n        case \"element/click\":\n            return e1.map((e1)=>({\n                    ...e1,\n                    focused: e1.id === t.id && \"clicked\"\n                }));\n        case \"overlay/blur\":\n        case \"presentation/blur\":\n            return e1.map((e1)=>({\n                    ...e1,\n                    focused: !1\n                }));\n        case \"presentation/focus\":\n            {\n                const n = e1.find((e1)=>\"clicked\" === e1.focused);\n                return e1.map((e1)=>{\n                    if (e1 === n) return e1;\n                    const o = \"path\" in e1.sanity && e1.sanity.id === t.data.id && e1.sanity.path === t.data.path;\n                    return {\n                        ...e1,\n                        focused: o && n ? \"duplicate\" : o\n                    };\n                });\n            }\n        default:\n            return e1;\n    }\n};\nfunction Vb(e1, t) {\n    let n = e1.focusPath, o = !1;\n    if (\"presentation/focus\" === t.type) {\n        const r = e1.focusPath;\n        n = t.data.path, r !== n && (o = r.slice(n.length).startsWith(\"[\"));\n    }\n    return {\n        ...e1,\n        focusPath: n,\n        elements: Lb(e1.elements, t),\n        wasMaybeCollapsed: o\n    };\n}\nconst Db = [\n    \"channel/disconnect\",\n    \"channel/response\",\n    \"channel/heartbeat\"\n], _b = [\n    \"handshake/syn\",\n    \"handshake/syn-ack\",\n    \"handshake/ack\"\n], $b = (e1)=>Db.some((t)=>t === e1), Fb = (e1)=>_b.some((t)=>t === e1), Ib = ({ data: e1 = {} })=>\"object\" == typeof e1 && null !== e1 && !Array.isArray(e1) && !(\"domain\" in e1) && [\n        \"id\",\n        \"type\",\n        \"from\",\n        \"to\"\n    ].every((t)=>t in e1) && e1.type.startsWith(\"handshake/\");\nfunction Hb(e1) {\n    const t = window.self !== window.top || window.opener, n = {\n        buffer: [],\n        id: null,\n        origin: null,\n        source: null,\n        status: \"connecting\"\n    };\n    function o(t, o) {\n        if (Fb(t) || $b(t) || \"connecting\" !== n.status && \"reconnecting\" !== n.status) {\n            if (n.id && n.origin && n.source) {\n                const r = {\n                    connectionId: n.id,\n                    data: o,\n                    domain: \"sanity/channels\",\n                    from: e1.id,\n                    id: (0,_index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__.v)(),\n                    to: e1.connectTo,\n                    type: t\n                };\n                try {\n                    n.source.postMessage(r, {\n                        targetOrigin: n.origin\n                    });\n                } catch (t) {\n                    throw new Error(\"Failed to postMessage '\".concat(r.id, \"' on '\").concat(e1.id, \"'\"));\n                }\n            }\n        } else n.buffer.push({\n            type: t,\n            data: o\n        });\n    }\n    function r(t) {\n        var r;\n        if (Ib(t)) console.error(\"Visual editing package mismatch detected! Please ensure you are using the latest version of Sanity Studio and any packages listed here:\\nhttps://github.com/sanity-io/visual-editing\");\n        else if (function(t) {\n            const { data: n } = t;\n            return \"sanity/channels\" === n.domain && n.to === e1.id && n.from === e1.connectTo && \"channel/response\" !== n.type;\n        }(t)) {\n            const { data: a } = t;\n            if (n.origin && t.origin !== n.origin) return;\n            if (t.source && n.source !== t.source && (n.source = t.source), Fb(a.type) && a.data) {\n                if (\"handshake/syn\" === a.type) return n.origin = t.origin, n.id = a.data.id, i(\"connecting\"), void o(\"handshake/syn-ack\", {\n                    id: n.id\n                });\n                if (\"handshake/ack\" === a.type && a.data.id === n.id) return void i(\"connected\");\n            } else if (a.connectionId === n.id && t.origin === n.origin) {\n                if (\"channel/disconnect\" === a.type) return void i(\"disconnected\");\n                {\n                    const t = [\n                        a.type,\n                        a.data\n                    ];\n                    null == (r = e1.onEvent) || r.call(e1, ...t), o(\"channel/response\", {\n                        responseTo: a.id\n                    });\n                }\n                return;\n            }\n        }\n    }\n    function i(t) {\n        var r;\n        n.status = t, null == (r = null == e1 ? void 0 : e1.onStatusUpdate) || r.call(e1, t), \"connected\" === t && function() {\n            const e1 = [\n                ...n.buffer\n            ];\n            n.buffer.splice(0, n.buffer.length), e1.forEach(({ type: e1, data: t })=>{\n                o(e1, t);\n            });\n        }();\n    }\n    return window.addEventListener(\"message\", r, !1), i(\"connecting\"), {\n        destroy: function() {\n            [\n                \"disconnected\"\n            ].includes(n.status) || i(\"disconnected\"), window.removeEventListener(\"message\", r, !1);\n        },\n        inFrame: t,\n        send: function(e1, t) {\n            o(e1, t);\n        }\n    };\n}\nvar Nb, Wb = Object.freeze, Ub = Object.defineProperty;\nconst Yb = ur.div(Nb || (Nb = ((e1, t)=>Wb(Ub(e1, \"raw\", {\n        value: Wb(t || e1.slice())\n    })))([\n    \"\\n  background-color: transparent;\\n  direction: ltr;\\n  inset: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  width: 100%;\\n  height: 100%;\\n  z-index: \",\n    \";\\n\"\n])), ({ $zIndex: e1 })=>null != e1 ? e1 : \"9999999\");\nfunction Gb(e1) {\n    let t, n;\n    return t = requestAnimationFrame(()=>{\n        n = requestAnimationFrame(e1);\n    }), ()=>{\n        void 0 !== t && cancelAnimationFrame(t), void 0 !== n && cancelAnimationFrame(n);\n    };\n}\nconst Xb = function(t) {\n    const { history: n, zIndex: o } = t, [{ elements: r, wasMaybeCollapsed: a }, s] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(Vb, void 0, ()=>({\n            elements: [],\n            focusPath: \"\",\n            wasMaybeCollapsed: !1\n        })), [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [d, f] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!0), g = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1, t)=>{\n        var o;\n        \"presentation/focus\" === e1 && (null == (o = t.path) ? void 0 : o.length) && s({\n            type: e1,\n            data: t\n        }), \"presentation/blur\" === e1 && s({\n            type: e1,\n            data: t\n        }), \"presentation/navigate\" === e1 && (null == n || n.update(t)), \"presentation/toggleOverlay\" === e1 && f((e1)=>!e1);\n    }, [\n        n\n    ]), { channel: v, status: b } = function(e1) {\n        const t = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(), [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n            const n = Hb({\n                id: \"overlays\",\n                connectTo: \"presentation\",\n                onEvent: e1,\n                onStatusUpdate: o\n            });\n            return t.current = n, ()=>{\n                n.destroy(), t.current = void 0;\n            };\n        }, [\n            e1\n        ]), {\n            channel: t.current,\n            status: n\n        };\n    }(g), y = function(e1, t, n) {\n        const o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n            if (e1) return o.current = (0,_index_CCPqf31P_js__WEBPACK_IMPORTED_MODULE_5__.a)({\n                handler: t,\n                overlayElement: e1,\n                preventDefault: n\n            }), ()=>{\n                var e1;\n                null == (e1 = o.current) || e1.deactivate(), o.current = void 0;\n            };\n        }, [\n            e1,\n            t,\n            n\n        ]), o;\n    }(l, (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((e1)=>{\n        \"element/click\" === e1.type ? null == v || v.send(\"overlay/focus\", e1.sanity) : \"overlay/activate\" === e1.type ? null == v || v.send(\"overlay/toggle\", {\n            enabled: !0\n        }) : \"overlay/deactivate\" === e1.type && (null == v || v.send(\"overlay/toggle\", {\n            enabled: !1\n        })), s(e1);\n    }, [\n        v\n    ]), !!(null == v ? void 0 : v.inFrame));\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var e1, t;\n        d ? null == (e1 = y.current) || e1.activate() : null == (t = y.current) || t.deactivate();\n    }, [\n        v,\n        y,\n        d\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const e1 = (e1)=>{\n            var t;\n            const n = e1.target;\n            var o;\n            if (Boolean(fm(o = n) && \"A\" === o.nodeName || fm(n) && n.closest(\"a\")) && e1.altKey) {\n                e1.preventDefault(), e1.stopPropagation();\n                const n = new MouseEvent(e1.type, {\n                    ...e1,\n                    altKey: !1,\n                    bubbles: !0,\n                    cancelable: !0\n                });\n                null == (t = e1.target) || t.dispatchEvent(n);\n            }\n        }, t = (e1)=>{\n            Pb(e1) && f((e1)=>!e1);\n        }, n = (e1)=>{\n            var t;\n            Pb(e1) && f((e1)=>!e1), t = e1, [\n                \"mod\",\n                \"\\\\\"\n            ].every((e1)=>Sb[e1] ? t[Sb[e1]] : t.key === e1.toUpperCase()) && f((e1)=>!e1);\n        };\n        return window.addEventListener(\"click\", e1), window.addEventListener(\"keydown\", n), window.addEventListener(\"keyup\", t), ()=>{\n            window.removeEventListener(\"click\", e1), window.removeEventListener(\"keydown\", n), window.removeEventListener(\"keyup\", t);\n        };\n    }, [\n        f\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (v && n) return n.subscribe((e1)=>{\n            v.send(\"overlay/navigate\", e1);\n        });\n    }, [\n        v,\n        n\n    ]);\n    const [w, x] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [S, P] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), E = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(void 0);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (d) return Gb(()=>{\n            x(!0), Gb(()=>{\n                P(!0), E.current = setTimeout(()=>{\n                    P(!1), x(!1);\n                }, 1500);\n            });\n        });\n        E.current && (clearTimeout(E.current), x(!1), P(!1));\n    }, [\n        d\n    ]);\n    const T = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>!v || v.inFrame && \"connected\" !== b ? [] : r.filter((e1)=>e1.activated || e1.focused), [\n        v,\n        r,\n        b\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_f, {\n        theme: Vh,\n        tone: \"transparent\",\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Yb, {\n            \"data-fading-out\": S ? \"\" : void 0,\n            \"data-overlays\": w ? \"\" : void 0,\n            ref: c,\n            $zIndex: o,\n            children: T.map(({ id: t, focused: n, hovered: o, rect: r, sanity: i })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(zb, {\n                    rect: r,\n                    focused: n,\n                    hovered: o,\n                    showActions: !(null == v ? void 0 : v.inFrame),\n                    sanity: i,\n                    wasMaybeCollapsed: n && a\n                }, t))\n        })\n    });\n};\n //# sourceMappingURL=Overlays-bQSRS-P9.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/Overlays-bQSRS-P9.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/index-CCPqf31P.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/index-CCPqf31P.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ ae),\n/* harmony export */   c: () => (/* binding */ E),\n/* harmony export */   e: () => (/* binding */ pe),\n/* harmony export */   o: () => (/* binding */ R),\n/* harmony export */   s: () => (/* binding */ g),\n/* harmony export */   v: () => (/* binding */ c)\n/* harmony export */ });\n/* harmony import */ var _vercel_stega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/stega */ \"(ssr)/./node_modules/.pnpm/@vercel+stega@0.1.0/node_modules/@vercel/stega/dist/index.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\n\nlet r;\nconst o = new Uint8Array(16);\nfunction s() {\n    if (!r && (r = \"undefined\" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !r)) throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    return r(o);\n}\nconst i = [];\nfor(let e = 0; e < 256; ++e)i.push((e + 256).toString(16).slice(1));\nvar a = {\n    randomUUID: \"undefined\" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto)\n};\nfunction c(e, t, n) {\n    if (a.randomUUID && !t && !e) return a.randomUUID();\n    const r = (e = e || {}).random || (e.rng || s)();\n    if (r[6] = 15 & r[6] | 64, r[8] = 63 & r[8] | 128, t) {\n        n = n || 0;\n        for(let e = 0; e < 16; ++e)t[n + e] = r[e];\n        return t;\n    }\n    return function(e, t = 0) {\n        return i[e[t + 0]] + i[e[t + 1]] + i[e[t + 2]] + i[e[t + 3]] + \"-\" + i[e[t + 4]] + i[e[t + 5]] + \"-\" + i[e[t + 6]] + i[e[t + 7]] + \"-\" + i[e[t + 8]] + i[e[t + 9]] + \"-\" + i[e[t + 10]] + i[e[t + 11]] + i[e[t + 12]] + i[e[t + 13]] + i[e[t + 14]] + i[e[t + 15]];\n    }(r);\n}\nconst u = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, l = /_key\\s*==\\s*['\"](.*)['\"]/, p = /^\\d*:\\d*$/;\nfunction f(e) {\n    return \"number\" == typeof e || \"string\" == typeof e && /^\\[\\d+\\]$/.test(e);\n}\nfunction d(e) {\n    return \"string\" == typeof e ? l.test(e.trim()) : \"object\" == typeof e && \"_key\" in e;\n}\nfunction m(e) {\n    if (\"string\" == typeof e && p.test(e)) return !0;\n    if (!Array.isArray(e) || 2 !== e.length) return !1;\n    const [t, n] = e;\n    return !(\"number\" != typeof t && \"\" !== t || \"number\" != typeof n && \"\" !== n);\n}\nfunction y(e) {\n    if (!Array.isArray(e)) throw new Error(\"Path is not an array\");\n    return e.reduce((e, t, n)=>{\n        const r = typeof t;\n        if (\"number\" === r) return \"\".concat(e, \"[\").concat(t, \"]\");\n        if (\"string\" === r) {\n            const r = 0 === n ? \"\" : \".\";\n            return \"\".concat(e).concat(r).concat(t);\n        }\n        if (d(t) && t._key) return \"\".concat(e, '[_key==\"').concat(t._key, '\"]');\n        if (Array.isArray(t)) {\n            const [n, r] = t;\n            return \"\".concat(e, \"[\").concat(n, \":\").concat(r, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(t), \"`\"));\n    }, \"\");\n}\nfunction h(e) {\n    if (\"string\" != typeof e) throw new Error(\"Path is not a string\");\n    const t = e.match(u);\n    if (!t) throw new Error(\"Invalid path string\");\n    return t.map(v);\n}\nfunction v(e) {\n    return f(e) ? function(e) {\n        return Number(e.replace(/[^\\d]/g, \"\"));\n    }(e) : d(e) ? function(e) {\n        const t = e.match(l);\n        return {\n            _key: t[1]\n        };\n    }(e) : m(e) ? function(e) {\n        const [t, n] = e.split(\":\").map((e)=>\"\" === e ? e : Number(e));\n        return [\n            t,\n            n\n        ];\n    }(e) : e;\n}\nvar g = Object.freeze({\n    __proto__: null,\n    fromString: h,\n    get: function(e, t, n) {\n        const r = \"string\" == typeof t ? h(t) : t;\n        if (!Array.isArray(r)) throw new Error(\"Path must be an array or a string\");\n        let o = e;\n        for(let e = 0; e < r.length; e++){\n            const t = r[e];\n            if (f(t)) {\n                if (!Array.isArray(o)) return n;\n                o = o[t];\n            }\n            if (d(t)) {\n                if (!Array.isArray(o)) return n;\n                o = o.find((e)=>e._key === t._key);\n            }\n            if (\"string\" == typeof t && (o = \"object\" == typeof o && null !== o ? o[t] : void 0), void 0 === o) return n;\n        }\n        return o;\n    },\n    isIndexSegment: f,\n    isIndexTuple: m,\n    isKeySegment: d,\n    reKeySegment: l,\n    toString: y\n});\nconst b = \"drafts.\";\nfunction E(e) {\n    const { baseUrl: t, workspace: n = \"default\", tool: r = \"default\", id: o, type: s, path: i } = e;\n    if (!t) throw new Error(\"baseUrl is required\");\n    if (!i) throw new Error(\"path is required\");\n    if (!o) throw new Error(\"id is required\");\n    if (\"/\" !== t && t.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n    const a = \"default\" === n ? void 0 : n, c = \"default\" === r ? void 0 : r, u = function(e) {\n        return e.startsWith(b) ? e.slice(b.length) : e;\n    }(o), l = Array.isArray(i) ? y(function(e) {\n        return e.map((e)=>{\n            if (\"string\" == typeof e) return e;\n            if (\"number\" == typeof e) return e;\n            if (\"\" !== e._key) return {\n                _key: e._key\n            };\n            if (-1 !== e._index) return e._index;\n            throw new Error(\"invalid segment:\".concat(JSON.stringify(e)));\n        });\n    }(i)) : i, p = new URLSearchParams({\n        baseUrl: t,\n        id: u,\n        type: s,\n        path: l\n    });\n    a && p.set(\"workspace\", a), c && p.set(\"tool\", c);\n    const f = [\n        \"/\" === t ? \"\" : t\n    ];\n    a && f.push(a);\n    const d = [\n        \"mode=presentation\",\n        \"id=\".concat(u),\n        \"type=\".concat(s),\n        \"path=\".concat(encodeURIComponent(l))\n    ];\n    return c && d.push(\"tool=\".concat(c)), f.push(\"intent\", \"edit\", \"\".concat(d.join(\";\"), \"?\").concat(p)), f.join(\"/\");\n}\nvar w, k, x, _, L = class extends Error {\n    constructor(e){\n        super(e[0].message), this.name = \"ValiError\", this.issues = e;\n    }\n};\nfunction P(e, t) {\n    return Array.isArray(e) ? [\n        void 0,\n        e\n    ] : [\n        e,\n        t\n    ];\n}\nfunction A(e) {\n    return {\n        lang: e?.lang ?? w?.lang,\n        message: e?.message,\n        abortEarly: e?.abortEarly ?? w?.abortEarly,\n        abortPipeEarly: e?.abortPipeEarly ?? w?.abortPipeEarly,\n        skipPipe: e?.skipPipe ?? w?.skipPipe\n    };\n}\nfunction I(e, t, n, r) {\n    const o = e.message ?? function(e, t) {\n        return _?.get(e)?.get(t);\n    }(t, r.lang) ?? (\"type\" === e.type ? (s = r.lang, x?.get(s)) : null) ?? n?.message ?? function(e) {\n        return k?.get(e);\n    }(r.lang) ?? r.message;\n    var s;\n    return \"function\" == typeof o ? o(r) : o;\n}\nfunction U(e, t, n) {\n    return {\n        typed: e,\n        output: t,\n        issues: n\n    };\n}\nfunction j(e) {\n    let t = typeof e;\n    return \"object\" === t && (t = e ? Object.getPrototypeOf(e).constructor.name : \"null\"), \"string\" === t ? `\"${e}\"` : \"number\" === t || \"bigint\" === t || \"boolean\" === t ? `${e}` : t;\n}\nfunction N(e, t, n) {\n    const r = n.received ?? j(n.input), o = {\n        reason: e.type,\n        context: n.context.type,\n        expected: n.context.expects,\n        received: r,\n        message: `Invalid ${n.label}: ${n.context.expects ? `Expected ${n.context.expects} but r` : \"R\"}eceived ${r}`,\n        input: n.input,\n        requirement: n.context.requirement,\n        path: n.path,\n        lang: t?.lang,\n        abortEarly: t?.abortEarly,\n        abortPipeEarly: t?.abortPipeEarly,\n        skipPipe: t?.skipPipe\n    };\n    return o.message = I(n.context, n.reference, t, o), o;\n}\nfunction T(e, t, n, r) {\n    if (e.pipe && !n?.skipPipe) for (const o of e.pipe){\n        const s = o._parse(t);\n        if (s.issues) {\n            for (const t of s.issues){\n                const o = N(e, n, t);\n                r ? r.push(o) : r = [\n                    o\n                ];\n            }\n            if (n?.abortEarly || n?.abortPipeEarly) break;\n        } else t = s.output;\n    }\n    return U(!0, t, r);\n}\nfunction O(e, t, n, r, o) {\n    const s = j(n), i = o?.expected ?? e.expects, a = {\n        reason: o?.reason ?? \"type\",\n        context: e.type,\n        expected: i,\n        received: s,\n        message: `Invalid type: Expected ${i} but received ${s}`,\n        input: n,\n        path: o?.path,\n        issues: o?.issues,\n        lang: r?.lang,\n        abortEarly: r?.abortEarly,\n        abortPipeEarly: r?.abortPipeEarly,\n        skipPipe: r?.skipPipe\n    };\n    return a.message = I(e, t, r, a), {\n        typed: !1,\n        output: n,\n        issues: [\n            a\n        ]\n    };\n}\nfunction $(e, t, n, r) {\n    const [o, s, i] = function(e, t, n) {\n        if (!e || \"object\" == typeof e && !Array.isArray(e)) {\n            const [r, o] = P(t, n);\n            return [\n                e,\n                r,\n                o\n            ];\n        }\n        const [r, o] = P(e, t);\n        return [\n            void 0,\n            r,\n            o\n        ];\n    }(t, n, r);\n    let a;\n    return {\n        type: \"object\",\n        expects: \"Object\",\n        async: !1,\n        entries: e,\n        rest: o,\n        message: s,\n        pipe: i,\n        _parse (e, t) {\n            if (e && \"object\" == typeof e) {\n                a = a ?? Object.entries(this.entries);\n                let n, r = !0;\n                const o = {};\n                for (const [s, i] of a){\n                    const a = e[s], c = i._parse(a, t);\n                    if (c.issues) {\n                        const o = {\n                            type: \"object\",\n                            origin: \"value\",\n                            input: e,\n                            key: s,\n                            value: a\n                        };\n                        for (const e of c.issues)e.path ? e.path.unshift(o) : e.path = [\n                            o\n                        ], n?.push(e);\n                        if (n || (n = c.issues), t?.abortEarly) {\n                            r = !1;\n                            break;\n                        }\n                    }\n                    c.typed || (r = !1), (void 0 !== c.output || s in e) && (o[s] = c.output);\n                }\n                if (this.rest && (!t?.abortEarly || !n)) {\n                    for(const s in e)if (!(s in this.entries)) {\n                        const i = e[s], a = this.rest._parse(i, t);\n                        if (a.issues) {\n                            const o = {\n                                type: \"object\",\n                                origin: \"value\",\n                                input: e,\n                                key: s,\n                                value: i\n                            };\n                            for (const e of a.issues)e.path ? e.path.unshift(o) : e.path = [\n                                o\n                            ], n?.push(e);\n                            if (n || (n = a.issues), t?.abortEarly) {\n                                r = !1;\n                                break;\n                            }\n                        }\n                        a.typed || (r = !1), o[s] = a.output;\n                    }\n                }\n                return r ? T(this, o, t, n) : U(!1, o, n);\n            }\n            return O(this, $, e, t);\n        }\n    };\n}\nfunction S(e, t, n) {\n    const r = e._parse(t, A(n));\n    return {\n        typed: r.typed,\n        success: !r.issues,\n        data: r.output,\n        output: r.output,\n        error: r.issues && new L(r.issues),\n        issues: r.issues\n    };\n}\nfunction M(e) {\n    return null !== e && Array.isArray(e);\n}\nfunction R(e) {\n    let t = \"\";\n    for (const n of e)\"string\" != typeof n ? \"number\" != typeof n ? M(n) ? (t && (t += \":\"), t += \"\".concat(n.join(\",\"), \"}\")) : n._key && (t && (t += \":\"), t += \"\".concat(n._key)) : (t && (t += \":\"), t += \"\".concat(n)) : (t && (t += \".\"), t += n);\n    return t;\n}\nconst z = /^([A-Za-z]+):([0-9]+)$/, D = /^([A-Za-z]+):([0-9]+),([0-9]+)$/, C = /^([A-Za-z]+):([a-z0-9]+)$/;\nconst q = function e(t, n) {\n    const [r, o] = P(t, n);\n    return {\n        type: \"string\",\n        expects: \"string\",\n        async: !1,\n        message: r,\n        pipe: o,\n        _parse (t, n) {\n            return \"string\" == typeof t ? T(this, t, n) : O(this, e, t, n);\n        }\n    };\n}([\n    function e(t, n) {\n        return {\n            type: \"min_length\",\n            expects: `>=${t}`,\n            async: !1,\n            message: n,\n            requirement: t,\n            _parse (t) {\n                return t.length >= this.requirement ? {\n                    output: t\n                } : function(e, t, n, r, o) {\n                    return {\n                        issues: [\n                            {\n                                context: e,\n                                reference: t,\n                                input: n,\n                                label: r,\n                                received: o\n                            }\n                        ]\n                    };\n                }(this, e, t, \"length\", `${t.length}`);\n            }\n        };\n    }(1)\n]), H = {\n    type: \"optional\",\n    expects: `${(W = q).expects} | undefined`,\n    async: !1,\n    wrapped: W,\n    default: Z,\n    _parse (e, t) {\n        if (void 0 === e) {\n            const t = \"function\" == typeof (n = this).default ? n.default() : n.default;\n            if (void 0 === t) return U(!0, e);\n            e = t;\n        }\n        var n;\n        return this.wrapped._parse(e, t);\n    }\n}, J = $({\n    id: q,\n    path: q,\n    type: H,\n    baseUrl: q,\n    workspace: H,\n    tool: H\n}), V = $({\n    origin: q,\n    href: q,\n    data: H\n});\nvar W, Z;\nfunction K(e) {\n    return t = e, !J._parse(t, {\n        abortEarly: !0,\n        skipPipe: A(n)?.skipPipe\n    }).issues;\n    var t, n;\n}\nfunction X(e) {\n    const t = e.split(\";\").reduce((e, t)=>{\n        const [n, r] = t.split(\"=\");\n        if (!n || !r) return e;\n        switch(n){\n            case \"id\":\n                e.id = r;\n                break;\n            case \"type\":\n                e.type = r;\n                break;\n            case \"path\":\n                e.path = g.toString(function(e) {\n                    const t = [];\n                    for (const n of e.split(\".\")){\n                        const e = z.exec(n);\n                        if (e) {\n                            t.push(e[1], Number(e[2]));\n                            continue;\n                        }\n                        const r = D.exec(n);\n                        if (r) {\n                            t.push(r[1], [\n                                Number(r[2]),\n                                Number(r[3])\n                            ]);\n                            continue;\n                        }\n                        const o = C.exec(n);\n                        o ? t.push(o[1], {\n                            _key: o[2]\n                        }) : t.push(n);\n                    }\n                    return t;\n                }(r));\n                break;\n            case \"base\":\n                e.baseUrl = decodeURIComponent(r);\n                break;\n            case \"tool\":\n                e.tool = r;\n                break;\n            case \"workspace\":\n                e.workspace = r;\n        }\n        return e;\n    }, {});\n    if (K(t)) return t;\n}\nfunction B(e) {\n    try {\n        return function(e) {\n            const t = S(J, e);\n            if (t.success) return t.output;\n            const n = S(V, e);\n            if (n.success) try {\n                const e = new URL(n.output.href, \"undefined\" == typeof document ? \"https://example.com\" : location.origin);\n                return e.searchParams.size > 0 ? function(e, t, n) {\n                    const r = e._parse(t, A(n));\n                    if (r.issues) throw new L(r.issues);\n                    return r.output;\n                }(J, Object.fromEntries(e.searchParams.entries())) : n.output;\n            } catch (e) {\n                return console.error(\"Failed to parse sanity node\", e), n.output;\n            }\n        }(JSON.parse(e));\n    } catch  {\n        return X(e);\n    }\n}\nconst F = \"sanity-visual-editing\";\nfunction G(e) {\n    const { display: t } = window.getComputedStyle(e);\n    if (\"inline\" !== t) return e;\n    const n = e.parentElement;\n    return n ? G(n) : null;\n}\nfunction Y(n, r = !1) {\n    return o = n, _vercel_stega__WEBPACK_IMPORTED_MODULE_0__.VERCEL_STEGA_REGEX.lastIndex = 0, _vercel_stega__WEBPACK_IMPORTED_MODULE_0__.VERCEL_STEGA_REGEX.test(o) ? function(e, n = !1) {\n        var r;\n        const o = (0,_vercel_stega__WEBPACK_IMPORTED_MODULE_0__.vercelStegaDecode)(e);\n        return o && \"sanity.io\" === o.origin ? (n && (o.href = null == (r = o.href) ? void 0 : r.replace(\".alt\", \"\")), JSON.stringify(o)) : \"\";\n    }(n, r) : \"\";\n    var o;\n}\nconst Q = (e)=>e.nodeType === Node.ELEMENT_NODE, ee = (e)=>\"IMG\" === e.tagName, te = (e)=>\"TIME\" === e.tagName;\nfunction ne(e) {\n    return \"path\" in e;\n}\nfunction re(e, t) {\n    let n = e.split(\".\"), r = t.split(\".\");\n    const o = Math.min(n.length, r.length);\n    return n = n.slice(0, o).reverse(), r = r.slice(0, o).reverse(), n.reduce((e, t, n)=>t === r[n] ? [\n            ...e,\n            t\n        ] : [], []).reverse().join(\".\");\n}\nfunction oe(e) {\n    if (!e.length || !e.map((e)=>ne(e)).every((e, t, n)=>e === n[0])) return;\n    if (!ne(e[0])) return e[0];\n    const t = e.filter(ne);\n    let n = e[0];\n    const r = [\n        \"projectId\",\n        \"dataset\",\n        \"id\",\n        \"baseUrl\",\n        \"workspace\",\n        \"tool\"\n    ];\n    for(let e = 1; e < t.length; e++){\n        const o = t[e];\n        if (r.some((e)=>o[e] !== (null == n ? void 0 : n[e]))) {\n            n = void 0;\n            break;\n        }\n        n.path = re(n.path, o.path);\n    }\n    return n;\n}\nfunction se(e) {\n    var t, n, r;\n    const o = [];\n    function s(e, t) {\n        const n = B(t);\n        if (!n) return;\n        const r = G(e);\n        r && o.push({\n            elements: {\n                element: e,\n                measureElement: r\n            },\n            sanity: n\n        });\n    }\n    if (e) for (const i of e.childNodes){\n        const { nodeType: e, parentElement: a, textContent: c } = i;\n        if (Q(i) && void 0 !== (null == (t = i.dataset) ? void 0 : t.sanityEditTarget)) {\n            const e = se(i).map(({ sanity: e })=>e);\n            if (!e.map((e)=>ne(e)).every((e, t, n)=>e === n[0])) continue;\n            const t = oe(e);\n            t && o.push({\n                elements: {\n                    element: i,\n                    measureElement: i\n                },\n                sanity: t\n            });\n        } else if (e === Node.TEXT_NODE && a && c) {\n            const e = Y(c);\n            if (!e) continue;\n            s(a, e);\n        } else if (Q(i)) {\n            if (\"SCRIPT\" === i.tagName || i.id === F) continue;\n            if (null == (n = i.dataset) ? void 0 : n.sanity) s(i, i.dataset.sanity);\n            else if (null == (r = i.dataset) ? void 0 : r.sanityEditInfo) s(i, i.dataset.sanityEditInfo);\n            else {\n                if (ee(i)) {\n                    const e = Y(i.alt, !0);\n                    if (!e) continue;\n                    s(i, e);\n                    continue;\n                }\n                if (te(i)) {\n                    s(i, Y(i.dateTime, !0));\n                }\n            }\n            o.push(...se(i));\n        }\n    }\n    return o;\n}\nfunction ie(e) {\n    const t = e.getBoundingClientRect();\n    return {\n        x: t.x + scrollX,\n        y: t.y + scrollY,\n        w: t.width,\n        h: t.height\n    };\n}\nfunction ae({ handler: e, overlayElement: t, preventDefault: n }) {\n    let r = !1;\n    const o = new Map, s = new WeakMap, i = new Set, a = new WeakMap;\n    let u, l, p, f = [];\n    const d = ()=>f[f.length - 1];\n    function m(e, t) {\n        e.removeEventListener(\"click\", t.click, {\n            capture: !0\n        }), e.removeEventListener(\"mousemove\", t.mousemove, {\n            capture: !0\n        }), e.removeEventListener(\"mousedown\", t.mousedown, {\n            capture: !0\n        }), e.removeEventListener(\"mouseenter\", t.mouseenter), e.removeEventListener(\"mouseleave\", t.mouseleave);\n    }\n    function y({ id: t, elements: n, handlers: r, sanity: o }) {\n        const { element: s, measureElement: i } = n;\n        !function(e, t) {\n            e.addEventListener(\"click\", t.click, {\n                capture: !0\n            }), e.addEventListener(\"mousemove\", t.mousemove, {\n                once: !0,\n                capture: !0\n            }), e.addEventListener(\"mousedown\", t.mousedown, {\n                capture: !0\n            });\n        }(s, r), u.observe(i), e({\n            type: \"element/activate\",\n            id: t,\n            rect: ie(s),\n            sanity: o\n        });\n    }\n    function h({ id: t, elements: n, handlers: r }) {\n        const { element: o, measureElement: s } = n;\n        m(o, r), u.unobserve(s), f = f.filter((e)=>e !== o), e({\n            type: \"element/deactivate\",\n            id: t\n        });\n    }\n    function v({ elements: r, sanity: p }) {\n        const { element: m, measureElement: h } = r, v = {\n            click (t) {\n                const r = t.target;\n                m === d() && m.contains(r) && (n && (t.preventDefault(), t.stopPropagation()), e({\n                    type: \"element/click\",\n                    id: g,\n                    sanity: p\n                }));\n            },\n            mousedown (e) {\n                e.preventDefault();\n            },\n            mousemove (e) {\n                v.mouseenter(e);\n                const t = e.currentTarget;\n                t && (t.addEventListener(\"mouseenter\", v.mouseenter), t.addEventListener(\"mouseleave\", v.mouseleave));\n            },\n            mouseenter () {\n                f.push(m), e({\n                    type: \"element/mouseenter\",\n                    id: g,\n                    rect: ie(m)\n                });\n            },\n            mouseleave (n) {\n                function r() {\n                    f.pop();\n                    const t = d();\n                    if (e({\n                        type: \"element/mouseleave\",\n                        id: g\n                    }), t) {\n                        const n = s.get(t);\n                        n && e({\n                            type: \"element/mouseenter\",\n                            id: n.id,\n                            rect: ie(t)\n                        });\n                    }\n                }\n                const { relatedTarget: o } = n;\n                if (o instanceof HTMLElement && t.contains(o)) {\n                    const e = ()=>{\n                        r(), o.removeEventListener(\"mouseleave\", e);\n                    };\n                    o.addEventListener(\"mouseleave\", e);\n                } else r();\n            }\n        }, g = c(), b = {\n            id: g,\n            elements: r,\n            sanity: p,\n            handlers: v\n        };\n        i.add(m), a.set(h, m), o.set(g, m), s.set(m, b), l.observe(m), u.observe(h), e({\n            type: \"element/register\",\n            id: g,\n            rect: ie(m),\n            sanity: p\n        }), y(b);\n    }\n    function g(e) {\n        const t = se(e);\n        for (const e of t)e.elements.element instanceof HTMLElement && !s.has(e.elements.element) && v(e);\n    }\n    function b(t) {\n        const n = s.get(t);\n        if (n) {\n            const { id: r, handlers: a } = n;\n            m(t, a), u.unobserve(t), s.delete(t), i.delete(t), o.delete(r), e({\n                type: \"element/unregister\",\n                id: r\n            });\n        }\n    }\n    function E(e) {\n        const n = !!e.filter((e)=>{\n            const n = e.target;\n            if (n === t || t.contains(n)) return !1;\n            if (n instanceof HTMLElement) if (s.has(n)) {\n                se({\n                    childNodes: [\n                        n\n                    ]\n                }).length || b(n);\n            } else g({\n                childNodes: [\n                    n\n                ]\n            });\n            return !0;\n        }).length;\n        if (n) for (const e of i)e.isConnected ? w(e) : b(e);\n    }\n    function w(t) {\n        const n = s.get(t);\n        n && e({\n            type: \"element/updateRect\",\n            id: n.id,\n            rect: ie(t)\n        });\n    }\n    function k(e) {\n        for (const t of e){\n            const e = t.target;\n            if (e instanceof HTMLElement) {\n                const t = a.get(e);\n                if (!t) return;\n                w(t);\n            }\n        }\n    }\n    function x(e) {\n        for (const t of e){\n            const { target: e } = t, n = e instanceof HTMLElement && s.get(e);\n            n && (t.isIntersecting ? y(n) : h(n));\n        }\n    }\n    function _() {\n        f = [], e({\n            type: \"overlay/blur\"\n        });\n    }\n    function L() {\n        for (const e of i)w(e);\n    }\n    function P(e) {\n        const { target: t } = e;\n        if (t !== window.document && t instanceof HTMLElement) for (const e of i)t.contains(e) && w(e);\n    }\n    function A() {\n        r || (window.addEventListener(\"click\", _), window.addEventListener(\"resize\", L), window.addEventListener(\"scroll\", P, {\n            capture: !0,\n            passive: !0\n        }), l = new IntersectionObserver(x, {\n            threshold: .3\n        }), u = new ResizeObserver(k), p = new MutationObserver(E), p.observe(document.body, {\n            attributes: !0,\n            characterData: !0,\n            childList: !0,\n            subtree: !0\n        }), g(document.body), r = !0, e({\n            type: \"overlay/activate\"\n        }));\n    }\n    return window.document.fonts.ready.then(()=>{\n        for (const e of i)w(e);\n    }), A(), {\n        activate: A,\n        deactivate: function() {\n            r && (window.removeEventListener(\"click\", _), window.removeEventListener(\"resize\", L), window.removeEventListener(\"scroll\", P), l.disconnect(), p.disconnect(), u.disconnect(), i.forEach((e)=>{\n                b(e);\n            }), o.clear(), i.clear(), f = [], r = !1, e({\n                type: \"overlay/deactivate\"\n            }));\n        }\n    };\n}\nlet ce = null, ue = null, le = null;\nfunction pe(e = {}) {\n    le && clearTimeout(le);\n    const t = new AbortController;\n    return Promise.all([\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0\").then(__webpack_require__.t.bind(__webpack_require__, /*! react-dom/client */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react-dom/client.js\", 19)),\n        Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_\"), __webpack_require__.e(\"vendor-chunks/react-is@18.2.0\"), __webpack_require__.e(\"vendor-chunks/scroll-into-view-if-needed@3.1.0\"), __webpack_require__.e(\"vendor-chunks/compute-scroll-into-view@3.1.0\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./Overlays-bQSRS-P9.js */ \"(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/Overlays-bQSRS-P9.js\"))\n    ]).then(([r, { Overlays: o }])=>{\n        if (t.signal.aborted) return;\n        const { history: s, zIndex: i } = e;\n        if (ce || (ce = document.createElement(\"div\"), ce.id = F, document.body.appendChild(ce)), !ue) {\n            const { createRoot: e } = \"default\" in r ? r.default : r;\n            ue = e(ce);\n        }\n        ue.render((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(o, {\n            history: s,\n            zIndex: i\n        }));\n    }), ()=>{\n        t.abort(), le = window.setTimeout(()=>{\n            ue && (ue.unmount(), ue = null), ce && (document.body.removeChild(ce), ce = null);\n        }, 1e3);\n    };\n}\n //# sourceMappingURL=index-CCPqf31P.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+visual-editing@1.2.2_next@14.0.4_@babel+core@7.26.0_react-dom@18.2.0_react@18.2.0__react@18.2.0_/node_modules/@sanity/visual-editing/dist/_chunks/index-CCPqf31P.js\n");

/***/ })

};
;